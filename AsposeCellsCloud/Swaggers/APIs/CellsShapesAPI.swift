//
// CellsShapesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsShapesAPI {
    /**
     Delete a shape in worksheet
     
     - parameter name: (path) document name. 
     - parameter sheetName: (path) worksheet name. 
     - parameter shapeindex: (path) shape index in worksheet shapes. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsShapesDeleteWorksheetShape(name: String, sheetName: String, shapeindex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsShapesDeleteWorksheetShapeWithRequestBuilder(name: name, sheetName: sheetName, shapeindex: shapeindex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete a shape in worksheet
     - DELETE /cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) document name. 
     - parameter sheetName: (path) worksheet name. 
     - parameter shapeindex: (path) shape index in worksheet shapes. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsShapesDeleteWorksheetShapeWithRequestBuilder(name: String, sheetName: String, shapeindex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let shapeindexPreEscape = "\(shapeindex)"
        let shapeindexPostEscape = shapeindexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shapeindex}", with: shapeindexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     delete all shapes in worksheet
     
     - parameter name: (path) document name. 
     - parameter sheetName: (path) worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsShapesDeleteWorksheetShapes(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsShapesDeleteWorksheetShapesWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     delete all shapes in worksheet
     - DELETE /cells/{name}/worksheets/{sheetName}/shapes
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) document name. 
     - parameter sheetName: (path) worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsShapesDeleteWorksheetShapesWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/shapes"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get worksheet shape
     
     - parameter name: (path) document name. 
     - parameter sheetName: (path) worksheet name. 
     - parameter shapeindex: (path) shape index in worksheet shapes. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsShapesGetWorksheetShape(name: String, sheetName: String, shapeindex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ShapeResponse?,_ error: Error?) -> Void)) {
        cellsShapesGetWorksheetShapeWithRequestBuilder(name: name, sheetName: sheetName, shapeindex: shapeindex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get worksheet shape
     - GET /cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) document name. 
     - parameter sheetName: (path) worksheet name. 
     - parameter shapeindex: (path) shape index in worksheet shapes. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ShapeResponse> 
     */
    open class func cellsShapesGetWorksheetShapeWithRequestBuilder(name: String, sheetName: String, shapeindex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ShapeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let shapeindexPreEscape = "\(shapeindex)"
        let shapeindexPostEscape = shapeindexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shapeindex}", with: shapeindexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ShapeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get worksheet shapes 
     
     - parameter name: (path) document name. 
     - parameter sheetName: (path) worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsShapesGetWorksheetShapes(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ShapesResponse?,_ error: Error?) -> Void)) {
        cellsShapesGetWorksheetShapesWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get worksheet shapes 
     - GET /cells/{name}/worksheets/{sheetName}/shapes
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) document name. 
     - parameter sheetName: (path) worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ShapesResponse> 
     */
    open class func cellsShapesGetWorksheetShapesWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ShapesResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/shapes"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ShapesResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a shape in worksheet
     
     - parameter name: (path) document name. 
     - parameter sheetName: (path) worksheet name. 
     - parameter shapeindex: (path) shape index in worksheet shapes. 
     - parameter dto: (body)  (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsShapesPostWorksheetShape(name: String, sheetName: String, shapeindex: Int32, dto: Shape? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsShapesPostWorksheetShapeWithRequestBuilder(name: name, sheetName: sheetName, shapeindex: shapeindex, dto: dto, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a shape in worksheet
     - POST /cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) document name. 
     - parameter sheetName: (path) worksheet name. 
     - parameter shapeindex: (path) shape index in worksheet shapes. 
     - parameter dto: (body)  (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsShapesPostWorksheetShapeWithRequestBuilder(name: String, sheetName: String, shapeindex: Int32, dto: Shape? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let shapeindexPreEscape = "\(shapeindex)"
        let shapeindexPostEscape = shapeindexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shapeindex}", with: shapeindexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dto)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add shape in worksheet
     
     - parameter name: (path) document name. 
     - parameter sheetName: (path) worksheet name. 
     - parameter drawingType: (query) shape object type 
     - parameter upperLeftRow: (query) Upper left row index. 
     - parameter upperLeftColumn: (query) Upper left column index. 
     - parameter top: (query) Represents the vertical offset of Spinner from its left row, in unit of pixel. 
     - parameter _left: (query) Represents the horizontal offset of Spinner from its left column, in unit of pixel. 
     - parameter width: (query) Represents the height of Spinner, in unit of pixel. 
     - parameter height: (query) Represents the width of Spinner, in unit of pixel. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsShapesPutWorksheetShape(name: String, sheetName: String, drawingType: String, upperLeftRow: Int32, upperLeftColumn: Int32, top: Int32, _left: Int32, width: Int32, height: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ShapeResponse?,_ error: Error?) -> Void)) {
        cellsShapesPutWorksheetShapeWithRequestBuilder(name: name, sheetName: sheetName, drawingType: drawingType, upperLeftRow: upperLeftRow, upperLeftColumn: upperLeftColumn, top: top, _left: _left, width: width, height: height, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add shape in worksheet
     - PUT /cells/{name}/worksheets/{sheetName}/shapes
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) document name. 
     - parameter sheetName: (path) worksheet name. 
     - parameter drawingType: (query) shape object type 
     - parameter upperLeftRow: (query) Upper left row index. 
     - parameter upperLeftColumn: (query) Upper left column index. 
     - parameter top: (query) Represents the vertical offset of Spinner from its left row, in unit of pixel. 
     - parameter _left: (query) Represents the horizontal offset of Spinner from its left column, in unit of pixel. 
     - parameter width: (query) Represents the height of Spinner, in unit of pixel. 
     - parameter height: (query) Represents the width of Spinner, in unit of pixel. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ShapeResponse> 
     */
    open class func cellsShapesPutWorksheetShapeWithRequestBuilder(name: String, sheetName: String, drawingType: String, upperLeftRow: Int32, upperLeftColumn: Int32, top: Int32, _left: Int32, width: Int32, height: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ShapeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/shapes"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "DrawingType": drawingType, 
            "upperLeftRow": upperLeftRow.encodeToJSON(), 
            "upperLeftColumn": upperLeftColumn.encodeToJSON(), 
            "top": top.encodeToJSON(), 
            "left": _left.encodeToJSON(), 
            "width": width.encodeToJSON(), 
            "height": height.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ShapeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
