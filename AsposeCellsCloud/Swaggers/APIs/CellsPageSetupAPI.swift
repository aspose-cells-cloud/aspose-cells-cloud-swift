//
// CellsPageSetupAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsPageSetupAPI {
    /**
     clear header footer
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPageSetupDeleteHeaderFooter(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPageSetupDeleteHeaderFooterWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     clear header footer
     - DELETE /cells/{name}/worksheets/{sheetName}/pagesetup/clearheaderfooter
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPageSetupDeleteHeaderFooterWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pagesetup/clearheaderfooter"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     get page footer information
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPageSetupGetFooter(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: PageSectionsResponse?,_ error: Error?) -> Void)) {
        cellsPageSetupGetFooterWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     get page footer information
     - GET /cells/{name}/worksheets/{sheetName}/pagesetup/footer
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<PageSectionsResponse> 
     */
    open class func cellsPageSetupGetFooterWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<PageSectionsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pagesetup/footer"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<PageSectionsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     get page header information
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPageSetupGetHeader(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: PageSectionsResponse?,_ error: Error?) -> Void)) {
        cellsPageSetupGetHeaderWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     get page header information
     - GET /cells/{name}/worksheets/{sheetName}/pagesetup/header
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<PageSectionsResponse> 
     */
    open class func cellsPageSetupGetHeaderWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<PageSectionsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pagesetup/header"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<PageSectionsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Page Setup information.             
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPageSetupGetPageSetup(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: PageSetupResponse?,_ error: Error?) -> Void)) {
        cellsPageSetupGetPageSetupWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Page Setup information.             
     - GET /cells/{name}/worksheets/{sheetName}/pagesetup
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<PageSetupResponse> 
     */
    open class func cellsPageSetupGetPageSetupWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<PageSetupResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pagesetup"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<PageSetupResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     update  page footer information 
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter section: (query)  
     - parameter script: (query)  
     - parameter isFirstPage: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPageSetupPostFooter(name: String, sheetName: String, section: Int32, script: String, isFirstPage: Bool, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPageSetupPostFooterWithRequestBuilder(name: name, sheetName: sheetName, section: section, script: script, isFirstPage: isFirstPage, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     update  page footer information 
     - POST /cells/{name}/worksheets/{sheetName}/pagesetup/footer
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter section: (query)  
     - parameter script: (query)  
     - parameter isFirstPage: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPageSetupPostFooterWithRequestBuilder(name: String, sheetName: String, section: Int32, script: String, isFirstPage: Bool, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pagesetup/footer"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "section": section.encodeToJSON(), 
            "script": script, 
            "isFirstPage": isFirstPage, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     update  page header information 
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter section: (query)  
     - parameter script: (query)  
     - parameter isFirstPage: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPageSetupPostHeader(name: String, sheetName: String, section: Int32, script: String, isFirstPage: Bool, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPageSetupPostHeaderWithRequestBuilder(name: name, sheetName: sheetName, section: section, script: script, isFirstPage: isFirstPage, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     update  page header information 
     - POST /cells/{name}/worksheets/{sheetName}/pagesetup/header
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter section: (query)  
     - parameter script: (query)  
     - parameter isFirstPage: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPageSetupPostHeaderWithRequestBuilder(name: String, sheetName: String, section: Int32, script: String, isFirstPage: Bool, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pagesetup/header"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "section": section.encodeToJSON(), 
            "script": script, 
            "isFirstPage": isFirstPage, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Page Setup information.
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pageSetup: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPageSetupPostPageSetup(name: String, sheetName: String, pageSetup: PageSetup? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPageSetupPostPageSetupWithRequestBuilder(name: name, sheetName: sheetName, pageSetup: pageSetup, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Page Setup information.
     - POST /cells/{name}/worksheets/{sheetName}/pagesetup
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pageSetup: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPageSetupPostPageSetupWithRequestBuilder(name: String, sheetName: String, pageSetup: PageSetup? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pagesetup"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: pageSetup)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
