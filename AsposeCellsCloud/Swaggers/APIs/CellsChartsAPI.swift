//
// CellsChartsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsChartsAPI {
    /**
     Hide legend in chart
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartsDeleteWorksheetChartLegend(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsChartsDeleteWorksheetChartLegendWithRequestBuilder(name: name, sheetName: sheetName, chartIndex: chartIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Hide legend in chart
     - DELETE /cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsChartsDeleteWorksheetChartLegendWithRequestBuilder(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let chartIndexPreEscape = "\(chartIndex)"
        let chartIndexPostEscape = chartIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{chartIndex}", with: chartIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Hide title in chart
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartsDeleteWorksheetChartTitle(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsChartsDeleteWorksheetChartTitleWithRequestBuilder(name: name, sheetName: sheetName, chartIndex: chartIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Hide title in chart
     - DELETE /cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsChartsDeleteWorksheetChartTitleWithRequestBuilder(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let chartIndexPreEscape = "\(chartIndex)"
        let chartIndexPostEscape = chartIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{chartIndex}", with: chartIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Clear the charts.
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartsDeleteWorksheetClearCharts(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsChartsDeleteWorksheetClearChartsWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Clear the charts.
     - DELETE /cells/{name}/worksheets/{sheetName}/charts
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsChartsDeleteWorksheetClearChartsWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete worksheet chart by index.
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartsDeleteWorksheetDeleteChart(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ChartsResponse?,_ error: Error?) -> Void)) {
        cellsChartsDeleteWorksheetDeleteChartWithRequestBuilder(name: name, sheetName: sheetName, chartIndex: chartIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete worksheet chart by index.
     - DELETE /cells/{name}/worksheets/{sheetName}/charts/{chartIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ChartsResponse> 
     */
    open class func cellsChartsDeleteWorksheetDeleteChartWithRequestBuilder(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ChartsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let chartIndexPreEscape = "\(chartIndex)"
        let chartIndexPostEscape = chartIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{chartIndex}", with: chartIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ChartsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get chart info.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartNumber: (path) The chart number. 
     - parameter format: (query) The exported file format. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartsGetWorksheetChart(name: String, sheetName: String, chartNumber: Int32, format: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: NSURL?,_ error: Error?) -> Void)) {
        cellsChartsGetWorksheetChartWithRequestBuilder(name: name, sheetName: sheetName, chartNumber: chartNumber, format: format, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get chart info.
     - GET /cells/{name}/worksheets/{sheetName}/charts/{chartNumber}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartNumber: (path) The chart number. 
     - parameter format: (query) The exported file format. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<NSURL> 
     */
    open class func cellsChartsGetWorksheetChartWithRequestBuilder(name: String, sheetName: String, chartNumber: Int32, format: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<NSURL> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts/{chartNumber}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let chartNumberPreEscape = "\(chartNumber)"
        let chartNumberPostEscape = chartNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{chartNumber}", with: chartNumberPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<NSURL>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get chart legend
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartsGetWorksheetChartLegend(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: LegendResponse?,_ error: Error?) -> Void)) {
        cellsChartsGetWorksheetChartLegendWithRequestBuilder(name: name, sheetName: sheetName, chartIndex: chartIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get chart legend
     - GET /cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<LegendResponse> 
     */
    open class func cellsChartsGetWorksheetChartLegendWithRequestBuilder(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<LegendResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let chartIndexPreEscape = "\(chartIndex)"
        let chartIndexPostEscape = chartIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{chartIndex}", with: chartIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<LegendResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get chart title
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartsGetWorksheetChartTitle(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: TitleResponse?,_ error: Error?) -> Void)) {
        cellsChartsGetWorksheetChartTitleWithRequestBuilder(name: name, sheetName: sheetName, chartIndex: chartIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get chart title
     - GET /cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<TitleResponse> 
     */
    open class func cellsChartsGetWorksheetChartTitleWithRequestBuilder(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<TitleResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let chartIndexPreEscape = "\(chartIndex)"
        let chartIndexPostEscape = chartIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{chartIndex}", with: chartIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<TitleResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get worksheet charts info.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartsGetWorksheetCharts(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ChartsResponse?,_ error: Error?) -> Void)) {
        cellsChartsGetWorksheetChartsWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get worksheet charts info.
     - GET /cells/{name}/worksheets/{sheetName}/charts
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ChartsResponse> 
     */
    open class func cellsChartsGetWorksheetChartsWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ChartsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ChartsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update chart propreties
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter chartIndex: (path)  
     - parameter chart: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartsPostWorksheetChart(name: String, sheetName: String, chartIndex: Int32, chart: Chart? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsChartsPostWorksheetChartWithRequestBuilder(name: name, sheetName: sheetName, chartIndex: chartIndex, chart: chart, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update chart propreties
     - POST /cells/{name}/worksheets/{sheetName}/charts/{chartIndex}
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter chartIndex: (path)  
     - parameter chart: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsChartsPostWorksheetChartWithRequestBuilder(name: String, sheetName: String, chartIndex: Int32, chart: Chart? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let chartIndexPreEscape = "\(chartIndex)"
        let chartIndexPostEscape = chartIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{chartIndex}", with: chartIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: chart)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update chart legend
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter legend: (body)  (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartsPostWorksheetChartLegend(name: String, sheetName: String, chartIndex: Int32, legend: Legend? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: LegendResponse?,_ error: Error?) -> Void)) {
        cellsChartsPostWorksheetChartLegendWithRequestBuilder(name: name, sheetName: sheetName, chartIndex: chartIndex, legend: legend, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update chart legend
     - POST /cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter legend: (body)  (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<LegendResponse> 
     */
    open class func cellsChartsPostWorksheetChartLegendWithRequestBuilder(name: String, sheetName: String, chartIndex: Int32, legend: Legend? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<LegendResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let chartIndexPreEscape = "\(chartIndex)"
        let chartIndexPostEscape = chartIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{chartIndex}", with: chartIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: legend)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<LegendResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update chart title
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter title: (body) Chart title (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartsPostWorksheetChartTitle(name: String, sheetName: String, chartIndex: Int32, title: Title? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: TitleResponse?,_ error: Error?) -> Void)) {
        cellsChartsPostWorksheetChartTitleWithRequestBuilder(name: name, sheetName: sheetName, chartIndex: chartIndex, title: title, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update chart title
     - POST /cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter title: (body) Chart title (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<TitleResponse> 
     */
    open class func cellsChartsPostWorksheetChartTitleWithRequestBuilder(name: String, sheetName: String, chartIndex: Int32, title: Title? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<TitleResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let chartIndexPreEscape = "\(chartIndex)"
        let chartIndexPostEscape = chartIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{chartIndex}", with: chartIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: title)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<TitleResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add new chart to worksheet.
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter chartType: (query) Chart type, please refer property Type in chart resource. 
     - parameter upperLeftRow: (query) New chart upper left row. (optional, default to 0)
     - parameter upperLeftColumn: (query) New chart upperleft column. (optional, default to 0)
     - parameter lowerRightRow: (query) New chart lower right row. (optional, default to 0)
     - parameter lowerRightColumn: (query) New chart lower right column. (optional, default to 0)
     - parameter area: (query) Specifies values from which to plot the data series.  (optional)
     - parameter isVertical: (query) Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)
     - parameter categoryData: (query) Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)
     - parameter isAutoGetSerialName: (query) Specifies whether auto update serial name.  (optional, default to true)
     - parameter title: (query) Specifies chart title name. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartsPutWorksheetAddChart(name: String, sheetName: String, chartType: String, upperLeftRow: Int32? = nil, upperLeftColumn: Int32? = nil, lowerRightRow: Int32? = nil, lowerRightColumn: Int32? = nil, area: String? = nil, isVertical: Bool? = nil, categoryData: String? = nil, isAutoGetSerialName: Bool? = nil, title: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ChartsResponse?,_ error: Error?) -> Void)) {
        cellsChartsPutWorksheetAddChartWithRequestBuilder(name: name, sheetName: sheetName, chartType: chartType, upperLeftRow: upperLeftRow, upperLeftColumn: upperLeftColumn, lowerRightRow: lowerRightRow, lowerRightColumn: lowerRightColumn, area: area, isVertical: isVertical, categoryData: categoryData, isAutoGetSerialName: isAutoGetSerialName, title: title, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add new chart to worksheet.
     - PUT /cells/{name}/worksheets/{sheetName}/charts
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter chartType: (query) Chart type, please refer property Type in chart resource. 
     - parameter upperLeftRow: (query) New chart upper left row. (optional, default to 0)
     - parameter upperLeftColumn: (query) New chart upperleft column. (optional, default to 0)
     - parameter lowerRightRow: (query) New chart lower right row. (optional, default to 0)
     - parameter lowerRightColumn: (query) New chart lower right column. (optional, default to 0)
     - parameter area: (query) Specifies values from which to plot the data series.  (optional)
     - parameter isVertical: (query) Specifies whether to plot the series from a range of cell values by row or by column.  (optional, default to true)
     - parameter categoryData: (query) Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).  (optional)
     - parameter isAutoGetSerialName: (query) Specifies whether auto update serial name.  (optional, default to true)
     - parameter title: (query) Specifies chart title name. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ChartsResponse> 
     */
    open class func cellsChartsPutWorksheetAddChartWithRequestBuilder(name: String, sheetName: String, chartType: String, upperLeftRow: Int32? = nil, upperLeftColumn: Int32? = nil, lowerRightRow: Int32? = nil, lowerRightColumn: Int32? = nil, area: String? = nil, isVertical: Bool? = nil, categoryData: String? = nil, isAutoGetSerialName: Bool? = nil, title: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ChartsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "chartType": chartType, 
            "upperLeftRow": upperLeftRow?.encodeToJSON(), 
            "upperLeftColumn": upperLeftColumn?.encodeToJSON(), 
            "lowerRightRow": lowerRightRow?.encodeToJSON(), 
            "lowerRightColumn": lowerRightColumn?.encodeToJSON(), 
            "area": area, 
            "isVertical": isVertical, 
            "categoryData": categoryData, 
            "isAutoGetSerialName": isAutoGetSerialName, 
            "title": title, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ChartsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Show legend in chart
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartsPutWorksheetChartLegend(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsChartsPutWorksheetChartLegendWithRequestBuilder(name: name, sheetName: sheetName, chartIndex: chartIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Show legend in chart
     - PUT /cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsChartsPutWorksheetChartLegendWithRequestBuilder(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/legend"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let chartIndexPreEscape = "\(chartIndex)"
        let chartIndexPostEscape = chartIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{chartIndex}", with: chartIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add chart title / Set chart title visible
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter title: (body) Chart title. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartsPutWorksheetChartTitle(name: String, sheetName: String, chartIndex: Int32, title: Title? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: TitleResponse?,_ error: Error?) -> Void)) {
        cellsChartsPutWorksheetChartTitleWithRequestBuilder(name: name, sheetName: sheetName, chartIndex: chartIndex, title: title, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add chart title / Set chart title visible
     - PUT /cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter title: (body) Chart title. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<TitleResponse> 
     */
    open class func cellsChartsPutWorksheetChartTitleWithRequestBuilder(name: String, sheetName: String, chartIndex: Int32, title: Title? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<TitleResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/title"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let chartIndexPreEscape = "\(chartIndex)"
        let chartIndexPostEscape = chartIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{chartIndex}", with: chartIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: title)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<TitleResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
