//
// LiteCellsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class LiteCellsAPI {
    /**

     - parameter file: (form) File to upload 
     - parameter type: (query)  (optional, default to all)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMetadata(files: Dictionary<String, URL>, type: String? = nil, completion: @escaping ((_ data: FilesResult?,_ error: Error?) -> Void)) {
        deleteMetadataWithRequestBuilder(files: files, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/metadata/delete
     - examples: [{contentType=application/json, example={
  "Files" : [ {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  }, {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  } ]
}}]
     
     - parameter file: (form) File to upload 
     - parameter type: (query)  (optional, default to all)

     - returns: RequestBuilder<FilesResult> 
     */
    open class func deleteMetadataWithRequestBuilder(files: Dictionary<String, URL>, type: String? = nil) -> RequestBuilder<FilesResult> {
        let _path = "/cells/metadata/delete"
        let URLString = AsposeCellsCloudAPI.basePath + _path
        var formParams = [String:Any?]()
        for (key, value) in files
        {
            formParams[key] = value
        }

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type
        ])

        let requestBuilder: RequestBuilder<FilesResult>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter file: (form) File to upload 
     - parameter type: (query)  (optional, default to all)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMetadata(files: Dictionary<String, URL>, type: String? = nil, completion: @escaping ((_ data: [CellsDocumentProperty]?,_ error: Error?) -> Void)) {
        getMetadataWithRequestBuilder(files: files, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/metadata/get
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     
     - parameter file: (form) File to upload 
     - parameter type: (query)  (optional, default to all)

     - returns: RequestBuilder<[CellsDocumentProperty]> 
     */
    open class func getMetadataWithRequestBuilder(files: Dictionary<String, URL>, type: String? = nil) -> RequestBuilder<[CellsDocumentProperty]> {
        let _path = "/cells/metadata/get"
        let URLString = AsposeCellsCloudAPI.basePath + _path
        var formParams = [String:Any?]()
        for (key, value) in files
        {
            formParams[key] = value
        }

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type
        ])

        let requestBuilder: RequestBuilder<[CellsDocumentProperty]>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter file: (form) File to upload 
     - parameter datasource: (query)  
     - parameter format: (query)  (optional, default to Xlsx)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAssemble(files: Dictionary<String, URL>, datasource: String, format: String? = nil, completion: @escaping ((_ data: FilesResult?,_ error: Error?) -> Void)) {
        postAssembleWithRequestBuilder(files: files, datasource: datasource, format: format).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/assemble
     - examples: [{contentType=application/json, example={
  "Files" : [ {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  }, {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  } ]
}}]
     
     - parameter file: (form) File to upload 
     - parameter datasource: (query)  
     - parameter format: (query)  (optional, default to Xlsx)

     - returns: RequestBuilder<FilesResult> 
     */
    open class func postAssembleWithRequestBuilder(files: Dictionary<String, URL>, datasource: String, format: String? = nil) -> RequestBuilder<FilesResult> {
        let _path = "/cells/assemble"
        let URLString = AsposeCellsCloudAPI.basePath + _path
        var formParams = [String:Any?]()
        for (key, value) in files
        {
            formParams[key] = value
        }

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "datasource": datasource, 
            "format": format
        ])

        let requestBuilder: RequestBuilder<FilesResult>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter file: (form) File to upload 
     - parameter objecttype: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postClearObjects(files: Dictionary<String, URL>, objecttype: String, completion: @escaping ((_ data: FilesResult?,_ error: Error?) -> Void)) {
        postClearObjectsWithRequestBuilder(files: files, objecttype: objecttype).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/clearobjects
     - examples: [{contentType=application/json, example={
  "Files" : [ {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  }, {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  } ]
}}]
     
     - parameter file: (form) File to upload 
     - parameter objecttype: (query)  

     - returns: RequestBuilder<FilesResult> 
     */
    open class func postClearObjectsWithRequestBuilder(files: Dictionary<String, URL>, objecttype: String) -> RequestBuilder<FilesResult> {
        let _path = "/cells/clearobjects"
        let URLString = AsposeCellsCloudAPI.basePath + _path
        var formParams = [String:Any?]()
        for (key, value) in files
        {
            formParams[key] = value
        }

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "objecttype": objecttype
        ])

        let requestBuilder: RequestBuilder<FilesResult>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter file: (form) File to upload 
     - parameter objectType: (query)  
     - parameter format: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExport(files: Dictionary<String, URL>, objectType: String, format: String, completion: @escaping ((_ data: FilesResult?,_ error: Error?) -> Void)) {
        postExportWithRequestBuilder(files: files, objectType: objectType, format: format).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/export
     - examples: [{contentType=application/json, example={
  "Files" : [ {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  }, {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  } ]
}}]
     
     - parameter file: (form) File to upload 
     - parameter objectType: (query)  
     - parameter format: (query)  

     - returns: RequestBuilder<FilesResult> 
     */
    open class func postExportWithRequestBuilder(files: Dictionary<String, URL>, objectType: String, format: String) -> RequestBuilder<FilesResult> {
        let _path = "/cells/export"
        let URLString = AsposeCellsCloudAPI.basePath + _path
        var formParams = [String:Any?]()
        for (key, value) in files
        {
            formParams[key] = value
        }

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "objectType": objectType, 
            "format": format
        ])

        let requestBuilder: RequestBuilder<FilesResult>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter file: (form) File to upload 
     - parameter format: (query)  (optional, default to xlsx)
     - parameter mergeToOneSheet: (query)  (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postMerge(files: Dictionary<String, URL>, format: String? = nil, mergeToOneSheet: Bool? = nil, completion: @escaping ((_ data: FileInfo?,_ error: Error?) -> Void)) {
        postMergeWithRequestBuilder(files: files, format: format, mergeToOneSheet: mergeToOneSheet).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/merge
     - examples: [{contentType=application/json, example={
  "FileContent" : "FileContent",
  "Filename" : "Filename",
  "FileSize" : 0
}}]
     
     - parameter file: (form) File to upload 
     - parameter format: (query)  (optional, default to xlsx)
     - parameter mergeToOneSheet: (query)  (optional, default to false)

     - returns: RequestBuilder<FileInfo> 
     */
    open class func postMergeWithRequestBuilder(files: Dictionary<String, URL>, format: String? = nil, mergeToOneSheet: Bool? = nil) -> RequestBuilder<FileInfo> {
        let _path = "/cells/merge"
        let URLString = AsposeCellsCloudAPI.basePath + _path
        var formParams = [String:Any?]()
        for (key, value) in files
        {
            formParams[key] = value
        }

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        /*
        var queryParams = [String:Any?]()
        queryParams["format"] = format
        if (mergeToOneSheet != nil) {
            queryParams["mergeToOneSheet"] = mergeToOneSheet
        }

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(queryParams)
        */

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "mergeToOneSheet": mergeToOneSheet,
            "format": format
            ])
        //
        let requestBuilder: RequestBuilder<FileInfo>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter file: (form) File to upload 
     - parameter documentProperties: (body) Cells document property. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postMetadata(files: Dictionary<String, URL>, documentProperties: [CellsDocumentProperty], completion: @escaping ((_ data: FilesResult?,_ error: Error?) -> Void)) {
        postMetadataWithRequestBuilder(files: files, documentProperties: documentProperties).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/metadata/update
     - examples: [{output=none}]
     
     - parameter file: (form) File to upload 
     - parameter documentProperties: (body) Cells document property. 

     - returns: RequestBuilder<FilesResult> 
     */
    open class func postMetadataWithRequestBuilder(files: Dictionary<String, URL>, documentProperties: [CellsDocumentProperty]) -> RequestBuilder<FilesResult> {
        let _path = "/cells/metadata/update"
        let URLString = AsposeCellsCloudAPI.basePath + _path
        var formParams = [String:Any?]()
        for (key, value) in files
        {
            formParams[key] = value
        }
        //Set info as file URL
        let infoStr = String(data: CodableHelper.encode(documentProperties, prettyPrint: true).data!, encoding: String.Encoding.utf8)
        let path1 = "\(NSTemporaryDirectory())DocumentProperties.json"
        let url1 = URL(fileURLWithPath: path1)
        do{
            try infoStr?.write(to: url1, atomically: true, encoding: String.Encoding.utf8)
        }catch{
        }
        formParams["DocumentProperties.json"] = url1
        
        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FilesResult>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter file: (form) File to upload 
     - parameter password: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postProtect(files: Dictionary<String, URL>, password: String, completion: @escaping ((_ data: FilesResult?,_ error: Error?) -> Void)) {
        postProtectWithRequestBuilder(files: files, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/protect
     - examples: [{contentType=application/json, example={
  "Files" : [ {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  }, {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  } ]
}}]
     
     - parameter file: (form) File to upload 
     - parameter password: (query)  

     - returns: RequestBuilder<FilesResult> 
     */
    open class func postProtectWithRequestBuilder(files: Dictionary<String, URL>, password: String) -> RequestBuilder<FilesResult> {
        let _path = "/cells/protect"
        let URLString = AsposeCellsCloudAPI.basePath + _path
        var formParams = [String:Any?]()
        for (key, value) in files
        {
            formParams[key] = value
        }

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "password": password
        ])

        let requestBuilder: RequestBuilder<FilesResult>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter file: (form) File to upload 
     - parameter text: (query)  
     - parameter password: (query)  (optional)
     - parameter sheetname: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSearch(files: Dictionary<String, URL>, text: String, password: String? = nil, sheetname: String? = nil, completion: @escaping ((_ data: [TextItem]?,_ error: Error?) -> Void)) {
        postSearchWithRequestBuilder(files: files, text: text, password: password, sheetname: sheetname).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/search
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     
     - parameter file: (form) File to upload 
     - parameter text: (query)  
     - parameter password: (query)  (optional)
     - parameter sheetname: (query)  (optional)

     - returns: RequestBuilder<[TextItem]> 
     */
    open class func postSearchWithRequestBuilder(files: Dictionary<String, URL>, text: String, password: String? = nil, sheetname: String? = nil) -> RequestBuilder<[TextItem]> {
        let _path = "/cells/search"
        let URLString = AsposeCellsCloudAPI.basePath + _path
        var formParams = [String:Any?]()
        for (key, value) in files
        {
            formParams[key] = value
        }

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "text": text, 
            "password": password, 
            "sheetname": sheetname
        ])

        let requestBuilder: RequestBuilder<[TextItem]>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter file: (form) File to upload 
     - parameter format: (query)  
     - parameter password: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSplit(files: Dictionary<String, URL>, format: String, password: String? = nil, from: Int32? = nil, to: Int32? = nil, completion: @escaping ((_ data: FilesResult?,_ error: Error?) -> Void)) {
        postSplitWithRequestBuilder(files: files, format: format, password: password, from: from, to: to).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/split
     - examples: [{contentType=application/json, example={
  "Files" : [ {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  }, {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  } ]
}}]
     
     - parameter file: (form) File to upload 
     - parameter format: (query)  
     - parameter password: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)

     - returns: RequestBuilder<FilesResult> 
     */
    open class func postSplitWithRequestBuilder(files: Dictionary<String, URL>, format: String, password: String? = nil, from: Int32? = nil, to: Int32? = nil) -> RequestBuilder<FilesResult> {
        let _path = "/cells/split"
        let URLString = AsposeCellsCloudAPI.basePath + _path
        var formParams = [String:Any?]()
        for (key, value) in files
        {
            formParams[key] = value
        }

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format, 
            "password": password, 
            "from": from?.encodeToJSON(), 
            "to": to?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<FilesResult>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter file: (form) File to upload 
     - parameter password: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUnlock(files: Dictionary<String, URL>, password: String, completion: @escaping ((_ data: FilesResult?,_ error: Error?) -> Void)) {
        postUnlockWithRequestBuilder(files: files, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/unlock
     - examples: [{contentType=application/json, example={
  "Files" : [ {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  }, {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  } ]
}}]
     
     - parameter file: (form) File to upload 
     - parameter password: (query)  

     - returns: RequestBuilder<FilesResult> 
     */
    open class func postUnlockWithRequestBuilder(files: Dictionary<String, URL>, password: String) -> RequestBuilder<FilesResult> {
        let _path = "/cells/unlock"
        let URLString = AsposeCellsCloudAPI.basePath + _path
        var formParams = [String:Any?]()
        for (key, value) in files
        {
            formParams[key] = value
        }

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "password": password
        ])

        let requestBuilder: RequestBuilder<FilesResult>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter file: (form) File to upload 
     - parameter text: (query)  
     - parameter color: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWatermark(files: Dictionary<String, URL>, text: String, color: String, completion: @escaping ((_ data: FilesResult?,_ error: Error?) -> Void)) {
        postWatermarkWithRequestBuilder(files: files, text: text, color: color).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/watermark
     - examples: [{contentType=application/json, example={
  "Files" : [ {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  }, {
    "FileContent" : "FileContent",
    "Filename" : "Filename",
    "FileSize" : 0
  } ]
}}]
     
     - parameter file: (form) File to upload 
     - parameter text: (query)  
     - parameter color: (query)  

     - returns: RequestBuilder<FilesResult> 
     */
    open class func postWatermarkWithRequestBuilder(files: Dictionary<String, URL>, text: String, color: String) -> RequestBuilder<FilesResult> {
        let _path = "/cells/watermark"
        let URLString = AsposeCellsCloudAPI.basePath + _path
        var formParams = [String:Any?]()
        for (key, value) in files
        {
            formParams[key] = value
        }

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "text": text, 
            "color": color
        ])

        let requestBuilder: RequestBuilder<FilesResult>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
