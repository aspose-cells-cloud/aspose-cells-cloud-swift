//
// CellsRangesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsRangesAPI {
    /**
     Get cells list in a range by range name or row column indexes  
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter namerange: (query) range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     - parameter firstRow: (query) the first row of the range (optional)
     - parameter firstColumn: (query) the first column of the range (optional)
     - parameter rowCount: (query) the count of rows in the range (optional)
     - parameter columnCount: (query) the count of columns in the range (optional)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsRangesGetWorksheetCellsRangeValue(name: String, sheetName: String, namerange: String? = nil, firstRow: Int32? = nil, firstColumn: Int32? = nil, rowCount: Int32? = nil, columnCount: Int32? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: RangeValueResponse?,_ error: Error?) -> Void)) {
        cellsRangesGetWorksheetCellsRangeValueWithRequestBuilder(name: name, sheetName: sheetName, namerange: namerange, firstRow: firstRow, firstColumn: firstColumn, rowCount: rowCount, columnCount: columnCount, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get cells list in a range by range name or row column indexes  
     - GET /cells/{name}/worksheets/{sheetName}/ranges/value
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter namerange: (query) range name, for example: &#39;A1:B2&#39; or &#39;range_name1&#39; (optional)
     - parameter firstRow: (query) the first row of the range (optional)
     - parameter firstColumn: (query) the first column of the range (optional)
     - parameter rowCount: (query) the count of rows in the range (optional)
     - parameter columnCount: (query) the count of columns in the range (optional)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<RangeValueResponse> 
     */
    open class func cellsRangesGetWorksheetCellsRangeValueWithRequestBuilder(name: String, sheetName: String, namerange: String? = nil, firstRow: Int32? = nil, firstColumn: Int32? = nil, rowCount: Int32? = nil, columnCount: Int32? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<RangeValueResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/ranges/value"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "namerange": namerange, 
            "firstRow": firstRow?.encodeToJSON(), 
            "firstColumn": firstColumn?.encodeToJSON(), 
            "rowCount": rowCount?.encodeToJSON(), 
            "columnCount": columnCount?.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<RangeValueResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set column width of range
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter value: (query)  
     - parameter range: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsRangesPostWorksheetCellsRangeColumnWidth(name: String, sheetName: String, value: Double, range: Range? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsRangesPostWorksheetCellsRangeColumnWidthWithRequestBuilder(name: name, sheetName: sheetName, value: value, range: range, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set column width of range
     - POST /cells/{name}/worksheets/{sheetName}/ranges/columnWidth
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter value: (query)  
     - parameter range: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsRangesPostWorksheetCellsRangeColumnWidthWithRequestBuilder(name: String, sheetName: String, value: Double, range: Range? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/ranges/columnWidth"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: range)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "value": value, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Combines a range of cells into a single cell.              
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter range: (body) range in worksheet  (optional)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsRangesPostWorksheetCellsRangeMerge(name: String, sheetName: String, range: Range? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsRangesPostWorksheetCellsRangeMergeWithRequestBuilder(name: name, sheetName: sheetName, range: range, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Combines a range of cells into a single cell.              
     - POST /cells/{name}/worksheets/{sheetName}/ranges/merge
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter range: (body) range in worksheet  (optional)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsRangesPostWorksheetCellsRangeMergeWithRequestBuilder(name: String, sheetName: String, range: Range? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/ranges/merge"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: range)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Move the current range to the dest range.             
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter destRow: (query) The start row of the dest range. 
     - parameter destColumn: (query) The start column of the dest range. 
     - parameter range: (body) range in worksheet  (optional)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsRangesPostWorksheetCellsRangeMoveTo(name: String, sheetName: String, destRow: Int32, destColumn: Int32, range: Range? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsRangesPostWorksheetCellsRangeMoveToWithRequestBuilder(name: name, sheetName: sheetName, destRow: destRow, destColumn: destColumn, range: range, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Move the current range to the dest range.             
     - POST /cells/{name}/worksheets/{sheetName}/ranges/moveto
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter destRow: (query) The start row of the dest range. 
     - parameter destColumn: (query) The start column of the dest range. 
     - parameter range: (body) range in worksheet  (optional)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsRangesPostWorksheetCellsRangeMoveToWithRequestBuilder(name: String, sheetName: String, destRow: Int32, destColumn: Int32, range: Range? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/ranges/moveto"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: range)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "destRow": destRow.encodeToJSON(), 
            "destColumn": destColumn.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Sets outline border around a range of cells.
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter rangeOperate: (body) Range Set OutlineBorder Request  (optional)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsRangesPostWorksheetCellsRangeOutlineBorder(name: String, sheetName: String, rangeOperate: RangeSetOutlineBorderRequest? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsRangesPostWorksheetCellsRangeOutlineBorderWithRequestBuilder(name: name, sheetName: sheetName, rangeOperate: rangeOperate, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Sets outline border around a range of cells.
     - POST /cells/{name}/worksheets/{sheetName}/ranges/outlineBorder
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter rangeOperate: (body) Range Set OutlineBorder Request  (optional)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsRangesPostWorksheetCellsRangeOutlineBorderWithRequestBuilder(name: String, sheetName: String, rangeOperate: RangeSetOutlineBorderRequest? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/ranges/outlineBorder"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rangeOperate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     set row height of range
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter value: (query)  
     - parameter range: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsRangesPostWorksheetCellsRangeRowHeight(name: String, sheetName: String, value: Double, range: Range? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsRangesPostWorksheetCellsRangeRowHeightWithRequestBuilder(name: name, sheetName: sheetName, value: value, range: range, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     set row height of range
     - POST /cells/{name}/worksheets/{sheetName}/ranges/rowHeight
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter value: (query)  
     - parameter range: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsRangesPostWorksheetCellsRangeRowHeightWithRequestBuilder(name: String, sheetName: String, value: Double, range: Range? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/ranges/rowHeight"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: range)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "value": value, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Sets the style of the range.             
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter rangeOperate: (body) Range Set Style Request  (optional)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsRangesPostWorksheetCellsRangeStyle(name: String, sheetName: String, rangeOperate: RangeSetStyleRequest? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsRangesPostWorksheetCellsRangeStyleWithRequestBuilder(name: name, sheetName: sheetName, rangeOperate: rangeOperate, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Sets the style of the range.             
     - POST /cells/{name}/worksheets/{sheetName}/ranges/style
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter rangeOperate: (body) Range Set Style Request  (optional)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsRangesPostWorksheetCellsRangeStyleWithRequestBuilder(name: String, sheetName: String, rangeOperate: RangeSetStyleRequest? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/ranges/style"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rangeOperate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Unmerges merged cells of this range.             
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter range: (body) range in worksheet  (optional)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsRangesPostWorksheetCellsRangeUnmerge(name: String, sheetName: String, range: Range? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsRangesPostWorksheetCellsRangeUnmergeWithRequestBuilder(name: name, sheetName: sheetName, range: range, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Unmerges merged cells of this range.             
     - POST /cells/{name}/worksheets/{sheetName}/ranges/unmerge
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter range: (body) range in worksheet  (optional)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsRangesPostWorksheetCellsRangeUnmergeWithRequestBuilder(name: String, sheetName: String, range: Range? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/ranges/unmerge"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: range)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Puts a value into the range, if appropriate the value will be converted to other data type and cell's number format will be reset.             
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter value: (query) Input value 
     - parameter range: (body) range in worksheet  (optional)
     - parameter isConverted: (query) True: converted to other data type if appropriate. (optional, default to false)
     - parameter setStyle: (query) True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsRangesPostWorksheetCellsRangeValue(name: String, sheetName: String, value: String, range: Range? = nil, isConverted: Bool? = nil, setStyle: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsRangesPostWorksheetCellsRangeValueWithRequestBuilder(name: name, sheetName: sheetName, value: value, range: range, isConverted: isConverted, setStyle: setStyle, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Puts a value into the range, if appropriate the value will be converted to other data type and cell's number format will be reset.             
     - POST /cells/{name}/worksheets/{sheetName}/ranges/value
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter value: (query) Input value 
     - parameter range: (body) range in worksheet  (optional)
     - parameter isConverted: (query) True: converted to other data type if appropriate. (optional, default to false)
     - parameter setStyle: (query) True: set the number format to cell&#39;s style when converting to other data type (optional, default to false)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsRangesPostWorksheetCellsRangeValueWithRequestBuilder(name: String, sheetName: String, value: String, range: Range? = nil, isConverted: Bool? = nil, setStyle: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/ranges/value"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: range)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "Value": value, 
            "isConverted": isConverted, 
            "setStyle": setStyle, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     copy range in the worksheet
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter rangeOperate: (body) copydata,copystyle,copyto,copyvalue (optional)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsRangesPostWorksheetCellsRanges(name: String, sheetName: String, rangeOperate: RangeCopyRequest? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsRangesPostWorksheetCellsRangesWithRequestBuilder(name: name, sheetName: sheetName, rangeOperate: rangeOperate, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     copy range in the worksheet
     - POST /cells/{name}/worksheets/{sheetName}/ranges
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) workbook name 
     - parameter sheetName: (path) worksheet name 
     - parameter rangeOperate: (body) copydata,copystyle,copyto,copyvalue (optional)
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsRangesPostWorksheetCellsRangesWithRequestBuilder(name: String, sheetName: String, rangeOperate: RangeCopyRequest? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/ranges"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rangeOperate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
