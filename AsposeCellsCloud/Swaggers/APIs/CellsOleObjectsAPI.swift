//
// CellsOleObjectsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsOleObjectsAPI {
    /**
     Delete OLE object.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worsheet name. 
     - parameter oleObjectIndex: (path) Ole object index 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsOleObjectsDeleteWorksheetOleObject(name: String, sheetName: String, oleObjectIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsOleObjectsDeleteWorksheetOleObjectWithRequestBuilder(name: name, sheetName: sheetName, oleObjectIndex: oleObjectIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete OLE object.
     - DELETE /cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worsheet name. 
     - parameter oleObjectIndex: (path) Ole object index 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsOleObjectsDeleteWorksheetOleObjectWithRequestBuilder(name: String, sheetName: String, oleObjectIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let oleObjectIndexPreEscape = "\(oleObjectIndex)"
        let oleObjectIndexPostEscape = oleObjectIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{oleObjectIndex}", with: oleObjectIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete all OLE objects.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worsheet name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsOleObjectsDeleteWorksheetOleObjects(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsOleObjectsDeleteWorksheetOleObjectsWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete all OLE objects.
     - DELETE /cells/{name}/worksheets/{sheetName}/oleobjects
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worsheet name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsOleObjectsDeleteWorksheetOleObjectsWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/oleobjects"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get OLE object info.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter objectNumber: (path) The object number. 
     - parameter format: (query) The exported object format. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsOleObjectsGetWorksheetOleObject(name: String, sheetName: String, objectNumber: Int32, format: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        cellsOleObjectsGetWorksheetOleObjectWithRequestBuilder(name: name, sheetName: sheetName, objectNumber: objectNumber, format: format, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get OLE object info.
     - GET /cells/{name}/worksheets/{sheetName}/oleobjects/{objectNumber}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter objectNumber: (path) The object number. 
     - parameter format: (query) The exported object format. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<NSURL> 
     */
    open class func cellsOleObjectsGetWorksheetOleObjectWithRequestBuilder(name: String, sheetName: String, objectNumber: Int32, format: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<Data> {
        var path = "/cells/{name}/worksheets/{sheetName}/oleobjects/{objectNumber}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let objectNumberPreEscape = "\(objectNumber)"
        let objectNumberPostEscape = objectNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{objectNumber}", with: objectNumberPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<Data>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get worksheet OLE objects info.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsOleObjectsGetWorksheetOleObjects(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: OleObjectsResponse?,_ error: Error?) -> Void)) {
        cellsOleObjectsGetWorksheetOleObjectsWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get worksheet OLE objects info.
     - GET /cells/{name}/worksheets/{sheetName}/oleobjects
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<OleObjectsResponse> 
     */
    open class func cellsOleObjectsGetWorksheetOleObjectsWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<OleObjectsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/oleobjects"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<OleObjectsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update OLE object.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worsheet name. 
     - parameter oleObjectIndex: (path) Ole object index 
     - parameter ole: (body) Ole Object (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsOleObjectsPostUpdateWorksheetOleObject(name: String, sheetName: String, oleObjectIndex: Int32, ole: OleObject? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsOleObjectsPostUpdateWorksheetOleObjectWithRequestBuilder(name: name, sheetName: sheetName, oleObjectIndex: oleObjectIndex, ole: ole, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update OLE object.
     - POST /cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worsheet name. 
     - parameter oleObjectIndex: (path) Ole object index 
     - parameter ole: (body) Ole Object (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsOleObjectsPostUpdateWorksheetOleObjectWithRequestBuilder(name: String, sheetName: String, oleObjectIndex: Int32, ole: OleObject? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/oleobjects/{oleObjectIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let oleObjectIndexPreEscape = "\(oleObjectIndex)"
        let oleObjectIndexPostEscape = oleObjectIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{oleObjectIndex}", with: oleObjectIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ole)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add OLE object
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worsheet name. 
     - parameter oleObject: (body) Ole Object (optional)
     - parameter upperLeftRow: (query) Upper left row index (optional, default to 0)
     - parameter upperLeftColumn: (query) Upper left column index (optional, default to 0)
     - parameter height: (query) Height of oleObject, in unit of pixel (optional, default to 0)
     - parameter width: (query) Width of oleObject, in unit of pixel (optional, default to 0)
     - parameter oleFile: (query) OLE filename (optional)
     - parameter imageFile: (query) Image filename (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsOleObjectsPutWorksheetOleObject(name: String, sheetName: String, oleObject: OleObject? = nil, upperLeftRow: Int32? = nil, upperLeftColumn: Int32? = nil, height: Int32? = nil, width: Int32? = nil, oleFile: String? = nil, imageFile: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: OleObjectResponse?,_ error: Error?) -> Void)) {
        cellsOleObjectsPutWorksheetOleObjectWithRequestBuilder(name: name, sheetName: sheetName, oleObject: oleObject, upperLeftRow: upperLeftRow, upperLeftColumn: upperLeftColumn, height: height, width: width, oleFile: oleFile, imageFile: imageFile, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add OLE object
     - PUT /cells/{name}/worksheets/{sheetName}/oleobjects
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worsheet name. 
     - parameter oleObject: (body) Ole Object (optional)
     - parameter upperLeftRow: (query) Upper left row index (optional, default to 0)
     - parameter upperLeftColumn: (query) Upper left column index (optional, default to 0)
     - parameter height: (query) Height of oleObject, in unit of pixel (optional, default to 0)
     - parameter width: (query) Width of oleObject, in unit of pixel (optional, default to 0)
     - parameter oleFile: (query) OLE filename (optional)
     - parameter imageFile: (query) Image filename (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<OleObjectResponse> 
     */
    open class func cellsOleObjectsPutWorksheetOleObjectWithRequestBuilder(name: String, sheetName: String, oleObject: OleObject? = nil, upperLeftRow: Int32? = nil, upperLeftColumn: Int32? = nil, height: Int32? = nil, width: Int32? = nil, oleFile: String? = nil, imageFile: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<OleObjectResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/oleobjects"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oleObject)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "upperLeftRow": upperLeftRow?.encodeToJSON(), 
            "upperLeftColumn": upperLeftColumn?.encodeToJSON(), 
            "height": height?.encodeToJSON(), 
            "width": width?.encodeToJSON(), 
            "oleFile": oleFile, 
            "imageFile": imageFile, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<OleObjectResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
