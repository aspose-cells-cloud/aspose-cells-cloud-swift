//
// CellsPropertiesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsPropertiesAPI {
    /**
     Delete all custom document properties and clean built-in ones.
     
     - parameter name: (path) The document name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPropertiesDeleteDocumentProperties(name: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: CellsDocumentPropertiesResponse?,_ error: Error?) -> Void)) {
        cellsPropertiesDeleteDocumentPropertiesWithRequestBuilder(name: name, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete all custom document properties and clean built-in ones.
     - DELETE /cells/{name}/documentproperties
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The document name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<CellsDocumentPropertiesResponse> 
     */
    open class func cellsPropertiesDeleteDocumentPropertiesWithRequestBuilder(name: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<CellsDocumentPropertiesResponse> {
        var path = "/cells/{name}/documentproperties"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<CellsDocumentPropertiesResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete document property.
     
     - parameter name: (path) The document name. 
     - parameter propertyName: (path) The property name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPropertiesDeleteDocumentProperty(name: String, propertyName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: CellsDocumentPropertiesResponse?,_ error: Error?) -> Void)) {
        cellsPropertiesDeleteDocumentPropertyWithRequestBuilder(name: name, propertyName: propertyName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete document property.
     - DELETE /cells/{name}/documentproperties/{propertyName}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The document name. 
     - parameter propertyName: (path) The property name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<CellsDocumentPropertiesResponse> 
     */
    open class func cellsPropertiesDeleteDocumentPropertyWithRequestBuilder(name: String, propertyName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<CellsDocumentPropertiesResponse> {
        var path = "/cells/{name}/documentproperties/{propertyName}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let propertyNamePreEscape = "\(propertyName)"
        let propertyNamePostEscape = propertyNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{propertyName}", with: propertyNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<CellsDocumentPropertiesResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read document properties.
     
     - parameter name: (path) The document name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPropertiesGetDocumentProperties(name: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: CellsDocumentPropertiesResponse?,_ error: Error?) -> Void)) {
        cellsPropertiesGetDocumentPropertiesWithRequestBuilder(name: name, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read document properties.
     - GET /cells/{name}/documentproperties
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The document name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<CellsDocumentPropertiesResponse> 
     */
    open class func cellsPropertiesGetDocumentPropertiesWithRequestBuilder(name: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<CellsDocumentPropertiesResponse> {
        var path = "/cells/{name}/documentproperties"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<CellsDocumentPropertiesResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read document property by name.
     
     - parameter name: (path) The document name. 
     - parameter propertyName: (path) The property name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPropertiesGetDocumentProperty(name: String, propertyName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: CellsDocumentPropertyResponse?,_ error: Error?) -> Void)) {
        cellsPropertiesGetDocumentPropertyWithRequestBuilder(name: name, propertyName: propertyName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read document property by name.
     - GET /cells/{name}/documentproperties/{propertyName}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The document name. 
     - parameter propertyName: (path) The property name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<CellsDocumentPropertyResponse> 
     */
    open class func cellsPropertiesGetDocumentPropertyWithRequestBuilder(name: String, propertyName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<CellsDocumentPropertyResponse> {
        var path = "/cells/{name}/documentproperties/{propertyName}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let propertyNamePreEscape = "\(propertyName)"
        let propertyNamePostEscape = propertyNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{propertyName}", with: propertyNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<CellsDocumentPropertyResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set/create document property.
     
     - parameter name: (path) The document name. 
     - parameter propertyName: (path) The property name. 
     - parameter property: (body) with new property value. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPropertiesPutDocumentProperty(name: String, propertyName: String, property: CellsDocumentProperty? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: CellsDocumentPropertyResponse?,_ error: Error?) -> Void)) {
        cellsPropertiesPutDocumentPropertyWithRequestBuilder(name: name, propertyName: propertyName, property: property, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set/create document property.
     - PUT /cells/{name}/documentproperties/{propertyName}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The document name. 
     - parameter propertyName: (path) The property name. 
     - parameter property: (body) with new property value. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<CellsDocumentPropertyResponse> 
     */
    open class func cellsPropertiesPutDocumentPropertyWithRequestBuilder(name: String, propertyName: String, property: CellsDocumentProperty? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<CellsDocumentPropertyResponse> {
        var path = "/cells/{name}/documentproperties/{propertyName}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let propertyNamePreEscape = "\(propertyName)"
        let propertyNamePostEscape = propertyNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{propertyName}", with: propertyNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: property)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<CellsDocumentPropertyResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
