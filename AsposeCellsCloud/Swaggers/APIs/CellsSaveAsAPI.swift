//
// CellsSaveAsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsSaveAsAPI {
    /**
     Convert document and save result to storage.
     
     - parameter name: (path) The document name. 
     - parameter saveOptions: (body) Save options. (optional)
     - parameter newfilename: (query) The new file name. (optional)
     - parameter isAutoFitRows: (query) Autofit rows. (optional, default to false)
     - parameter isAutoFitColumns: (query) Autofit columns. (optional, default to false)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsSaveAsPostDocumentSaveAs(name: String, saveOptions: SaveOptions? = nil, newfilename: String? = nil, isAutoFitRows: Bool? = nil, isAutoFitColumns: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaveResponse?,_ error: Error?) -> Void)) {
        cellsSaveAsPostDocumentSaveAsWithRequestBuilder(name: name, saveOptions: saveOptions, newfilename: newfilename, isAutoFitRows: isAutoFitRows, isAutoFitColumns: isAutoFitColumns, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Convert document and save result to storage.
     - POST /cells/{name}/SaveAs
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The document name. 
     - parameter saveOptions: (body) Save options. (optional)
     - parameter newfilename: (query) The new file name. (optional)
     - parameter isAutoFitRows: (query) Autofit rows. (optional, default to false)
     - parameter isAutoFitColumns: (query) Autofit columns. (optional, default to false)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaveResponse> 
     */
    open class func cellsSaveAsPostDocumentSaveAsWithRequestBuilder(name: String, saveOptions: SaveOptions? = nil, newfilename: String? = nil, isAutoFitRows: Bool? = nil, isAutoFitColumns: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaveResponse> {
        var path = "/cells/{name}/SaveAs"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: saveOptions)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "newfilename": newfilename, 
            "isAutoFitRows": isAutoFitRows, 
            "isAutoFitColumns": isAutoFitColumns, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaveResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
