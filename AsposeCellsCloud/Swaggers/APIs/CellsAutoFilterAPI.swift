//
// CellsAutoFilterAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsAutoFilterAPI {
    /**
     Removes a date filter.             
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter fieldIndex: (query)  
     - parameter dateTimeGroupingType: (query)  
     - parameter year: (query)  (optional, default to 0)
     - parameter month: (query)  (optional, default to 0)
     - parameter day: (query)  (optional, default to 0)
     - parameter hour: (query)  (optional, default to 0)
     - parameter minute: (query)  (optional, default to 0)
     - parameter second: (query)  (optional, default to 0)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsAutoFilterDeleteWorksheetDateFilter(name: String, sheetName: String, fieldIndex: Int32, dateTimeGroupingType: String, year: Int32? = nil, month: Int32? = nil, day: Int32? = nil, hour: Int32? = nil, minute: Int32? = nil, second: Int32? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsAutoFilterDeleteWorksheetDateFilterWithRequestBuilder(name: name, sheetName: sheetName, fieldIndex: fieldIndex, dateTimeGroupingType: dateTimeGroupingType, year: year, month: month, day: day, hour: hour, minute: minute, second: second, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Removes a date filter.             
     - DELETE /cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter fieldIndex: (query)  
     - parameter dateTimeGroupingType: (query)  
     - parameter year: (query)  (optional, default to 0)
     - parameter month: (query)  (optional, default to 0)
     - parameter day: (query)  (optional, default to 0)
     - parameter hour: (query)  (optional, default to 0)
     - parameter minute: (query)  (optional, default to 0)
     - parameter second: (query)  (optional, default to 0)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsAutoFilterDeleteWorksheetDateFilterWithRequestBuilder(name: String, sheetName: String, fieldIndex: Int32, dateTimeGroupingType: String, year: Int32? = nil, month: Int32? = nil, day: Int32? = nil, hour: Int32? = nil, minute: Int32? = nil, second: Int32? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fieldIndex": fieldIndex.encodeToJSON(), 
            "dateTimeGroupingType": dateTimeGroupingType, 
            "year": year?.encodeToJSON(), 
            "month": month?.encodeToJSON(), 
            "day": day?.encodeToJSON(), 
            "hour": hour?.encodeToJSON(), 
            "minute": minute?.encodeToJSON(), 
            "second": second?.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a filter for a filter column.             
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter fieldIndex: (query)  
     - parameter criteria: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsAutoFilterDeleteWorksheetFilter(name: String, sheetName: String, fieldIndex: Int32, criteria: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsAutoFilterDeleteWorksheetFilterWithRequestBuilder(name: name, sheetName: sheetName, fieldIndex: fieldIndex, criteria: criteria, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete a filter for a filter column.             
     - DELETE /cells/{name}/worksheets/{sheetName}/autoFilter/filter
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter fieldIndex: (query)  
     - parameter criteria: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsAutoFilterDeleteWorksheetFilterWithRequestBuilder(name: String, sheetName: String, fieldIndex: Int32, criteria: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autoFilter/filter"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fieldIndex": fieldIndex.encodeToJSON(), 
            "criteria": criteria, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Auto filter Description
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsAutoFilterGetWorksheetAutoFilter(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: AutoFilterResponse?,_ error: Error?) -> Void)) {
        cellsAutoFilterGetWorksheetAutoFilterWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Auto filter Description
     - GET /cells/{name}/worksheets/{sheetName}/autoFilter
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<AutoFilterResponse> 
     */
    open class func cellsAutoFilterGetWorksheetAutoFilterWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<AutoFilterResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autoFilter"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<AutoFilterResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsAutoFilterPostWorksheetAutoFilterRefresh(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsAutoFilterPostWorksheetAutoFilterRefreshWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/{name}/worksheets/{sheetName}/autoFilter/refresh
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsAutoFilterPostWorksheetAutoFilterRefreshWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autoFilter/refresh"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Match all blank cell in the list.
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter fieldIndex: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsAutoFilterPostWorksheetMatchBlanks(name: String, sheetName: String, fieldIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsAutoFilterPostWorksheetMatchBlanksWithRequestBuilder(name: name, sheetName: sheetName, fieldIndex: fieldIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Match all blank cell in the list.
     - POST /cells/{name}/worksheets/{sheetName}/autoFilter/matchBlanks
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter fieldIndex: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsAutoFilterPostWorksheetMatchBlanksWithRequestBuilder(name: String, sheetName: String, fieldIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autoFilter/matchBlanks"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fieldIndex": fieldIndex.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Match all not blank cell in the list.             
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter fieldIndex: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsAutoFilterPostWorksheetMatchNonBlanks(name: String, sheetName: String, fieldIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsAutoFilterPostWorksheetMatchNonBlanksWithRequestBuilder(name: name, sheetName: sheetName, fieldIndex: fieldIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Match all not blank cell in the list.             
     - POST /cells/{name}/worksheets/{sheetName}/autoFilter/matchNonBlanks
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter fieldIndex: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsAutoFilterPostWorksheetMatchNonBlanksWithRequestBuilder(name: String, sheetName: String, fieldIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autoFilter/matchNonBlanks"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fieldIndex": fieldIndex.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter range: (query)  
     - parameter fieldIndex: (query)  
     - parameter colorFilter: (body)  (optional)
     - parameter matchBlanks: (query)  (optional)
     - parameter refresh: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsAutoFilterPutWorksheetColorFilter(name: String, sheetName: String, range: String, fieldIndex: Int32, colorFilter: ColorFilterRequest? = nil, matchBlanks: Bool? = nil, refresh: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsAutoFilterPutWorksheetColorFilterWithRequestBuilder(name: name, sheetName: sheetName, range: range, fieldIndex: fieldIndex, colorFilter: colorFilter, matchBlanks: matchBlanks, refresh: refresh, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /cells/{name}/worksheets/{sheetName}/autoFilter/colorFilter
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter range: (query)  
     - parameter fieldIndex: (query)  
     - parameter colorFilter: (body)  (optional)
     - parameter matchBlanks: (query)  (optional)
     - parameter refresh: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsAutoFilterPutWorksheetColorFilterWithRequestBuilder(name: String, sheetName: String, range: String, fieldIndex: Int32, colorFilter: ColorFilterRequest? = nil, matchBlanks: Bool? = nil, refresh: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autoFilter/colorFilter"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: colorFilter)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "range": range, 
            "fieldIndex": fieldIndex.encodeToJSON(), 
            "matchBlanks": matchBlanks, 
            "refresh": refresh, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Filters a list with a custom criteria.             
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter range: (query)  
     - parameter fieldIndex: (query)  
     - parameter operatorType1: (query)  
     - parameter criteria1: (query)  
     - parameter isAnd: (query)  (optional)
     - parameter operatorType2: (query)  (optional)
     - parameter criteria2: (query)  (optional)
     - parameter matchBlanks: (query)  (optional)
     - parameter refresh: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsAutoFilterPutWorksheetCustomFilter(name: String, sheetName: String, range: String, fieldIndex: Int32, operatorType1: String, criteria1: String, isAnd: Bool? = nil, operatorType2: String? = nil, criteria2: String? = nil, matchBlanks: Bool? = nil, refresh: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsAutoFilterPutWorksheetCustomFilterWithRequestBuilder(name: name, sheetName: sheetName, range: range, fieldIndex: fieldIndex, operatorType1: operatorType1, criteria1: criteria1, isAnd: isAnd, operatorType2: operatorType2, criteria2: criteria2, matchBlanks: matchBlanks, refresh: refresh, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Filters a list with a custom criteria.             
     - PUT /cells/{name}/worksheets/{sheetName}/autoFilter/custom
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter range: (query)  
     - parameter fieldIndex: (query)  
     - parameter operatorType1: (query)  
     - parameter criteria1: (query)  
     - parameter isAnd: (query)  (optional)
     - parameter operatorType2: (query)  (optional)
     - parameter criteria2: (query)  (optional)
     - parameter matchBlanks: (query)  (optional)
     - parameter refresh: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsAutoFilterPutWorksheetCustomFilterWithRequestBuilder(name: String, sheetName: String, range: String, fieldIndex: Int32, operatorType1: String, criteria1: String, isAnd: Bool? = nil, operatorType2: String? = nil, criteria2: String? = nil, matchBlanks: Bool? = nil, refresh: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autoFilter/custom"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "range": range, 
            "fieldIndex": fieldIndex.encodeToJSON(), 
            "operatorType1": operatorType1, 
            "criteria1": criteria1, 
            "isAnd": isAnd, 
            "operatorType2": operatorType2, 
            "criteria2": criteria2, 
            "matchBlanks": matchBlanks, 
            "refresh": refresh, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     add date filter in worksheet 
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter range: (query)  
     - parameter fieldIndex: (query)  
     - parameter dateTimeGroupingType: (query)  
     - parameter year: (query)  (optional, default to 0)
     - parameter month: (query)  (optional, default to 0)
     - parameter day: (query)  (optional, default to 0)
     - parameter hour: (query)  (optional, default to 0)
     - parameter minute: (query)  (optional, default to 0)
     - parameter second: (query)  (optional, default to 0)
     - parameter matchBlanks: (query)  (optional)
     - parameter refresh: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsAutoFilterPutWorksheetDateFilter(name: String, sheetName: String, range: String, fieldIndex: Int32, dateTimeGroupingType: String, year: Int32? = nil, month: Int32? = nil, day: Int32? = nil, hour: Int32? = nil, minute: Int32? = nil, second: Int32? = nil, matchBlanks: Bool? = nil, refresh: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsAutoFilterPutWorksheetDateFilterWithRequestBuilder(name: name, sheetName: sheetName, range: range, fieldIndex: fieldIndex, dateTimeGroupingType: dateTimeGroupingType, year: year, month: month, day: day, hour: hour, minute: minute, second: second, matchBlanks: matchBlanks, refresh: refresh, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     add date filter in worksheet 
     - PUT /cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter range: (query)  
     - parameter fieldIndex: (query)  
     - parameter dateTimeGroupingType: (query)  
     - parameter year: (query)  (optional, default to 0)
     - parameter month: (query)  (optional, default to 0)
     - parameter day: (query)  (optional, default to 0)
     - parameter hour: (query)  (optional, default to 0)
     - parameter minute: (query)  (optional, default to 0)
     - parameter second: (query)  (optional, default to 0)
     - parameter matchBlanks: (query)  (optional)
     - parameter refresh: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsAutoFilterPutWorksheetDateFilterWithRequestBuilder(name: String, sheetName: String, range: String, fieldIndex: Int32, dateTimeGroupingType: String, year: Int32? = nil, month: Int32? = nil, day: Int32? = nil, hour: Int32? = nil, minute: Int32? = nil, second: Int32? = nil, matchBlanks: Bool? = nil, refresh: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "range": range, 
            "fieldIndex": fieldIndex.encodeToJSON(), 
            "dateTimeGroupingType": dateTimeGroupingType, 
            "year": year?.encodeToJSON(), 
            "month": month?.encodeToJSON(), 
            "day": day?.encodeToJSON(), 
            "hour": hour?.encodeToJSON(), 
            "minute": minute?.encodeToJSON(), 
            "second": second?.encodeToJSON(), 
            "matchBlanks": matchBlanks, 
            "refresh": refresh, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter range: (query)  
     - parameter fieldIndex: (query)  
     - parameter dynamicFilterType: (query)  
     - parameter matchBlanks: (query)  (optional)
     - parameter refresh: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsAutoFilterPutWorksheetDynamicFilter(name: String, sheetName: String, range: String, fieldIndex: Int32, dynamicFilterType: String, matchBlanks: Bool? = nil, refresh: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsAutoFilterPutWorksheetDynamicFilterWithRequestBuilder(name: name, sheetName: sheetName, range: range, fieldIndex: fieldIndex, dynamicFilterType: dynamicFilterType, matchBlanks: matchBlanks, refresh: refresh, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /cells/{name}/worksheets/{sheetName}/autoFilter/dynamicFilter
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter range: (query)  
     - parameter fieldIndex: (query)  
     - parameter dynamicFilterType: (query)  
     - parameter matchBlanks: (query)  (optional)
     - parameter refresh: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsAutoFilterPutWorksheetDynamicFilterWithRequestBuilder(name: String, sheetName: String, range: String, fieldIndex: Int32, dynamicFilterType: String, matchBlanks: Bool? = nil, refresh: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autoFilter/dynamicFilter"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "range": range, 
            "fieldIndex": fieldIndex.encodeToJSON(), 
            "dynamicFilterType": dynamicFilterType, 
            "matchBlanks": matchBlanks, 
            "refresh": refresh, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Adds a filter for a filter column.             
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter range: (query)  
     - parameter fieldIndex: (query)  
     - parameter criteria: (query)  
     - parameter matchBlanks: (query)  (optional)
     - parameter refresh: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsAutoFilterPutWorksheetFilter(name: String, sheetName: String, range: String, fieldIndex: Int32, criteria: String, matchBlanks: Bool? = nil, refresh: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsAutoFilterPutWorksheetFilterWithRequestBuilder(name: name, sheetName: sheetName, range: range, fieldIndex: fieldIndex, criteria: criteria, matchBlanks: matchBlanks, refresh: refresh, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a filter for a filter column.             
     - PUT /cells/{name}/worksheets/{sheetName}/autoFilter/filter
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter range: (query)  
     - parameter fieldIndex: (query)  
     - parameter criteria: (query)  
     - parameter matchBlanks: (query)  (optional)
     - parameter refresh: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsAutoFilterPutWorksheetFilterWithRequestBuilder(name: String, sheetName: String, range: String, fieldIndex: Int32, criteria: String, matchBlanks: Bool? = nil, refresh: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autoFilter/filter"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "range": range, 
            "fieldIndex": fieldIndex.encodeToJSON(), 
            "criteria": criteria, 
            "matchBlanks": matchBlanks, 
            "refresh": refresh, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Filter the top 10 item in the list
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter range: (query)  
     - parameter fieldIndex: (query)  
     - parameter isTop: (query)  
     - parameter isPercent: (query)  
     - parameter itemCount: (query)  
     - parameter matchBlanks: (query)  (optional)
     - parameter refresh: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsAutoFilterPutWorksheetFilterTop10(name: String, sheetName: String, range: String, fieldIndex: Int32, isTop: Bool, isPercent: Bool, itemCount: Int32, matchBlanks: Bool? = nil, refresh: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsAutoFilterPutWorksheetFilterTop10WithRequestBuilder(name: name, sheetName: sheetName, range: range, fieldIndex: fieldIndex, isTop: isTop, isPercent: isPercent, itemCount: itemCount, matchBlanks: matchBlanks, refresh: refresh, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Filter the top 10 item in the list
     - PUT /cells/{name}/worksheets/{sheetName}/autoFilter/filterTop10
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter range: (query)  
     - parameter fieldIndex: (query)  
     - parameter isTop: (query)  
     - parameter isPercent: (query)  
     - parameter itemCount: (query)  
     - parameter matchBlanks: (query)  (optional)
     - parameter refresh: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsAutoFilterPutWorksheetFilterTop10WithRequestBuilder(name: String, sheetName: String, range: String, fieldIndex: Int32, isTop: Bool, isPercent: Bool, itemCount: Int32, matchBlanks: Bool? = nil, refresh: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autoFilter/filterTop10"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "range": range, 
            "fieldIndex": fieldIndex.encodeToJSON(), 
            "isTop": isTop, 
            "isPercent": isPercent, 
            "itemCount": itemCount.encodeToJSON(), 
            "matchBlanks": matchBlanks, 
            "refresh": refresh, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Adds an icon filter.
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter range: (query)  
     - parameter fieldIndex: (query)  
     - parameter iconSetType: (query)  
     - parameter iconId: (query)  
     - parameter matchBlanks: (query)  (optional)
     - parameter refresh: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsAutoFilterPutWorksheetIconFilter(name: String, sheetName: String, range: String, fieldIndex: Int32, iconSetType: String, iconId: Int32, matchBlanks: Bool? = nil, refresh: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsAutoFilterPutWorksheetIconFilterWithRequestBuilder(name: name, sheetName: sheetName, range: range, fieldIndex: fieldIndex, iconSetType: iconSetType, iconId: iconId, matchBlanks: matchBlanks, refresh: refresh, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds an icon filter.
     - PUT /cells/{name}/worksheets/{sheetName}/autoFilter/iconFilter
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter range: (query)  
     - parameter fieldIndex: (query)  
     - parameter iconSetType: (query)  
     - parameter iconId: (query)  
     - parameter matchBlanks: (query)  (optional)
     - parameter refresh: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsAutoFilterPutWorksheetIconFilterWithRequestBuilder(name: String, sheetName: String, range: String, fieldIndex: Int32, iconSetType: String, iconId: Int32, matchBlanks: Bool? = nil, refresh: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autoFilter/iconFilter"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "range": range, 
            "fieldIndex": fieldIndex.encodeToJSON(), 
            "iconSetType": iconSetType, 
            "iconId": iconId.encodeToJSON(), 
            "matchBlanks": matchBlanks, 
            "refresh": refresh, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
