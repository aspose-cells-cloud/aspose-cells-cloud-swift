//
// CellsWorksheetValidationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsWorksheetValidationsAPI {
    /**
     Delete worksheet validation by index.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter validationIndex: (path) The validation index. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetValidationsDeleteWorksheetValidation(name: String, sheetName: String, validationIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ValidationResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetValidationsDeleteWorksheetValidationWithRequestBuilder(name: name, sheetName: sheetName, validationIndex: validationIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete worksheet validation by index.
     - DELETE /cells/{name}/worksheets/{sheetName}/validations/{validationIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter validationIndex: (path) The validation index. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ValidationResponse> 
     */
    open class func cellsWorksheetValidationsDeleteWorksheetValidationWithRequestBuilder(name: String, sheetName: String, validationIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ValidationResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let validationIndexPreEscape = "\(validationIndex)"
        let validationIndexPostEscape = validationIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{validationIndex}", with: validationIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ValidationResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get worksheet validation by index.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter validationIndex: (path) The validation index. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetValidationsGetWorksheetValidation(name: String, sheetName: String, validationIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ValidationResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetValidationsGetWorksheetValidationWithRequestBuilder(name: name, sheetName: sheetName, validationIndex: validationIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get worksheet validation by index.
     - GET /cells/{name}/worksheets/{sheetName}/validations/{validationIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter validationIndex: (path) The validation index. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ValidationResponse> 
     */
    open class func cellsWorksheetValidationsGetWorksheetValidationWithRequestBuilder(name: String, sheetName: String, validationIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ValidationResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let validationIndexPreEscape = "\(validationIndex)"
        let validationIndexPostEscape = validationIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{validationIndex}", with: validationIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ValidationResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get worksheet validations.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetValidationsGetWorksheetValidations(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ValidationsResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetValidationsGetWorksheetValidationsWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get worksheet validations.
     - GET /cells/{name}/worksheets/{sheetName}/validations
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ValidationsResponse> 
     */
    open class func cellsWorksheetValidationsGetWorksheetValidationsWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ValidationsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/validations"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ValidationsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update worksheet validation by index.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter validationIndex: (path) The validation index. 
     - parameter validation: (body)  (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetValidationsPostWorksheetValidation(name: String, sheetName: String, validationIndex: Int32, validation: Validation? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ValidationResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetValidationsPostWorksheetValidationWithRequestBuilder(name: name, sheetName: sheetName, validationIndex: validationIndex, validation: validation, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update worksheet validation by index.
     - POST /cells/{name}/worksheets/{sheetName}/validations/{validationIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter validationIndex: (path) The validation index. 
     - parameter validation: (body)  (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ValidationResponse> 
     */
    open class func cellsWorksheetValidationsPostWorksheetValidationWithRequestBuilder(name: String, sheetName: String, validationIndex: Int32, validation: Validation? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ValidationResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/validations/{validationIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let validationIndexPreEscape = "\(validationIndex)"
        let validationIndexPostEscape = validationIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{validationIndex}", with: validationIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: validation)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ValidationResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add worksheet validation at index.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter range: (query) Specified cells area (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetValidationsPutWorksheetValidation(name: String, sheetName: String, range: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ValidationResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetValidationsPutWorksheetValidationWithRequestBuilder(name: name, sheetName: sheetName, range: range, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add worksheet validation at index.
     - PUT /cells/{name}/worksheets/{sheetName}/validations
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter range: (query) Specified cells area (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ValidationResponse> 
     */
    open class func cellsWorksheetValidationsPutWorksheetValidationWithRequestBuilder(name: String, sheetName: String, range: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ValidationResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/validations"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "range": range, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ValidationResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
