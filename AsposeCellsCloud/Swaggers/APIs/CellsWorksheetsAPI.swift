//
// CellsWorksheetsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsWorksheetsAPI {
    /**
     Unprotect worksheet.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter protectParameter: (body) with protection settings. Only password is used here. (optional)
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsDeleteUnprotectWorksheet(name: String, sheetName: String, protectParameter: ProtectSheetParameter? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: WorksheetResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsDeleteUnprotectWorksheetWithRequestBuilder(name: name, sheetName: sheetName, protectParameter: protectParameter, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Unprotect worksheet.
     - DELETE /cells/{name}/worksheets/{sheetName}/protection
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter protectParameter: (body) with protection settings. Only password is used here. (optional)
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<WorksheetResponse> 
     */
    open class func cellsWorksheetsDeleteUnprotectWorksheetWithRequestBuilder(name: String, sheetName: String, protectParameter: ProtectSheetParameter? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<WorksheetResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/protection"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: protectParameter)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<WorksheetResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete worksheet.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsDeleteWorksheet(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: WorksheetsResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsDeleteWorksheetWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete worksheet.
     - DELETE /cells/{name}/worksheets/{sheetName}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<WorksheetsResponse> 
     */
    open class func cellsWorksheetsDeleteWorksheetWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<WorksheetsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<WorksheetsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set worksheet background image.
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsDeleteWorksheetBackground(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsDeleteWorksheetBackgroundWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set worksheet background image.
     - DELETE /cells/{name}/worksheets/{sheetName}/background
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorksheetsDeleteWorksheetBackgroundWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/background"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete worksheet's cell comment.
     
     - parameter name: (path) The document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter cellName: (path) The cell name 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsDeleteWorksheetComment(name: String, sheetName: String, cellName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsDeleteWorksheetCommentWithRequestBuilder(name: name, sheetName: sheetName, cellName: cellName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete worksheet's cell comment.
     - DELETE /cells/{name}/worksheets/{sheetName}/comments/{cellName}
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter cellName: (path) The cell name 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorksheetsDeleteWorksheetCommentWithRequestBuilder(name: String, sheetName: String, cellName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let cellNamePreEscape = "\(cellName)"
        let cellNamePostEscape = cellNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cellName}", with: cellNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete all comments for worksheet.
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsDeleteWorksheetComments(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsDeleteWorksheetCommentsWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete all comments for worksheet.
     - DELETE /cells/{name}/worksheets/{sheetName}/comments
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorksheetsDeleteWorksheetCommentsWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/comments"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unfreeze panes
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter row: (query)  
     - parameter column: (query)  
     - parameter freezedRows: (query)  
     - parameter freezedColumns: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsDeleteWorksheetFreezePanes(name: String, sheetName: String, row: Int32, column: Int32, freezedRows: Int32, freezedColumns: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsDeleteWorksheetFreezePanesWithRequestBuilder(name: name, sheetName: sheetName, row: row, column: column, freezedRows: freezedRows, freezedColumns: freezedColumns, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Unfreeze panes
     - DELETE /cells/{name}/worksheets/{sheetName}/freezepanes
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter row: (query)  
     - parameter column: (query)  
     - parameter freezedRows: (query)  
     - parameter freezedColumns: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorksheetsDeleteWorksheetFreezePanesWithRequestBuilder(name: String, sheetName: String, row: Int32, column: Int32, freezedRows: Int32, freezedColumns: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/freezepanes"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "row": row.encodeToJSON(), 
            "column": column.encodeToJSON(), 
            "freezedRows": freezedRows.encodeToJSON(), 
            "freezedColumns": freezedColumns.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read worksheets ranges info.
     
     - parameter name: (path) Document name. 
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsGetNamedRanges(name: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: RangesResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsGetNamedRangesWithRequestBuilder(name: name, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read worksheets ranges info.
     - GET /cells/{name}/worksheets/ranges
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<RangesResponse> 
     */
    open class func cellsWorksheetsGetNamedRangesWithRequestBuilder(name: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<RangesResponse> {
        var path = "/cells/{name}/worksheets/ranges"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<RangesResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read worksheet info or export.
     
     - parameter name: (path) The document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter format: (query) The exported file format. (optional)
     - parameter verticalResolution: (query) Image vertical resolution. (optional, default to 0)
     - parameter horizontalResolution: (query) Image horizontal resolution. (optional, default to 0)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsGetWorksheet(name: String, sheetName: String, format: String? = nil, verticalResolution: Int32? = nil, horizontalResolution: Int32? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        cellsWorksheetsGetWorksheetWithRequestBuilder(name: name, sheetName: sheetName, format: format, verticalResolution: verticalResolution, horizontalResolution: horizontalResolution, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read worksheet info or export.
     - GET /cells/{name}/worksheets/{sheetName}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter format: (query) The exported file format. (optional)
     - parameter verticalResolution: (query) Image vertical resolution. (optional, default to 0)
     - parameter horizontalResolution: (query) Image horizontal resolution. (optional, default to 0)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<String> 
     */
    open class func cellsWorksheetsGetWorksheetWithRequestBuilder(name: String, sheetName: String, format: String? = nil, verticalResolution: Int32? = nil, horizontalResolution: Int32? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<String> {
        var path = "/cells/{name}/worksheets/{sheetName}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format, 
            "verticalResolution": verticalResolution?.encodeToJSON(), 
            "horizontalResolution": horizontalResolution?.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<String>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Calculate formula value.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter formula: (query) The formula. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsGetWorksheetCalculateFormula(name: String, sheetName: String, formula: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SingleValueResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsGetWorksheetCalculateFormulaWithRequestBuilder(name: name, sheetName: sheetName, formula: formula, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Calculate formula value.
     - GET /cells/{name}/worksheets/{sheetName}/formulaResult
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter formula: (query) The formula. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SingleValueResponse> 
     */
    open class func cellsWorksheetsGetWorksheetCalculateFormulaWithRequestBuilder(name: String, sheetName: String, formula: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SingleValueResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/formulaResult"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "formula": formula, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SingleValueResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get worksheet comment by cell name.
     
     - parameter name: (path) The document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter cellName: (path) The cell name 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsGetWorksheetComment(name: String, sheetName: String, cellName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: CommentResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsGetWorksheetCommentWithRequestBuilder(name: name, sheetName: sheetName, cellName: cellName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get worksheet comment by cell name.
     - GET /cells/{name}/worksheets/{sheetName}/comments/{cellName}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter cellName: (path) The cell name 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<CommentResponse> 
     */
    open class func cellsWorksheetsGetWorksheetCommentWithRequestBuilder(name: String, sheetName: String, cellName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<CommentResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let cellNamePreEscape = "\(cellName)"
        let cellNamePostEscape = cellNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cellName}", with: cellNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<CommentResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get worksheet comments.
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsGetWorksheetComments(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: CommentsResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsGetWorksheetCommentsWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get worksheet comments.
     - GET /cells/{name}/worksheets/{sheetName}/comments
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<CommentsResponse> 
     */
    open class func cellsWorksheetsGetWorksheetCommentsWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<CommentsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/comments"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<CommentsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get worksheet merged cell by its index.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter mergedCellIndex: (path) Merged cell index. 
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsGetWorksheetMergedCell(name: String, sheetName: String, mergedCellIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: MergedCellResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsGetWorksheetMergedCellWithRequestBuilder(name: name, sheetName: sheetName, mergedCellIndex: mergedCellIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get worksheet merged cell by its index.
     - GET /cells/{name}/worksheets/{sheetName}/mergedCells/{mergedCellIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter mergedCellIndex: (path) Merged cell index. 
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<MergedCellResponse> 
     */
    open class func cellsWorksheetsGetWorksheetMergedCellWithRequestBuilder(name: String, sheetName: String, mergedCellIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<MergedCellResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/mergedCells/{mergedCellIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let mergedCellIndexPreEscape = "\(mergedCellIndex)"
        let mergedCellIndexPostEscape = mergedCellIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mergedCellIndex}", with: mergedCellIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<MergedCellResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get worksheet merged cells.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The workseet name. 
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsGetWorksheetMergedCells(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: MergedCellsResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsGetWorksheetMergedCellsWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get worksheet merged cells.
     - GET /cells/{name}/worksheets/{sheetName}/mergedCells
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The workseet name. 
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<MergedCellsResponse> 
     */
    open class func cellsWorksheetsGetWorksheetMergedCellsWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<MergedCellsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/mergedCells"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<MergedCellsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get worksheet text items.
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) The workbook&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsGetWorksheetTextItems(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: TextItemsResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsGetWorksheetTextItemsWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get worksheet text items.
     - GET /cells/{name}/worksheets/{sheetName}/textItems
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) The workbook&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<TextItemsResponse> 
     */
    open class func cellsWorksheetsGetWorksheetTextItemsWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<TextItemsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/textItems"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<TextItemsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read worksheets info.
     
     - parameter name: (path) Document name. 
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsGetWorksheets(name: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: WorksheetsResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsGetWorksheetsWithRequestBuilder(name: name, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read worksheets info.
     - GET /cells/{name}/worksheets
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<WorksheetsResponse> 
     */
    open class func cellsWorksheetsGetWorksheetsWithRequestBuilder(name: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<WorksheetsResponse> {
        var path = "/cells/{name}/worksheets"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<WorksheetsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter firstColumn: (query)  
     - parameter lastColumn: (query)  
     - parameter autoFitterOptions: (body)  (optional)
     - parameter firstRow: (query)  (optional)
     - parameter lastRow: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPostAutofitWorksheetColumns(name: String, sheetName: String, firstColumn: Int32, lastColumn: Int32, autoFitterOptions: AutoFitterOptions? = nil, firstRow: Int32? = nil, lastRow: Int32? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPostAutofitWorksheetColumnsWithRequestBuilder(name: name, sheetName: sheetName, firstColumn: firstColumn, lastColumn: lastColumn, autoFitterOptions: autoFitterOptions, firstRow: firstRow, lastRow: lastRow, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/{name}/worksheets/{sheetName}/autofitcolumns
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter firstColumn: (query)  
     - parameter lastColumn: (query)  
     - parameter autoFitterOptions: (body)  (optional)
     - parameter firstRow: (query)  (optional)
     - parameter lastRow: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorksheetsPostAutofitWorksheetColumnsWithRequestBuilder(name: String, sheetName: String, firstColumn: Int32, lastColumn: Int32, autoFitterOptions: AutoFitterOptions? = nil, firstRow: Int32? = nil, lastRow: Int32? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autofitcolumns"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: autoFitterOptions)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "firstColumn": firstColumn.encodeToJSON(), 
            "lastColumn": lastColumn.encodeToJSON(), 
            "firstRow": firstRow?.encodeToJSON(), 
            "lastRow": lastRow?.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter rowIndex: (query)  
     - parameter firstColumn: (query)  
     - parameter lastColumn: (query)  
     - parameter autoFitterOptions: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPostAutofitWorksheetRow(name: String, sheetName: String, rowIndex: Int32, firstColumn: Int32, lastColumn: Int32, autoFitterOptions: AutoFitterOptions? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPostAutofitWorksheetRowWithRequestBuilder(name: name, sheetName: sheetName, rowIndex: rowIndex, firstColumn: firstColumn, lastColumn: lastColumn, autoFitterOptions: autoFitterOptions, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/{name}/worksheets/{sheetName}/autofitrow
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter rowIndex: (query)  
     - parameter firstColumn: (query)  
     - parameter lastColumn: (query)  
     - parameter autoFitterOptions: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorksheetsPostAutofitWorksheetRowWithRequestBuilder(name: String, sheetName: String, rowIndex: Int32, firstColumn: Int32, lastColumn: Int32, autoFitterOptions: AutoFitterOptions? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autofitrow"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: autoFitterOptions)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "rowIndex": rowIndex.encodeToJSON(), 
            "firstColumn": firstColumn.encodeToJSON(), 
            "lastColumn": lastColumn.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Autofit worksheet rows.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter autoFitterOptions: (body) Auto Fitter Options. (optional)
     - parameter startRow: (query) Start row. (optional)
     - parameter endRow: (query) End row. (optional)
     - parameter onlyAuto: (query) Only auto. (optional, default to false)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPostAutofitWorksheetRows(name: String, sheetName: String, autoFitterOptions: AutoFitterOptions? = nil, startRow: Int32? = nil, endRow: Int32? = nil, onlyAuto: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPostAutofitWorksheetRowsWithRequestBuilder(name: name, sheetName: sheetName, autoFitterOptions: autoFitterOptions, startRow: startRow, endRow: endRow, onlyAuto: onlyAuto, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Autofit worksheet rows.
     - POST /cells/{name}/worksheets/{sheetName}/autofitrows
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter autoFitterOptions: (body) Auto Fitter Options. (optional)
     - parameter startRow: (query) Start row. (optional)
     - parameter endRow: (query) End row. (optional)
     - parameter onlyAuto: (query) Only auto. (optional, default to false)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorksheetsPostAutofitWorksheetRowsWithRequestBuilder(name: String, sheetName: String, autoFitterOptions: AutoFitterOptions? = nil, startRow: Int32? = nil, endRow: Int32? = nil, onlyAuto: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/autofitrows"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: autoFitterOptions)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startRow": startRow?.encodeToJSON(), 
            "endRow": endRow?.encodeToJSON(), 
            "onlyAuto": onlyAuto, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter sourceSheet: (query)  
     - parameter options: (body)  (optional)
     - parameter sourceWorkbook: (query)  (optional)
     - parameter sourceFolder: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPostCopyWorksheet(name: String, sheetName: String, sourceSheet: String, options: CopyOptions? = nil, sourceWorkbook: String? = nil, sourceFolder: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPostCopyWorksheetWithRequestBuilder(name: name, sheetName: sheetName, sourceSheet: sourceSheet, options: options, sourceWorkbook: sourceWorkbook, sourceFolder: sourceFolder, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/{name}/worksheets/{sheetName}/copy
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter sourceSheet: (query)  
     - parameter options: (body)  (optional)
     - parameter sourceWorkbook: (query)  (optional)
     - parameter sourceFolder: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorksheetsPostCopyWorksheetWithRequestBuilder(name: String, sheetName: String, sourceSheet: String, options: CopyOptions? = nil, sourceWorkbook: String? = nil, sourceFolder: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/copy"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: options)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sourceSheet": sourceSheet, 
            "sourceWorkbook": sourceWorkbook, 
            "sourceFolder": sourceFolder, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Move worksheet.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter moving: (body) with moving parameters. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPostMoveWorksheet(name: String, sheetName: String, moving: WorksheetMovingRequest? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: WorksheetsResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPostMoveWorksheetWithRequestBuilder(name: name, sheetName: sheetName, moving: moving, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Move worksheet.
     - POST /cells/{name}/worksheets/{sheetName}/position
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter moving: (body) with moving parameters. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<WorksheetsResponse> 
     */
    open class func cellsWorksheetsPostMoveWorksheetWithRequestBuilder(name: String, sheetName: String, moving: WorksheetMovingRequest? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<WorksheetsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/position"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: moving)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<WorksheetsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Rename worksheet
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter newname: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPostRenameWorksheet(name: String, sheetName: String, newname: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPostRenameWorksheetWithRequestBuilder(name: name, sheetName: sheetName, newname: newname, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Rename worksheet
     - POST /cells/{name}/worksheets/{sheetName}/rename
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter newname: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorksheetsPostRenameWorksheetWithRequestBuilder(name: String, sheetName: String, newname: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/rename"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "newname": newname, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update worksheet property
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter sheet: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPostUpdateWorksheetProperty(name: String, sheetName: String, sheet: Worksheet? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: WorksheetResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPostUpdateWorksheetPropertyWithRequestBuilder(name: name, sheetName: sheetName, sheet: sheet, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update worksheet property
     - POST /cells/{name}/worksheets/{sheetName}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter sheet: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<WorksheetResponse> 
     */
    open class func cellsWorksheetsPostUpdateWorksheetPropertyWithRequestBuilder(name: String, sheetName: String, sheet: Worksheet? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<WorksheetResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sheet)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<WorksheetResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter value: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPostUpdateWorksheetZoom(name: String, sheetName: String, value: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPostUpdateWorksheetZoomWithRequestBuilder(name: name, sheetName: sheetName, value: value, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/{name}/worksheets/{sheetName}/zoom
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter value: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorksheetsPostUpdateWorksheetZoomWithRequestBuilder(name: String, sheetName: String, value: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/zoom"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "value": value.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update worksheet's cell comment.
     
     - parameter name: (path) The document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter cellName: (path) The cell name 
     - parameter comment: (body) Comment object (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPostWorksheetComment(name: String, sheetName: String, cellName: String, comment: Comment? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPostWorksheetCommentWithRequestBuilder(name: name, sheetName: sheetName, cellName: cellName, comment: comment, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update worksheet's cell comment.
     - POST /cells/{name}/worksheets/{sheetName}/comments/{cellName}
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter cellName: (path) The cell name 
     - parameter comment: (body) Comment object (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorksheetsPostWorksheetCommentWithRequestBuilder(name: String, sheetName: String, cellName: String, comment: Comment? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let cellNamePreEscape = "\(cellName)"
        let cellNamePostEscape = cellNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cellName}", with: cellNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: comment)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Sort worksheet range.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter cellArea: (query) The range to sort. 
     - parameter dataSorter: (body) with sorting settings. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPostWorksheetRangeSort(name: String, sheetName: String, cellArea: String, dataSorter: DataSorter? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPostWorksheetRangeSortWithRequestBuilder(name: name, sheetName: sheetName, cellArea: cellArea, dataSorter: dataSorter, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Sort worksheet range.
     - POST /cells/{name}/worksheets/{sheetName}/sort
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter cellArea: (query) The range to sort. 
     - parameter dataSorter: (body) with sorting settings. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorksheetsPostWorksheetRangeSortWithRequestBuilder(name: String, sheetName: String, cellArea: String, dataSorter: DataSorter? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/sort"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dataSorter)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "cellArea": cellArea, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Search text.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter text: (query) Text to search. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPostWorksheetTextSearch(name: String, sheetName: String, text: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: TextItemsResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPostWorksheetTextSearchWithRequestBuilder(name: name, sheetName: sheetName, text: text, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search text.
     - POST /cells/{name}/worksheets/{sheetName}/findText
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter text: (query) Text to search. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<TextItemsResponse> 
     */
    open class func cellsWorksheetsPostWorksheetTextSearchWithRequestBuilder(name: String, sheetName: String, text: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<TextItemsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/findText"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "text": text, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<TextItemsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Replace text.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter oldValue: (query) The old text to replace. 
     - parameter newValue: (query) The new text to replace by. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPostWorsheetTextReplace(name: String, sheetName: String, oldValue: String, newValue: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: WorksheetReplaceResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPostWorsheetTextReplaceWithRequestBuilder(name: name, sheetName: sheetName, oldValue: oldValue, newValue: newValue, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Replace text.
     - POST /cells/{name}/worksheets/{sheetName}/replaceText
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter oldValue: (query) The old text to replace. 
     - parameter newValue: (query) The new text to replace by. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<WorksheetReplaceResponse> 
     */
    open class func cellsWorksheetsPostWorsheetTextReplaceWithRequestBuilder(name: String, sheetName: String, oldValue: String, newValue: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<WorksheetReplaceResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/replaceText"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "oldValue": oldValue, 
            "newValue": newValue, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<WorksheetReplaceResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add new worksheet.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The new sheet name. 
     - parameter position: (query) The new sheet position. (optional)
     - parameter sheettype: (query) The new sheet type. (optional)
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPutAddNewWorksheet(name: String, sheetName: String, position: Int32? = nil, sheettype: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: WorksheetsResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPutAddNewWorksheetWithRequestBuilder(name: name, sheetName: sheetName, position: position, sheettype: sheettype, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add new worksheet.
     - PUT /cells/{name}/worksheets/{sheetName}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The new sheet name. 
     - parameter position: (query) The new sheet position. (optional)
     - parameter sheettype: (query) The new sheet type. (optional)
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<WorksheetsResponse> 
     */
    open class func cellsWorksheetsPutAddNewWorksheetWithRequestBuilder(name: String, sheetName: String, position: Int32? = nil, sheettype: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<WorksheetsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "position": position?.encodeToJSON(), 
            "sheettype": sheettype, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<WorksheetsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Change worksheet visibility.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter isVisible: (query) New worksheet visibility value. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPutChangeVisibilityWorksheet(name: String, sheetName: String, isVisible: Bool, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: WorksheetResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPutChangeVisibilityWorksheetWithRequestBuilder(name: name, sheetName: sheetName, isVisible: isVisible, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Change worksheet visibility.
     - PUT /cells/{name}/worksheets/{sheetName}/visible
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter isVisible: (query) New worksheet visibility value. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<WorksheetResponse> 
     */
    open class func cellsWorksheetsPutChangeVisibilityWorksheetWithRequestBuilder(name: String, sheetName: String, isVisible: Bool, folder: String? = nil, storage: String? = nil) -> RequestBuilder<WorksheetResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/visible"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "isVisible": isVisible, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<WorksheetResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Protect worksheet.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter protectParameter: (body) with protection settings. (optional)
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPutProtectWorksheet(name: String, sheetName: String, protectParameter: ProtectSheetParameter? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: WorksheetResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPutProtectWorksheetWithRequestBuilder(name: name, sheetName: sheetName, protectParameter: protectParameter, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Protect worksheet.
     - PUT /cells/{name}/worksheets/{sheetName}/protection
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter protectParameter: (body) with protection settings. (optional)
     - parameter folder: (query) Document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<WorksheetResponse> 
     */
    open class func cellsWorksheetsPutProtectWorksheetWithRequestBuilder(name: String, sheetName: String, protectParameter: ProtectSheetParameter? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<WorksheetResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/protection"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: protectParameter)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<WorksheetResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set worksheet background image.
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter png: (body)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPutWorksheetBackground(name: String, sheetName: String, png: NSData, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPutWorksheetBackgroundWithRequestBuilder(name: name, sheetName: sheetName, png: png, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set worksheet background image.
     - PUT /cells/{name}/worksheets/{sheetName}/background
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter png: (body)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorksheetsPutWorksheetBackgroundWithRequestBuilder(name: String, sheetName: String, png: NSData, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/background"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: png)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add worksheet's cell comment.
     
     - parameter name: (path) The document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter cellName: (path) The cell name 
     - parameter comment: (body) Comment object (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPutWorksheetComment(name: String, sheetName: String, cellName: String, comment: Comment? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: CommentResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPutWorksheetCommentWithRequestBuilder(name: name, sheetName: sheetName, cellName: cellName, comment: comment, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add worksheet's cell comment.
     - PUT /cells/{name}/worksheets/{sheetName}/comments/{cellName}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter cellName: (path) The cell name 
     - parameter comment: (body) Comment object (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<CommentResponse> 
     */
    open class func cellsWorksheetsPutWorksheetCommentWithRequestBuilder(name: String, sheetName: String, cellName: String, comment: Comment? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<CommentResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/comments/{cellName}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let cellNamePreEscape = "\(cellName)"
        let cellNamePostEscape = cellNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cellName}", with: cellNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: comment)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<CommentResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set freeze panes
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter row: (query)  
     - parameter column: (query)  
     - parameter freezedRows: (query)  
     - parameter freezedColumns: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorksheetsPutWorksheetFreezePanes(name: String, sheetName: String, row: Int32, column: Int32, freezedRows: Int32, freezedColumns: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorksheetsPutWorksheetFreezePanesWithRequestBuilder(name: name, sheetName: sheetName, row: row, column: column, freezedRows: freezedRows, freezedColumns: freezedColumns, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set freeze panes
     - PUT /cells/{name}/worksheets/{sheetName}/freezepanes
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter row: (query)  
     - parameter column: (query)  
     - parameter freezedRows: (query)  
     - parameter freezedColumns: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorksheetsPutWorksheetFreezePanesWithRequestBuilder(name: String, sheetName: String, row: Int32, column: Int32, freezedRows: Int32, freezedColumns: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/freezepanes"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "row": row.encodeToJSON(), 
            "column": column.encodeToJSON(), 
            "freezedRows": freezedRows.encodeToJSON(), 
            "freezedColumns": freezedColumns.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
