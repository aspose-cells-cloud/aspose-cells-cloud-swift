//
// CellsHypelinksAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsHypelinksAPI {
    /**
     Delete worksheet hyperlink by index.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter hyperlinkIndex: (path) The hyperlink&#39;s index. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsHypelinksDeleteWorksheetHyperlink(name: String, sheetName: String, hyperlinkIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsHypelinksDeleteWorksheetHyperlinkWithRequestBuilder(name: name, sheetName: sheetName, hyperlinkIndex: hyperlinkIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete worksheet hyperlink by index.
     - DELETE /cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter hyperlinkIndex: (path) The hyperlink&#39;s index. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsHypelinksDeleteWorksheetHyperlinkWithRequestBuilder(name: String, sheetName: String, hyperlinkIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let hyperlinkIndexPreEscape = "\(hyperlinkIndex)"
        let hyperlinkIndexPostEscape = hyperlinkIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hyperlinkIndex}", with: hyperlinkIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete all hyperlinks in worksheet.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsHypelinksDeleteWorksheetHyperlinks(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsHypelinksDeleteWorksheetHyperlinksWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete all hyperlinks in worksheet.
     - DELETE /cells/{name}/worksheets/{sheetName}/hyperlinks
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsHypelinksDeleteWorksheetHyperlinksWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/hyperlinks"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get worksheet hyperlink by index.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter hyperlinkIndex: (path) The hyperlink&#39;s index. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsHypelinksGetWorksheetHyperlink(name: String, sheetName: String, hyperlinkIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: HyperlinkResponse?,_ error: Error?) -> Void)) {
        cellsHypelinksGetWorksheetHyperlinkWithRequestBuilder(name: name, sheetName: sheetName, hyperlinkIndex: hyperlinkIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get worksheet hyperlink by index.
     - GET /cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter hyperlinkIndex: (path) The hyperlink&#39;s index. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<HyperlinkResponse> 
     */
    open class func cellsHypelinksGetWorksheetHyperlinkWithRequestBuilder(name: String, sheetName: String, hyperlinkIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<HyperlinkResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let hyperlinkIndexPreEscape = "\(hyperlinkIndex)"
        let hyperlinkIndexPostEscape = hyperlinkIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hyperlinkIndex}", with: hyperlinkIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<HyperlinkResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get worksheet hyperlinks.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsHypelinksGetWorksheetHyperlinks(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: HyperlinksResponse?,_ error: Error?) -> Void)) {
        cellsHypelinksGetWorksheetHyperlinksWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get worksheet hyperlinks.
     - GET /cells/{name}/worksheets/{sheetName}/hyperlinks
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<HyperlinksResponse> 
     */
    open class func cellsHypelinksGetWorksheetHyperlinksWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<HyperlinksResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/hyperlinks"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<HyperlinksResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update worksheet hyperlink by index.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter hyperlinkIndex: (path) The hyperlink&#39;s index. 
     - parameter hyperlink: (body) Hyperlink object (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsHypelinksPostWorksheetHyperlink(name: String, sheetName: String, hyperlinkIndex: Int32, hyperlink: Hyperlink? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: HyperlinkResponse?,_ error: Error?) -> Void)) {
        cellsHypelinksPostWorksheetHyperlinkWithRequestBuilder(name: name, sheetName: sheetName, hyperlinkIndex: hyperlinkIndex, hyperlink: hyperlink, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update worksheet hyperlink by index.
     - POST /cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter hyperlinkIndex: (path) The hyperlink&#39;s index. 
     - parameter hyperlink: (body) Hyperlink object (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<HyperlinkResponse> 
     */
    open class func cellsHypelinksPostWorksheetHyperlinkWithRequestBuilder(name: String, sheetName: String, hyperlinkIndex: Int32, hyperlink: Hyperlink? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<HyperlinkResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/hyperlinks/{hyperlinkIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let hyperlinkIndexPreEscape = "\(hyperlinkIndex)"
        let hyperlinkIndexPostEscape = hyperlinkIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{hyperlinkIndex}", with: hyperlinkIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: hyperlink)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<HyperlinkResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add worksheet hyperlink.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter firstRow: (query)  
     - parameter firstColumn: (query)  
     - parameter totalRows: (query)  
     - parameter totalColumns: (query)  
     - parameter address: (query)  
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsHypelinksPutWorksheetHyperlink(name: String, sheetName: String, firstRow: Int32, firstColumn: Int32, totalRows: Int32, totalColumns: Int32, address: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: HyperlinkResponse?,_ error: Error?) -> Void)) {
        cellsHypelinksPutWorksheetHyperlinkWithRequestBuilder(name: name, sheetName: sheetName, firstRow: firstRow, firstColumn: firstColumn, totalRows: totalRows, totalColumns: totalColumns, address: address, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add worksheet hyperlink.
     - PUT /cells/{name}/worksheets/{sheetName}/hyperlinks
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter firstRow: (query)  
     - parameter firstColumn: (query)  
     - parameter totalRows: (query)  
     - parameter totalColumns: (query)  
     - parameter address: (query)  
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<HyperlinkResponse> 
     */
    open class func cellsHypelinksPutWorksheetHyperlinkWithRequestBuilder(name: String, sheetName: String, firstRow: Int32, firstColumn: Int32, totalRows: Int32, totalColumns: Int32, address: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<HyperlinkResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/hyperlinks"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "firstRow": firstRow.encodeToJSON(), 
            "firstColumn": firstColumn.encodeToJSON(), 
            "totalRows": totalRows.encodeToJSON(), 
            "totalColumns": totalColumns.encodeToJSON(), 
            "address": address, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<HyperlinkResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
