//
// CellsPicturesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsPicturesAPI {
    /**
     Delete a picture object in worksheet
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worsheet name. 
     - parameter pictureIndex: (path) Picture index 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPicturesDeleteWorksheetPicture(name: String, sheetName: String, pictureIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPicturesDeleteWorksheetPictureWithRequestBuilder(name: name, sheetName: sheetName, pictureIndex: pictureIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete a picture object in worksheet
     - DELETE /cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worsheet name. 
     - parameter pictureIndex: (path) Picture index 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPicturesDeleteWorksheetPictureWithRequestBuilder(name: String, sheetName: String, pictureIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pictureIndexPreEscape = "\(pictureIndex)"
        let pictureIndexPostEscape = pictureIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pictureIndex}", with: pictureIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete all pictures in worksheet.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPicturesDeleteWorksheetPictures(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPicturesDeleteWorksheetPicturesWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete all pictures in worksheet.
     - DELETE /cells/{name}/worksheets/{sheetName}/pictures
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPicturesDeleteWorksheetPicturesWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pictures"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     GRead worksheet picture by number.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter pictureIndex: (path) The picture index. 
     - parameter format: (query) The exported object format. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPicturesGetWorksheetPicture(name: String, sheetName: String, pictureIndex: Int32, format: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: NSURL?,_ error: Error?) -> Void)) {
        cellsPicturesGetWorksheetPictureWithRequestBuilder(name: name, sheetName: sheetName, pictureIndex: pictureIndex, format: format, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     GRead worksheet picture by number.
     - GET /cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter pictureIndex: (path) The picture index. 
     - parameter format: (query) The exported object format. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<NSURL> 
     */
    open class func cellsPicturesGetWorksheetPictureWithRequestBuilder(name: String, sheetName: String, pictureIndex: Int32, format: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<NSURL> {
        var path = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pictureIndexPreEscape = "\(pictureIndex)"
        let pictureIndexPostEscape = pictureIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pictureIndex}", with: pictureIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<NSURL>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read worksheet pictures.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPicturesGetWorksheetPictures(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: PicturesResponse?,_ error: Error?) -> Void)) {
        cellsPicturesGetWorksheetPicturesWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read worksheet pictures.
     - GET /cells/{name}/worksheets/{sheetName}/pictures
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<PicturesResponse> 
     */
    open class func cellsPicturesGetWorksheetPicturesWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<PicturesResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pictures"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<PicturesResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update worksheet picture by index.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter pictureIndex: (path) The picture&#39;s index. 
     - parameter picture: (body) Picture object (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPicturesPostWorksheetPicture(name: String, sheetName: String, pictureIndex: Int32, picture: Picture? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: PictureResponse?,_ error: Error?) -> Void)) {
        cellsPicturesPostWorksheetPictureWithRequestBuilder(name: name, sheetName: sheetName, pictureIndex: pictureIndex, picture: picture, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update worksheet picture by index.
     - POST /cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter pictureIndex: (path) The picture&#39;s index. 
     - parameter picture: (body) Picture object (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<PictureResponse> 
     */
    open class func cellsPicturesPostWorksheetPictureWithRequestBuilder(name: String, sheetName: String, pictureIndex: Int32, picture: Picture? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<PictureResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pictures/{pictureIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pictureIndexPreEscape = "\(pictureIndex)"
        let pictureIndexPostEscape = pictureIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pictureIndex}", with: pictureIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: picture)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<PictureResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add a new worksheet picture.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worsheet name. 
     - parameter picture: (body) Pictute object (optional)
     - parameter upperLeftRow: (query) The image upper left row. (optional, default to 0)
     - parameter upperLeftColumn: (query) The image upper left column. (optional, default to 0)
     - parameter lowerRightRow: (query) The image low right row. (optional, default to 0)
     - parameter lowerRightColumn: (query) The image low right column. (optional, default to 0)
     - parameter picturePath: (query) The picture path, if not provided the picture data is inspected in the request body. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPicturesPutWorksheetAddPicture(name: String, sheetName: String, picture: Picture? = nil, upperLeftRow: Int32? = nil, upperLeftColumn: Int32? = nil, lowerRightRow: Int32? = nil, lowerRightColumn: Int32? = nil, picturePath: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: PicturesResponse?,_ error: Error?) -> Void)) {
        cellsPicturesPutWorksheetAddPictureWithRequestBuilder(name: name, sheetName: sheetName, picture: picture, upperLeftRow: upperLeftRow, upperLeftColumn: upperLeftColumn, lowerRightRow: lowerRightRow, lowerRightColumn: lowerRightColumn, picturePath: picturePath, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a new worksheet picture.
     - PUT /cells/{name}/worksheets/{sheetName}/pictures
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worsheet name. 
     - parameter picture: (body) Pictute object (optional)
     - parameter upperLeftRow: (query) The image upper left row. (optional, default to 0)
     - parameter upperLeftColumn: (query) The image upper left column. (optional, default to 0)
     - parameter lowerRightRow: (query) The image low right row. (optional, default to 0)
     - parameter lowerRightColumn: (query) The image low right column. (optional, default to 0)
     - parameter picturePath: (query) The picture path, if not provided the picture data is inspected in the request body. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<PicturesResponse> 
     */
    open class func cellsPicturesPutWorksheetAddPictureWithRequestBuilder(name: String, sheetName: String, picture: Picture? = nil, upperLeftRow: Int32? = nil, upperLeftColumn: Int32? = nil, lowerRightRow: Int32? = nil, lowerRightColumn: Int32? = nil, picturePath: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<PicturesResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pictures"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: picture)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "upperLeftRow": upperLeftRow?.encodeToJSON(), 
            "upperLeftColumn": upperLeftColumn?.encodeToJSON(), 
            "lowerRightRow": lowerRightRow?.encodeToJSON(), 
            "lowerRightColumn": lowerRightColumn?.encodeToJSON(), 
            "picturePath": picturePath, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<PicturesResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
