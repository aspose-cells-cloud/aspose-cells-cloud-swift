//
// CellsPivotTablesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsPivotTablesAPI {
    /**
     Delete pivot field into into pivot table
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivotTableIndex: (path) Pivot table index 
     - parameter pivotFieldType: (query) The fields area type. 
     - parameter request: (body) Dto that conrains field indexes (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesDeletePivotTableField(name: String, sheetName: String, pivotTableIndex: Int32, pivotFieldType: String, request: PivotTableFieldRequest? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesDeletePivotTableFieldWithRequestBuilder(name: name, sheetName: sheetName, pivotTableIndex: pivotTableIndex, pivotFieldType: pivotFieldType, request: request, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete pivot field into into pivot table
     - DELETE /cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivotTableIndex: (path) Pivot table index 
     - parameter pivotFieldType: (query) The fields area type. 
     - parameter request: (body) Dto that conrains field indexes (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPivotTablesDeletePivotTableFieldWithRequestBuilder(name: String, sheetName: String, pivotTableIndex: Int32, pivotFieldType: String, request: PivotTableFieldRequest? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivotTableIndexPreEscape = "\(pivotTableIndex)"
        let pivotTableIndexPostEscape = pivotTableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivotTableIndex}", with: pivotTableIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pivotFieldType": pivotFieldType, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete worksheet pivot table by index
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivotTableIndex: (path) Pivot table index 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesDeleteWorksheetPivotTable(name: String, sheetName: String, pivotTableIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesDeleteWorksheetPivotTableWithRequestBuilder(name: name, sheetName: sheetName, pivotTableIndex: pivotTableIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete worksheet pivot table by index
     - DELETE /cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivotTableIndex: (path) Pivot table index 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPivotTablesDeleteWorksheetPivotTableWithRequestBuilder(name: String, sheetName: String, pivotTableIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivotTableIndexPreEscape = "\(pivotTableIndex)"
        let pivotTableIndexPostEscape = pivotTableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivotTableIndex}", with: pivotTableIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     delete  pivot filter for piovt table             
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter fieldIndex: (path)  
     - parameter needReCalculate: (query)  (optional, default to false)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesDeleteWorksheetPivotTableFilter(name: String, sheetName: String, pivotTableIndex: Int32, fieldIndex: Int32, needReCalculate: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesDeleteWorksheetPivotTableFilterWithRequestBuilder(name: name, sheetName: sheetName, pivotTableIndex: pivotTableIndex, fieldIndex: fieldIndex, needReCalculate: needReCalculate, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     delete  pivot filter for piovt table             
     - DELETE /cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{fieldIndex}
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter fieldIndex: (path)  
     - parameter needReCalculate: (query)  (optional, default to false)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPivotTablesDeleteWorksheetPivotTableFilterWithRequestBuilder(name: String, sheetName: String, pivotTableIndex: Int32, fieldIndex: Int32, needReCalculate: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{fieldIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivotTableIndexPreEscape = "\(pivotTableIndex)"
        let pivotTableIndexPostEscape = pivotTableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivotTableIndex}", with: pivotTableIndexPostEscape, options: .literal, range: nil)
        let fieldIndexPreEscape = "\(fieldIndex)"
        let fieldIndexPostEscape = fieldIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fieldIndex}", with: fieldIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "needReCalculate": needReCalculate, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     delete all pivot filters for piovt table
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter needReCalculate: (query)  (optional, default to false)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesDeleteWorksheetPivotTableFilters(name: String, sheetName: String, pivotTableIndex: Int32, needReCalculate: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesDeleteWorksheetPivotTableFiltersWithRequestBuilder(name: name, sheetName: sheetName, pivotTableIndex: pivotTableIndex, needReCalculate: needReCalculate, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     delete all pivot filters for piovt table
     - DELETE /cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter needReCalculate: (query)  (optional, default to false)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPivotTablesDeleteWorksheetPivotTableFiltersWithRequestBuilder(name: String, sheetName: String, pivotTableIndex: Int32, needReCalculate: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivotTableIndexPreEscape = "\(pivotTableIndex)"
        let pivotTableIndexPostEscape = pivotTableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivotTableIndex}", with: pivotTableIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "needReCalculate": needReCalculate, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete worksheet pivot tables
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesDeleteWorksheetPivotTables(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesDeleteWorksheetPivotTablesWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete worksheet pivot tables
     - DELETE /cells/{name}/worksheets/{sheetName}/pivottables
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPivotTablesDeleteWorksheetPivotTablesWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get pivot field into into pivot table
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivotTableIndex: (path) Pivot table index 
     - parameter pivotFieldIndex: (query) The field index in the base fields. 
     - parameter pivotFieldType: (query) The fields area type. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesGetPivotTableField(name: String, sheetName: String, pivotTableIndex: Int32, pivotFieldIndex: Int32, pivotFieldType: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: PivotFieldResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesGetPivotTableFieldWithRequestBuilder(name: name, sheetName: sheetName, pivotTableIndex: pivotTableIndex, pivotFieldIndex: pivotFieldIndex, pivotFieldType: pivotFieldType, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get pivot field into into pivot table
     - GET /cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivotTableIndex: (path) Pivot table index 
     - parameter pivotFieldIndex: (query) The field index in the base fields. 
     - parameter pivotFieldType: (query) The fields area type. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<PivotFieldResponse> 
     */
    open class func cellsPivotTablesGetPivotTableFieldWithRequestBuilder(name: String, sheetName: String, pivotTableIndex: Int32, pivotFieldIndex: Int32, pivotFieldType: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<PivotFieldResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivotTableIndexPreEscape = "\(pivotTableIndex)"
        let pivotTableIndexPostEscape = pivotTableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivotTableIndex}", with: pivotTableIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pivotFieldIndex": pivotFieldIndex.encodeToJSON(), 
            "pivotFieldType": pivotFieldType, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<PivotFieldResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get worksheet pivottable info by index.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivottableIndex: (path)  
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesGetWorksheetPivotTable(name: String, sheetName: String, pivottableIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: PivotTableResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesGetWorksheetPivotTableWithRequestBuilder(name: name, sheetName: sheetName, pivottableIndex: pivottableIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get worksheet pivottable info by index.
     - GET /cells/{name}/worksheets/{sheetName}/pivottables/{pivottableIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivottableIndex: (path)  
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<PivotTableResponse> 
     */
    open class func cellsPivotTablesGetWorksheetPivotTableWithRequestBuilder(name: String, sheetName: String, pivottableIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<PivotTableResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivottableIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivottableIndexPreEscape = "\(pivottableIndex)"
        let pivottableIndexPostEscape = pivottableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivottableIndex}", with: pivottableIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<PivotTableResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter filterIndex: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesGetWorksheetPivotTableFilter(name: String, sheetName: String, pivotTableIndex: Int32, filterIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: PivotFilterResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesGetWorksheetPivotTableFilterWithRequestBuilder(name: name, sheetName: sheetName, pivotTableIndex: pivotTableIndex, filterIndex: filterIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{filterIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter filterIndex: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<PivotFilterResponse> 
     */
    open class func cellsPivotTablesGetWorksheetPivotTableFilterWithRequestBuilder(name: String, sheetName: String, pivotTableIndex: Int32, filterIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<PivotFilterResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{filterIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivotTableIndexPreEscape = "\(pivotTableIndex)"
        let pivotTableIndexPostEscape = pivotTableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivotTableIndex}", with: pivotTableIndexPostEscape, options: .literal, range: nil)
        let filterIndexPreEscape = "\(filterIndex)"
        let filterIndexPostEscape = filterIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{filterIndex}", with: filterIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<PivotFilterResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesGetWorksheetPivotTableFilters(name: String, sheetName: String, pivotTableIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: PivotFiltersResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesGetWorksheetPivotTableFiltersWithRequestBuilder(name: name, sheetName: sheetName, pivotTableIndex: pivotTableIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<PivotFiltersResponse> 
     */
    open class func cellsPivotTablesGetWorksheetPivotTableFiltersWithRequestBuilder(name: String, sheetName: String, pivotTableIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<PivotFiltersResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivotTableIndexPreEscape = "\(pivotTableIndex)"
        let pivotTableIndexPostEscape = pivotTableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivotTableIndex}", with: pivotTableIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<PivotFiltersResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get worksheet pivottables info.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesGetWorksheetPivotTables(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: PivotTablesResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesGetWorksheetPivotTablesWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get worksheet pivottables info.
     - GET /cells/{name}/worksheets/{sheetName}/pivottables
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<PivotTablesResponse> 
     */
    open class func cellsPivotTablesGetWorksheetPivotTablesWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<PivotTablesResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<PivotTablesResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update cell style for pivot table
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivotTableIndex: (path) Pivot table index 
     - parameter column: (query)  
     - parameter row: (query)  
     - parameter style: (body) Style dto in request body. (optional)
     - parameter needReCalculate: (query)  (optional, default to false)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesPostPivotTableCellStyle(name: String, sheetName: String, pivotTableIndex: Int32, column: Int32, row: Int32, style: Style? = nil, needReCalculate: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesPostPivotTableCellStyleWithRequestBuilder(name: name, sheetName: sheetName, pivotTableIndex: pivotTableIndex, column: column, row: row, style: style, needReCalculate: needReCalculate, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update cell style for pivot table
     - POST /cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Format
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivotTableIndex: (path) Pivot table index 
     - parameter column: (query)  
     - parameter row: (query)  
     - parameter style: (body) Style dto in request body. (optional)
     - parameter needReCalculate: (query)  (optional, default to false)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPivotTablesPostPivotTableCellStyleWithRequestBuilder(name: String, sheetName: String, pivotTableIndex: Int32, column: Int32, row: Int32, style: Style? = nil, needReCalculate: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Format"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivotTableIndexPreEscape = "\(pivotTableIndex)"
        let pivotTableIndexPostEscape = pivotTableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivotTableIndex}", with: pivotTableIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: style)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "column": column.encodeToJSON(), 
            "row": row.encodeToJSON(), 
            "needReCalculate": needReCalculate, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter pivotFieldType: (query)  
     - parameter fieldIndex: (query)  
     - parameter itemIndex: (query)  
     - parameter isHide: (query)  
     - parameter needReCalculate: (query)  (optional, default to false)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesPostPivotTableFieldHideItem(name: String, sheetName: String, pivotTableIndex: Int32, pivotFieldType: String, fieldIndex: Int32, itemIndex: Int32, isHide: Bool, needReCalculate: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesPostPivotTableFieldHideItemWithRequestBuilder(name: name, sheetName: sheetName, pivotTableIndex: pivotTableIndex, pivotFieldType: pivotFieldType, fieldIndex: fieldIndex, itemIndex: itemIndex, isHide: isHide, needReCalculate: needReCalculate, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Hide
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter pivotFieldType: (query)  
     - parameter fieldIndex: (query)  
     - parameter itemIndex: (query)  
     - parameter isHide: (query)  
     - parameter needReCalculate: (query)  (optional, default to false)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPivotTablesPostPivotTableFieldHideItemWithRequestBuilder(name: String, sheetName: String, pivotTableIndex: Int32, pivotFieldType: String, fieldIndex: Int32, itemIndex: Int32, isHide: Bool, needReCalculate: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Hide"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivotTableIndexPreEscape = "\(pivotTableIndex)"
        let pivotTableIndexPostEscape = pivotTableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivotTableIndex}", with: pivotTableIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pivotFieldType": pivotFieldType, 
            "fieldIndex": fieldIndex.encodeToJSON(), 
            "itemIndex": itemIndex.encodeToJSON(), 
            "isHide": isHide, 
            "needReCalculate": needReCalculate, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter fieldIndex: (query)  
     - parameter from: (query)  
     - parameter to: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesPostPivotTableFieldMoveTo(name: String, sheetName: String, pivotTableIndex: Int32, fieldIndex: Int32, from: String, to: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesPostPivotTableFieldMoveToWithRequestBuilder(name: name, sheetName: sheetName, pivotTableIndex: pivotTableIndex, fieldIndex: fieldIndex, from: from, to: to, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Move
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter fieldIndex: (query)  
     - parameter from: (query)  
     - parameter to: (query)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPivotTablesPostPivotTableFieldMoveToWithRequestBuilder(name: String, sheetName: String, pivotTableIndex: Int32, fieldIndex: Int32, from: String, to: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Move"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivotTableIndexPreEscape = "\(pivotTableIndex)"
        let pivotTableIndexPostEscape = pivotTableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivotTableIndex}", with: pivotTableIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fieldIndex": fieldIndex.encodeToJSON(), 
            "from": from, 
            "to": to, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update style for pivot table
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivotTableIndex: (path) Pivot table index 
     - parameter style: (body) Style dto in request body. (optional)
     - parameter needReCalculate: (query)  (optional, default to false)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesPostPivotTableStyle(name: String, sheetName: String, pivotTableIndex: Int32, style: Style? = nil, needReCalculate: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesPostPivotTableStyleWithRequestBuilder(name: name, sheetName: sheetName, pivotTableIndex: pivotTableIndex, style: style, needReCalculate: needReCalculate, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update style for pivot table
     - POST /cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/FormatAll
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivotTableIndex: (path) Pivot table index 
     - parameter style: (body) Style dto in request body. (optional)
     - parameter needReCalculate: (query)  (optional, default to false)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPivotTablesPostPivotTableStyleWithRequestBuilder(name: String, sheetName: String, pivotTableIndex: Int32, style: Style? = nil, needReCalculate: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/FormatAll"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivotTableIndexPreEscape = "\(pivotTableIndex)"
        let pivotTableIndexPostEscape = pivotTableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivotTableIndex}", with: pivotTableIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: style)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "needReCalculate": needReCalculate, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Calculates pivottable's data to cells.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivotTableIndex: (path) Pivot table index 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesPostWorksheetPivotTableCalculate(name: String, sheetName: String, pivotTableIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesPostWorksheetPivotTableCalculateWithRequestBuilder(name: name, sheetName: sheetName, pivotTableIndex: pivotTableIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Calculates pivottable's data to cells.
     - POST /cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Calculate
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivotTableIndex: (path) Pivot table index 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPivotTablesPostWorksheetPivotTableCalculateWithRequestBuilder(name: String, sheetName: String, pivotTableIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Calculate"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivotTableIndexPreEscape = "\(pivotTableIndex)"
        let pivotTableIndexPostEscape = pivotTableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivotTableIndex}", with: pivotTableIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter row: (query)  (optional)
     - parameter column: (query)  (optional)
     - parameter destCellName: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesPostWorksheetPivotTableMove(name: String, sheetName: String, pivotTableIndex: Int32, row: Int32? = nil, column: Int32? = nil, destCellName: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesPostWorksheetPivotTableMoveWithRequestBuilder(name: name, sheetName: sheetName, pivotTableIndex: pivotTableIndex, row: row, column: column, destCellName: destCellName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Move
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter row: (query)  (optional)
     - parameter column: (query)  (optional)
     - parameter destCellName: (query)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPivotTablesPostWorksheetPivotTableMoveWithRequestBuilder(name: String, sheetName: String, pivotTableIndex: Int32, row: Int32? = nil, column: Int32? = nil, destCellName: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Move"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivotTableIndexPreEscape = "\(pivotTableIndex)"
        let pivotTableIndexPostEscape = pivotTableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivotTableIndex}", with: pivotTableIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "row": row?.encodeToJSON(), 
            "column": column?.encodeToJSON(), 
            "destCellName": destCellName, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add pivot field into into pivot table
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivotTableIndex: (path) Pivot table index 
     - parameter pivotFieldType: (query) The fields area type. 
     - parameter request: (body) Dto that conrains field indexes (optional)
     - parameter needReCalculate: (query)  (optional, default to false)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesPutPivotTableField(name: String, sheetName: String, pivotTableIndex: Int32, pivotFieldType: String, request: PivotTableFieldRequest? = nil, needReCalculate: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesPutPivotTableFieldWithRequestBuilder(name: name, sheetName: sheetName, pivotTableIndex: pivotTableIndex, pivotFieldType: pivotFieldType, request: request, needReCalculate: needReCalculate, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add pivot field into into pivot table
     - PUT /cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter pivotTableIndex: (path) Pivot table index 
     - parameter pivotFieldType: (query) The fields area type. 
     - parameter request: (body) Dto that conrains field indexes (optional)
     - parameter needReCalculate: (query)  (optional, default to false)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPivotTablesPutPivotTableFieldWithRequestBuilder(name: String, sheetName: String, pivotTableIndex: Int32, pivotFieldType: String, request: PivotTableFieldRequest? = nil, needReCalculate: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivotTableIndexPreEscape = "\(pivotTableIndex)"
        let pivotTableIndexPostEscape = pivotTableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivotTableIndex}", with: pivotTableIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pivotFieldType": pivotFieldType, 
            "needReCalculate": needReCalculate, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add a pivot table into worksheet.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter request: (body) CreatePivotTableRequest dto in request body. (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter sourceData: (query) The data for the new PivotTable cache. (optional)
     - parameter destCellName: (query) The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     - parameter tableName: (query) The name of the new PivotTable report. (optional)
     - parameter useSameSource: (query) Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesPutWorksheetPivotTable(name: String, sheetName: String, request: CreatePivotTableRequest? = nil, folder: String? = nil, storage: String? = nil, sourceData: String? = nil, destCellName: String? = nil, tableName: String? = nil, useSameSource: Bool? = nil, completion: @escaping ((_ data: PivotTableResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesPutWorksheetPivotTableWithRequestBuilder(name: name, sheetName: sheetName, request: request, folder: folder, storage: storage, sourceData: sourceData, destCellName: destCellName, tableName: tableName, useSameSource: useSameSource).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a pivot table into worksheet.
     - PUT /cells/{name}/worksheets/{sheetName}/pivottables
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter request: (body) CreatePivotTableRequest dto in request body. (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter sourceData: (query) The data for the new PivotTable cache. (optional)
     - parameter destCellName: (query) The cell in the upper-left corner of the PivotTable report&#39;s destination range. (optional)
     - parameter tableName: (query) The name of the new PivotTable report. (optional)
     - parameter useSameSource: (query) Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory. (optional)

     - returns: RequestBuilder<PivotTableResponse> 
     */
    open class func cellsPivotTablesPutWorksheetPivotTableWithRequestBuilder(name: String, sheetName: String, request: CreatePivotTableRequest? = nil, folder: String? = nil, storage: String? = nil, sourceData: String? = nil, destCellName: String? = nil, tableName: String? = nil, useSameSource: Bool? = nil) -> RequestBuilder<PivotTableResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage, 
            "sourceData": sourceData, 
            "destCellName": destCellName, 
            "tableName": tableName, 
            "useSameSource": useSameSource
        ])

        let requestBuilder: RequestBuilder<PivotTableResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add pivot filter for piovt table index
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter filter: (body)  (optional)
     - parameter needReCalculate: (query)  (optional, default to false)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPivotTablesPutWorksheetPivotTableFilter(name: String, sheetName: String, pivotTableIndex: Int32, filter: PivotFilter? = nil, needReCalculate: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPivotTablesPutWorksheetPivotTableFilterWithRequestBuilder(name: name, sheetName: sheetName, pivotTableIndex: pivotTableIndex, filter: filter, needReCalculate: needReCalculate, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add pivot filter for piovt table index
     - PUT /cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter pivotTableIndex: (path)  
     - parameter filter: (body)  (optional)
     - parameter needReCalculate: (query)  (optional, default to false)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPivotTablesPutWorksheetPivotTableFilterWithRequestBuilder(name: String, sheetName: String, pivotTableIndex: Int32, filter: PivotFilter? = nil, needReCalculate: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let pivotTableIndexPreEscape = "\(pivotTableIndex)"
        let pivotTableIndexPostEscape = pivotTableIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pivotTableIndex}", with: pivotTableIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filter)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "needReCalculate": needReCalculate, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
