//
// CellsChartAreaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsChartAreaAPI {
    /**
     Get chart area info.
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartAreaGetChartArea(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ChartAreaResponse?,_ error: Error?) -> Void)) {
        cellsChartAreaGetChartAreaWithRequestBuilder(name: name, sheetName: sheetName, chartIndex: chartIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get chart area info.
     - GET /cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ChartAreaResponse> 
     */
    open class func cellsChartAreaGetChartAreaWithRequestBuilder(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ChartAreaResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let chartIndexPreEscape = "\(chartIndex)"
        let chartIndexPostEscape = chartIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{chartIndex}", with: chartIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ChartAreaResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get chart area border info.
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartAreaGetChartAreaBorder(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: LineResponse?,_ error: Error?) -> Void)) {
        cellsChartAreaGetChartAreaBorderWithRequestBuilder(name: name, sheetName: sheetName, chartIndex: chartIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get chart area border info.
     - GET /cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/border
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<LineResponse> 
     */
    open class func cellsChartAreaGetChartAreaBorderWithRequestBuilder(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<LineResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/border"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let chartIndexPreEscape = "\(chartIndex)"
        let chartIndexPostEscape = chartIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{chartIndex}", with: chartIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<LineResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get chart area fill format info.
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsChartAreaGetChartAreaFillFormat(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: FillFormatResponse?,_ error: Error?) -> Void)) {
        cellsChartAreaGetChartAreaFillFormatWithRequestBuilder(name: name, sheetName: sheetName, chartIndex: chartIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get chart area fill format info.
     - GET /cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/fillFormat
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter chartIndex: (path) The chart index. 
     - parameter folder: (query) Workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<FillFormatResponse> 
     */
    open class func cellsChartAreaGetChartAreaFillFormatWithRequestBuilder(name: String, sheetName: String, chartIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<FillFormatResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/charts/{chartIndex}/chartArea/fillFormat"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let chartIndexPreEscape = "\(chartIndex)"
        let chartIndexPostEscape = chartIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{chartIndex}", with: chartIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<FillFormatResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
