//
// CellsWorkbookAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsWorkbookAPI {
    /**
     Decrypt document.
     
     - parameter name: (path) The document name. 
     - parameter encryption: (body) Encryption settings, only password can be specified. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookDeleteDecryptDocument(name: String, encryption: WorkbookEncryptionRequest? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookDeleteDecryptDocumentWithRequestBuilder(name: name, encryption: encryption, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Decrypt document.
     - DELETE /cells/{name}/encryption
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The document name. 
     - parameter encryption: (body) Encryption settings, only password can be specified. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorkbookDeleteDecryptDocumentWithRequestBuilder(name: String, encryption: WorkbookEncryptionRequest? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/encryption"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: encryption)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Unprotect document from changes.
     
     - parameter name: (path) The document name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookDeleteDocumentUnprotectFromChanges(name: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookDeleteDocumentUnprotectFromChangesWithRequestBuilder(name: name, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Unprotect document from changes.
     - DELETE /cells/{name}/writeProtection
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The document name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorkbookDeleteDocumentUnprotectFromChangesWithRequestBuilder(name: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/writeProtection"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unprotect document.
     
     - parameter name: (path) The document name. 
     - parameter protection: (body) Protection settings, only password can be specified. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookDeleteUnprotectDocument(name: String, protection: WorkbookProtectionRequest? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookDeleteUnprotectDocumentWithRequestBuilder(name: name, protection: protection, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Unprotect document.
     - DELETE /cells/{name}/protection
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The document name. 
     - parameter protection: (body) Protection settings, only password can be specified. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorkbookDeleteUnprotectDocumentWithRequestBuilder(name: String, protection: WorkbookProtectionRequest? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/protection"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: protection)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Clean workbook's names.
     
     - parameter name: (path) The workbook name. 
     - parameter nameName: (path) The name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookDeleteWorkbookName(name: String, nameName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookDeleteWorkbookNameWithRequestBuilder(name: name, nameName: nameName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Clean workbook's names.
     - DELETE /cells/{name}/names/{nameName}
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter nameName: (path) The name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorkbookDeleteWorkbookNameWithRequestBuilder(name: String, nameName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/names/{nameName}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let nameNamePreEscape = "\(nameName)"
        let nameNamePostEscape = nameNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nameName}", with: nameNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Clean workbook's names.
     
     - parameter name: (path) The workbook name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookDeleteWorkbookNames(name: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookDeleteWorkbookNamesWithRequestBuilder(name: name, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Clean workbook's names.
     - DELETE /cells/{name}/names
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorkbookDeleteWorkbookNamesWithRequestBuilder(name: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/names"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read workbook info or export.
     
     - parameter name: (path) The document name. 
     - parameter password: (query) The document password. (optional)
     - parameter format: (query) The exported file format. (optional)
     - parameter isAutoFit: (query) Set document rows to be autofit. (optional, default to false)
     - parameter onlySaveTable: (query) Only save table data. (optional, default to false)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter outPath: (query) The document output folder. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookGetWorkbook(name: String, password: String? = nil, format: String? = nil, isAutoFit: Bool? = nil, onlySaveTable: Bool? = nil, folder: String? = nil, storage: String? = nil, outPath: String? = nil, completion: @escaping ((_ data: AnyObject?,_ error: Error?) -> Void)) {
        cellsWorkbookGetWorkbookWithRequestBuilder(name: name, password: password, format: format, isAutoFit: isAutoFit, onlySaveTable: onlySaveTable, folder: folder, storage: storage, outPath: outPath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read workbook info or export.
     - GET /cells/{name}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The document name. 
     - parameter password: (query) The document password. (optional)
     - parameter format: (query) The exported file format. (optional)
     - parameter isAutoFit: (query) Set document rows to be autofit. (optional, default to false)
     - parameter onlySaveTable: (query) Only save table data. (optional, default to false)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter outPath: (query) The document output folder. (optional)

     - returns: RequestBuilder<NSURL> 
     */
    open class func cellsWorkbookGetWorkbookWithRequestBuilder(name: String, password: String? = nil, format: String? = nil, isAutoFit: Bool? = nil, onlySaveTable: Bool? = nil, folder: String? = nil, storage: String? = nil, outPath: String? = nil) -> RequestBuilder<AnyObject> {
        var path = "/cells/{name}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "password": password, 
            "format": format, 
            "isAutoFit": isAutoFit, 
            "onlySaveTable": onlySaveTable, 
            "folder": folder, 
            "storage": storage, 
            "outPath": outPath
        ])

        let requestBuilder: RequestBuilder<AnyObject>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read workbook default style info.
     
     - parameter name: (path) The workbook name. 
     - parameter folder: (query) The document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookGetWorkbookDefaultStyle(name: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: StyleResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookGetWorkbookDefaultStyleWithRequestBuilder(name: name, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read workbook default style info.
     - GET /cells/{name}/defaultstyle
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter folder: (query) The document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<StyleResponse> 
     */
    open class func cellsWorkbookGetWorkbookDefaultStyleWithRequestBuilder(name: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<StyleResponse> {
        var path = "/cells/{name}/defaultstyle"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<StyleResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read workbook's name.
     
     - parameter name: (path) The workbook name. 
     - parameter nameName: (path) The name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookGetWorkbookName(name: String, nameName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: NameResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookGetWorkbookNameWithRequestBuilder(name: name, nameName: nameName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read workbook's name.
     - GET /cells/{name}/names/{nameName}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter nameName: (path) The name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<NameResponse> 
     */
    open class func cellsWorkbookGetWorkbookNameWithRequestBuilder(name: String, nameName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<NameResponse> {
        var path = "/cells/{name}/names/{nameName}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let nameNamePreEscape = "\(nameName)"
        let nameNamePostEscape = nameNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nameName}", with: nameNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<NameResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get workbook's name value.
     
     - parameter name: (path) The workbook name. 
     - parameter nameName: (path) The name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookGetWorkbookNameValue(name: String, nameName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: RangeValueResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookGetWorkbookNameValueWithRequestBuilder(name: name, nameName: nameName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get workbook's name value.
     - GET /cells/{name}/names/{nameName}/value
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter nameName: (path) The name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<RangeValueResponse> 
     */
    open class func cellsWorkbookGetWorkbookNameValueWithRequestBuilder(name: String, nameName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<RangeValueResponse> {
        var path = "/cells/{name}/names/{nameName}/value"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let nameNamePreEscape = "\(nameName)"
        let nameNamePostEscape = nameNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nameName}", with: nameNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<RangeValueResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read workbook's names.
     
     - parameter name: (path) The workbook name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookGetWorkbookNames(name: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: NamesResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookGetWorkbookNamesWithRequestBuilder(name: name, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read workbook's names.
     - GET /cells/{name}/names
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<NamesResponse> 
     */
    open class func cellsWorkbookGetWorkbookNamesWithRequestBuilder(name: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<NamesResponse> {
        var path = "/cells/{name}/names"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<NamesResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Workbook Settings DTO
     
     - parameter name: (path) Document name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookGetWorkbookSettings(name: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: WorkbookSettingsResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookGetWorkbookSettingsWithRequestBuilder(name: name, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Workbook Settings DTO
     - GET /cells/{name}/settings
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<WorkbookSettingsResponse> 
     */
    open class func cellsWorkbookGetWorkbookSettingsWithRequestBuilder(name: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<WorkbookSettingsResponse> {
        var path = "/cells/{name}/settings"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<WorkbookSettingsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read workbook's text items.
     
     - parameter name: (path) The workbook name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookGetWorkbookTextItems(name: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: TextItemsResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookGetWorkbookTextItemsWithRequestBuilder(name: name, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read workbook's text items.
     - GET /cells/{name}/textItems
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<TextItemsResponse> 
     */
    open class func cellsWorkbookGetWorkbookTextItemsWithRequestBuilder(name: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<TextItemsResponse> {
        var path = "/cells/{name}/textItems"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<TextItemsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Autofit workbook rows.
     
     - parameter name: (path) Document name. 
     - parameter autoFitterOptions: (body) Auto Fitter Options. (optional)
     - parameter startRow: (query) Start row. (optional)
     - parameter endRow: (query) End row. (optional)
     - parameter onlyAuto: (query) Only auto. (optional, default to false)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookPostAutofitWorkbookRows(name: String, autoFitterOptions: AutoFitterOptions? = nil, startRow: Int32? = nil, endRow: Int32? = nil, onlyAuto: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookPostAutofitWorkbookRowsWithRequestBuilder(name: name, autoFitterOptions: autoFitterOptions, startRow: startRow, endRow: endRow, onlyAuto: onlyAuto, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Autofit workbook rows.
     - POST /cells/{name}/autofitrows
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Document name. 
     - parameter autoFitterOptions: (body) Auto Fitter Options. (optional)
     - parameter startRow: (query) Start row. (optional)
     - parameter endRow: (query) End row. (optional)
     - parameter onlyAuto: (query) Only auto. (optional, default to false)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorkbookPostAutofitWorkbookRowsWithRequestBuilder(name: String, autoFitterOptions: AutoFitterOptions? = nil, startRow: Int32? = nil, endRow: Int32? = nil, onlyAuto: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/autofitrows"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: autoFitterOptions)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startRow": startRow?.encodeToJSON(), 
            "endRow": endRow?.encodeToJSON(), 
            "onlyAuto": onlyAuto, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Encript document.
     
     - parameter name: (path) The document name. 
     - parameter encryption: (body) Encryption parameters. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookPostEncryptDocument(name: String, encryption: WorkbookEncryptionRequest? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookPostEncryptDocumentWithRequestBuilder(name: name, encryption: encryption, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Encript document.
     - POST /cells/{name}/encryption
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The document name. 
     - parameter encryption: (body) Encryption parameters. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorkbookPostEncryptDocumentWithRequestBuilder(name: String, encryption: WorkbookEncryptionRequest? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/encryption"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: encryption)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter name: (path)  
     - parameter importdata: (body)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookPostImportData(name: String, importdata: ImportOption?, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookPostImportDataWithRequestBuilder(name: name, importdata: importdata, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /cells/{name}/importdata
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter importdata: (body)  
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorkbookPostImportDataWithRequestBuilder<T:Encodable>(name: String, importdata: T?, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/importdata"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: importdata)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Protect document.
     
     - parameter name: (path) The document name. 
     - parameter protection: (body) The protection settings. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookPostProtectDocument(name: String, protection: WorkbookProtectionRequest? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookPostProtectDocumentWithRequestBuilder(name: name, protection: protection, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Protect document.
     - POST /cells/{name}/protection
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The document name. 
     - parameter protection: (body) The protection settings. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorkbookPostProtectDocumentWithRequestBuilder(name: String, protection: WorkbookProtectionRequest? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/protection"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: protection)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Calculate all formulas in workbook.
     
     - parameter name: (path) Document name. 
     - parameter options: (body) Calculation Options. (optional)
     - parameter ignoreError: (query) ignore Error. (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookPostWorkbookCalculateFormula(name: String, options: CalculationOptions? = nil, ignoreError: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookPostWorkbookCalculateFormulaWithRequestBuilder(name: name, options: options, ignoreError: ignoreError, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Calculate all formulas in workbook.
     - POST /cells/{name}/calculateformula
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Document name. 
     - parameter options: (body) Calculation Options. (optional)
     - parameter ignoreError: (query) ignore Error. (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorkbookPostWorkbookCalculateFormulaWithRequestBuilder(name: String, options: CalculationOptions? = nil, ignoreError: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/calculateformula"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: options)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ignoreError": ignoreError, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Smart marker processing result.
     
     - parameter name: (path) The workbook name. 
     - parameter xmlFile: (query) The xml file full path, if empty the data is read from request body. (optional)
     - parameter folder: (query) The workbook folder full path. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter outPath: (query) Path to save result (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookPostWorkbookGetSmartMarkerResult(name: String, xmlFile: String? = nil, folder: String? = nil, storage: String? = nil, outPath: String? = nil, completion: @escaping ((_ data: AnyObject?,_ error: Error?) -> Void)) {
        cellsWorkbookPostWorkbookGetSmartMarkerResultWithRequestBuilder(name: name, xmlFile: xmlFile, folder: folder, storage: storage, outPath: outPath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Smart marker processing result.
     - POST /cells/{name}/smartmarker
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter xmlFile: (query) The xml file full path, if empty the data is read from request body. (optional)
     - parameter folder: (query) The workbook folder full path. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter outPath: (query) Path to save result (optional)

     - returns: RequestBuilder<NSURL> 
     */
    open class func cellsWorkbookPostWorkbookGetSmartMarkerResultWithRequestBuilder(name: String, xmlFile: String? = nil, folder: String? = nil, storage: String? = nil, outPath: String? = nil) -> RequestBuilder<AnyObject> {
        var path = "/cells/{name}/smartmarker"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "xmlFile": xmlFile, 
            "folder": folder, 
            "storage": storage, 
            "outPath": outPath
        ])

        let requestBuilder: RequestBuilder<AnyObject>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Workbook setting 
     
     - parameter name: (path) Document name. 
     - parameter settings: (body) Workbook Setting DTO (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookPostWorkbookSettings(name: String, settings: WorkbookSettings? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookPostWorkbookSettingsWithRequestBuilder(name: name, settings: settings, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Workbook setting 
     - POST /cells/{name}/settings
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Document name. 
     - parameter settings: (body) Workbook Setting DTO (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorkbookPostWorkbookSettingsWithRequestBuilder(name: String, settings: WorkbookSettings? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/settings"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: settings)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Split workbook.
     
     - parameter name: (path) The workbook name. 
     - parameter format: (query) Split format. (optional)
     - parameter from: (query) Start worksheet index. (optional, default to 0)
     - parameter to: (query) End worksheet index. (optional, default to 0)
     - parameter horizontalResolution: (query) Image horizontal resolution. (optional, default to 0)
     - parameter verticalResolution: (query) Image vertical resolution. (optional, default to 0)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookPostWorkbookSplit(name: String, format: String? = nil, from: Int32? = nil, to: Int32? = nil, horizontalResolution: Int32? = nil, verticalResolution: Int32? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SplitResultResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookPostWorkbookSplitWithRequestBuilder(name: name, format: format, from: from, to: to, horizontalResolution: horizontalResolution, verticalResolution: verticalResolution, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Split workbook.
     - POST /cells/{name}/split
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter format: (query) Split format. (optional)
     - parameter from: (query) Start worksheet index. (optional, default to 0)
     - parameter to: (query) End worksheet index. (optional, default to 0)
     - parameter horizontalResolution: (query) Image horizontal resolution. (optional, default to 0)
     - parameter verticalResolution: (query) Image vertical resolution. (optional, default to 0)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SplitResultResponse> 
     */
    open class func cellsWorkbookPostWorkbookSplitWithRequestBuilder(name: String, format: String? = nil, from: Int32? = nil, to: Int32? = nil, horizontalResolution: Int32? = nil, verticalResolution: Int32? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SplitResultResponse> {
        var path = "/cells/{name}/split"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format, 
            "from": from?.encodeToJSON(), 
            "to": to?.encodeToJSON(), 
            "horizontalResolution": horizontalResolution?.encodeToJSON(), 
            "verticalResolution": verticalResolution?.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SplitResultResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Merge workbooks.
     
     - parameter name: (path) Workbook name. 
     - parameter mergeWith: (query) The workbook to merge with. 
     - parameter folder: (query) Source workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookPostWorkbooksMerge(name: String, mergeWith: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: WorkbookResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookPostWorkbooksMergeWithRequestBuilder(name: name, mergeWith: mergeWith, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Merge workbooks.
     - POST /cells/{name}/merge
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Workbook name. 
     - parameter mergeWith: (query) The workbook to merge with. 
     - parameter folder: (query) Source workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<WorkbookResponse> 
     */
    open class func cellsWorkbookPostWorkbooksMergeWithRequestBuilder(name: String, mergeWith: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<WorkbookResponse> {
        var path = "/cells/{name}/merge"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "mergeWith": mergeWith, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<WorkbookResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Replace text.
     
     - parameter name: (path) Document name. 
     - parameter oldValue: (query) The old value. 
     - parameter newValue: (query) The new value. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookPostWorkbooksTextReplace(name: String, oldValue: String, newValue: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: WorkbookReplaceResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookPostWorkbooksTextReplaceWithRequestBuilder(name: name, oldValue: oldValue, newValue: newValue, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Replace text.
     - POST /cells/{name}/replaceText
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter oldValue: (query) The old value. 
     - parameter newValue: (query) The new value. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<WorkbookReplaceResponse> 
     */
    open class func cellsWorkbookPostWorkbooksTextReplaceWithRequestBuilder(name: String, oldValue: String, newValue: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<WorkbookReplaceResponse> {
        var path = "/cells/{name}/replaceText"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "oldValue": oldValue, 
            "newValue": newValue, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<WorkbookReplaceResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search text.
     
     - parameter name: (path) Document name. 
     - parameter text: (query) Text sample. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookPostWorkbooksTextSearch(name: String, text: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: TextItemsResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookPostWorkbooksTextSearchWithRequestBuilder(name: name, text: text, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search text.
     - POST /cells/{name}/findText
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter text: (query) Text sample. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<TextItemsResponse> 
     */
    open class func cellsWorkbookPostWorkbooksTextSearchWithRequestBuilder(name: String, text: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<TextItemsResponse> {
        var path = "/cells/{name}/findText"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "text": text, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<TextItemsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Convert workbook from request content to some format.
     
     - parameter workbook: (body)  
     - parameter format: (query) The format to convert. (optional)
     - parameter password: (query) The workbook password. (optional)
     - parameter outPath: (query) Path to save result (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookPutConvertWorkbook(workbook: Data, format: String? = nil, password: String? = nil, outPath: String? = nil, completion: @escaping ((_ data: AnyObject?,_ error: Error?) -> Void)) {
        cellsWorkbookPutConvertWorkbookWithRequestBuilder(workbook: workbook, format: format, password: password, outPath: outPath).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Convert workbook from request content to some format.
     - PUT /cells/convert
     - examples: [{contentType=application/json, example=""}]
     
     - parameter workbook: (body)  
     - parameter format: (query) The format to convert. (optional)
     - parameter password: (query) The workbook password. (optional)
     - parameter outPath: (query) Path to save result (optional)

     - returns: RequestBuilder<NSURL> 
     */
    open class func cellsWorkbookPutConvertWorkbookWithRequestBuilder(workbook: Data, format: String? = nil, password: String? = nil, outPath: String? = nil) -> RequestBuilder<AnyObject> {
        let path = "/cells/convert"
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: workbook)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format, 
            "password": password, 
            "outPath": outPath
        ])

        let requestBuilder: RequestBuilder<AnyObject>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Protect document from changes.
     
     - parameter name: (path) Document name. 
     - parameter password: (body) Modification password. (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookPutDocumentProtectFromChanges(name: String, password: PasswordRequest? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookPutDocumentProtectFromChangesWithRequestBuilder(name: name, password: password, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Protect document from changes.
     - PUT /cells/{name}/writeProtection
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Document name. 
     - parameter password: (body) Modification password. (optional)
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsWorkbookPutDocumentProtectFromChangesWithRequestBuilder(name: String, password: PasswordRequest? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/writeProtection"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: password)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create new workbook using deferent methods.
     
     - parameter name: (path) The new document name. 
     - parameter templateFile: (query) The template file, if the data not provided default workbook is created. (optional)
     - parameter dataFile: (query) Smart marker data file, if the data not provided the request content is checked for the data. (optional)
     - parameter folder: (query) The new document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsWorkbookPutWorkbookCreate(name: String, templateFile: String? = nil, dataFile: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: WorkbookResponse?,_ error: Error?) -> Void)) {
        cellsWorkbookPutWorkbookCreateWithRequestBuilder(name: name, templateFile: templateFile, dataFile: dataFile, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create new workbook using deferent methods.
     - PUT /cells/{name}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The new document name. 
     - parameter templateFile: (query) The template file, if the data not provided default workbook is created. (optional)
     - parameter dataFile: (query) Smart marker data file, if the data not provided the request content is checked for the data. (optional)
     - parameter folder: (query) The new document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<WorkbookResponse> 
     */
    open class func cellsWorkbookPutWorkbookCreateWithRequestBuilder(name: String, templateFile: String? = nil, dataFile: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<WorkbookResponse> {
        var path = "/cells/{name}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "templateFile": templateFile, 
            "dataFile": dataFile, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<WorkbookResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
