//
// CellsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CellsAPI {
    /**
     Delete worksheet columns.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter columnIndex: (path) The column index. 
     - parameter columns: (query) The columns. 
     - parameter updateReference: (query) The update reference. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsDeleteWorksheetColumns(name: String, sheetName: String, columnIndex: Int32, columns: Int32, updateReference: Bool, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ColumnsResponse?,_ error: Error?) -> Void)) {
        cellsDeleteWorksheetColumnsWithRequestBuilder(name: name, sheetName: sheetName, columnIndex: columnIndex, columns: columns, updateReference: updateReference, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete worksheet columns.
     - DELETE /cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter columnIndex: (path) The column index. 
     - parameter columns: (query) The columns. 
     - parameter updateReference: (query) The update reference. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ColumnsResponse> 
     */
    open class func cellsDeleteWorksheetColumnsWithRequestBuilder(name: String, sheetName: String, columnIndex: Int32, columns: Int32, updateReference: Bool, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ColumnsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let columnIndexPreEscape = "\(columnIndex)"
        let columnIndexPostEscape = columnIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{columnIndex}", with: columnIndexPostEscape, options: .literal, range: nil)

        let URLString = AsposeCellsCloudAPI.basePath + path
        
        //let parameters: [String:Any]? = nil
        let str = "Bearer " + AsposeCellsCloudAPI.accessToken!
        let parameters: [String:Any]? = nil/*[
            "name": name,
            "sheetName": sheetName,
            "columnIndex": columnIndex
                                         //"Authorization": str,
                                         //"Accept":"application/json",
                                         //"columns": columns,
                                         //"updateReference": updateReference,
                                         //"folder": folder,
                                         //"storage": storage
                                         ]
        */
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "columns": columns.encodeToJSON(), 
            "updateReference": updateReference, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ColumnsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete worksheet row.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet bame. 
     - parameter rowIndex: (path) The row index. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsDeleteWorksheetRow(name: String, sheetName: String, rowIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsDeleteWorksheetRowWithRequestBuilder(name: name, sheetName: sheetName, rowIndex: rowIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete worksheet row.
     - DELETE /cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet bame. 
     - parameter rowIndex: (path) The row index. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsDeleteWorksheetRowWithRequestBuilder(name: String, sheetName: String, rowIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let rowIndexPreEscape = "\(rowIndex)"
        let rowIndexPostEscape = rowIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{rowIndex}", with: rowIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete several worksheet rows.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet bame. 
     - parameter startrow: (query) The begin row index to be operated. 
     - parameter totalRows: (query) Number of rows to be operated. (optional, default to 1)
     - parameter updateReference: (query) Indicates if update references in other worksheets. (optional, default to true)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsDeleteWorksheetRows(name: String, sheetName: String, startrow: Int32, totalRows: Int32? = nil, updateReference: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsDeleteWorksheetRowsWithRequestBuilder(name: name, sheetName: sheetName, startrow: startrow, totalRows: totalRows, updateReference: updateReference, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete several worksheet rows.
     - DELETE /cells/{name}/worksheets/{sheetName}/cells/rows
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet bame. 
     - parameter startrow: (query) The begin row index to be operated. 
     - parameter totalRows: (query) Number of rows to be operated. (optional, default to 1)
     - parameter updateReference: (query) Indicates if update references in other worksheets. (optional, default to true)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsDeleteWorksheetRowsWithRequestBuilder(name: String, sheetName: String, startrow: Int32, totalRows: Int32? = nil, updateReference: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/rows"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startrow": startrow.encodeToJSON(), 
            "totalRows": totalRows?.encodeToJSON(), 
            "updateReference": updateReference, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read cell data by cell's name.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter cellOrMethodName: (path) The cell&#39;s or method name. (Method name like firstcell, endcell etc.) 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsGetWorksheetCell(name: String, sheetName: String, cellOrMethodName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: AnyObject?,_ error: Error?) -> Void)) {
        cellsGetWorksheetCellWithRequestBuilder(name: name, sheetName: sheetName, cellOrMethodName: cellOrMethodName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read cell data by cell's name.
     - GET /cells/{name}/worksheets/{sheetName}/cells/{cellOrMethodName}
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter cellOrMethodName: (path) The cell&#39;s or method name. (Method name like firstcell, endcell etc.) 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    open class func cellsGetWorksheetCellWithRequestBuilder(name: String, sheetName: String, cellOrMethodName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<AnyObject> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/{cellOrMethodName}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let cellOrMethodNamePreEscape = "\(cellOrMethodName)"
        let cellOrMethodNamePostEscape = cellOrMethodNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cellOrMethodName}", with: cellOrMethodNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<AnyObject>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read cell's style info.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter cellName: (path) Cell&#39;s name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsGetWorksheetCellStyle(name: String, sheetName: String, cellName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: StyleResponse?,_ error: Error?) -> Void)) {
        cellsGetWorksheetCellStyleWithRequestBuilder(name: name, sheetName: sheetName, cellName: cellName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read cell's style info.
     - GET /cells/{name}/worksheets/{sheetName}/cells/{cellName}/style
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter cellName: (path) Cell&#39;s name. 
     - parameter folder: (query) Document&#39;s folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<StyleResponse> 
     */
    open class func cellsGetWorksheetCellStyleWithRequestBuilder(name: String, sheetName: String, cellName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<StyleResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let cellNamePreEscape = "\(cellName)"
        let cellNamePostEscape = cellNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cellName}", with: cellNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<StyleResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get cells info.
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter offest: (query) Begginig offset. (optional, default to 0)
     - parameter count: (query) Maximum amount of cells in the response. (optional, default to 0)
     - parameter folder: (query) Document&#39;s folder name. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsGetWorksheetCells(name: String, sheetName: String, offest: Int32? = nil, count: Int32? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: CellsResponse?,_ error: Error?) -> Void)) {
        cellsGetWorksheetCellsWithRequestBuilder(name: name, sheetName: sheetName, offest: offest, count: count, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get cells info.
     - GET /cells/{name}/worksheets/{sheetName}/cells
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Document name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter offest: (query) Begginig offset. (optional, default to 0)
     - parameter count: (query) Maximum amount of cells in the response. (optional, default to 0)
     - parameter folder: (query) Document&#39;s folder name. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<CellsResponse> 
     */
    open class func cellsGetWorksheetCellsWithRequestBuilder(name: String, sheetName: String, offest: Int32? = nil, count: Int32? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<CellsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "offest": offest?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<CellsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read worksheet column data by column's index.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter columnIndex: (path) The column index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsGetWorksheetColumn(name: String, sheetName: String, columnIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ColumnResponse?,_ error: Error?) -> Void)) {
        cellsGetWorksheetColumnWithRequestBuilder(name: name, sheetName: sheetName, columnIndex: columnIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read worksheet column data by column's index.
     - GET /cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter columnIndex: (path) The column index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ColumnResponse> 
     */
    open class func cellsGetWorksheetColumnWithRequestBuilder(name: String, sheetName: String, columnIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ColumnResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let columnIndexPreEscape = "\(columnIndex)"
        let columnIndexPostEscape = columnIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{columnIndex}", with: columnIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ColumnResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read worksheet columns info.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) The workdook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsGetWorksheetColumns(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ColumnsResponse?,_ error: Error?) -> Void)) {
        cellsGetWorksheetColumnsWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read worksheet columns info.
     - GET /cells/{name}/worksheets/{sheetName}/cells/columns
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) The workdook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ColumnsResponse> 
     */
    open class func cellsGetWorksheetColumnsWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ColumnsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/columns"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ColumnsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read worksheet row data by row's index.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter rowIndex: (path) The row index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsGetWorksheetRow(name: String, sheetName: String, rowIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: RowResponse?,_ error: Error?) -> Void)) {
        cellsGetWorksheetRowWithRequestBuilder(name: name, sheetName: sheetName, rowIndex: rowIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read worksheet row data by row's index.
     - GET /cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter rowIndex: (path) The row index. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<RowResponse> 
     */
    open class func cellsGetWorksheetRowWithRequestBuilder(name: String, sheetName: String, rowIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<RowResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let rowIndexPreEscape = "\(rowIndex)"
        let rowIndexPostEscape = rowIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{rowIndex}", with: rowIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<RowResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Read worksheet rows info.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) The workdook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsGetWorksheetRows(name: String, sheetName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: RowsResponse?,_ error: Error?) -> Void)) {
        cellsGetWorksheetRowsWithRequestBuilder(name: name, sheetName: sheetName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read worksheet rows info.
     - GET /cells/{name}/worksheets/{sheetName}/cells/rows
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter folder: (query) The workdook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<RowsResponse> 
     */
    open class func cellsGetWorksheetRowsWithRequestBuilder(name: String, sheetName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<RowsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/rows"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<RowsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Cell calculate formula
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter cellName: (path)  
     - parameter options: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostCellCalculate(name: String, sheetName: String, cellName: String, options: CalculationOptions? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostCellCalculateWithRequestBuilder(name: name, sheetName: sheetName, cellName: cellName, options: options, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Cell calculate formula
     - POST /cells/{name}/worksheets/{sheetName}/cells/{cellName}/calculate
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter cellName: (path)  
     - parameter options: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostCellCalculateWithRequestBuilder(name: String, sheetName: String, cellName: String, options: CalculationOptions? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/calculate"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let cellNamePreEscape = "\(cellName)"
        let cellNamePostEscape = cellNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cellName}", with: cellNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: options)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set cell characters 
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter cellName: (path)  
     - parameter options: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostCellCharacters(name: String, sheetName: String, cellName: String, options: [FontSetting]? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostCellCharactersWithRequestBuilder(name: name, sheetName: sheetName, cellName: cellName, options: options, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set cell characters 
     - POST /cells/{name}/worksheets/{sheetName}/cells/{cellName}/characters
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path)  
     - parameter sheetName: (path)  
     - parameter cellName: (path)  
     - parameter options: (body)  (optional)
     - parameter folder: (query)  (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostCellCharactersWithRequestBuilder(name: String, sheetName: String, cellName: String, options: [FontSetting]? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/characters"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let cellNamePreEscape = "\(cellName)"
        let cellNamePostEscape = cellNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cellName}", with: cellNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: options)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Clear cells contents.
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter range: (query) The range. (optional)
     - parameter startRow: (query) The start row. (optional)
     - parameter startColumn: (query) The start column. (optional)
     - parameter endRow: (query) The end row. (optional)
     - parameter endColumn: (query) The end column. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostClearContents(name: String, sheetName: String, range: String? = nil, startRow: Int32? = nil, startColumn: Int32? = nil, endRow: Int32? = nil, endColumn: Int32? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostClearContentsWithRequestBuilder(name: name, sheetName: sheetName, range: range, startRow: startRow, startColumn: startColumn, endRow: endRow, endColumn: endColumn, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Clear cells contents.
     - POST /cells/{name}/worksheets/{sheetName}/cells/clearcontents
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter range: (query) The range. (optional)
     - parameter startRow: (query) The start row. (optional)
     - parameter startColumn: (query) The start column. (optional)
     - parameter endRow: (query) The end row. (optional)
     - parameter endColumn: (query) The end column. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostClearContentsWithRequestBuilder(name: String, sheetName: String, range: String? = nil, startRow: Int32? = nil, startColumn: Int32? = nil, endRow: Int32? = nil, endColumn: Int32? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/clearcontents"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "range": range, 
            "startRow": startRow?.encodeToJSON(), 
            "startColumn": startColumn?.encodeToJSON(), 
            "endRow": endRow?.encodeToJSON(), 
            "endColumn": endColumn?.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Clear cells contents.
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter range: (query) The range. (optional)
     - parameter startRow: (query) The start row. (optional)
     - parameter startColumn: (query) The start column. (optional)
     - parameter endRow: (query) The end row. (optional)
     - parameter endColumn: (query) The end column. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostClearFormats(name: String, sheetName: String, range: String? = nil, startRow: Int32? = nil, startColumn: Int32? = nil, endRow: Int32? = nil, endColumn: Int32? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostClearFormatsWithRequestBuilder(name: name, sheetName: sheetName, range: range, startRow: startRow, startColumn: startColumn, endRow: endRow, endColumn: endColumn, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Clear cells contents.
     - POST /cells/{name}/worksheets/{sheetName}/cells/clearformats
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter range: (query) The range. (optional)
     - parameter startRow: (query) The start row. (optional)
     - parameter startColumn: (query) The start column. (optional)
     - parameter endRow: (query) The end row. (optional)
     - parameter endColumn: (query) The end column. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostClearFormatsWithRequestBuilder(name: String, sheetName: String, range: String? = nil, startRow: Int32? = nil, startColumn: Int32? = nil, endRow: Int32? = nil, endColumn: Int32? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/clearformats"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "range": range, 
            "startRow": startRow?.encodeToJSON(), 
            "startColumn": startColumn?.encodeToJSON(), 
            "endRow": endRow?.encodeToJSON(), 
            "endColumn": endColumn?.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set column style
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter columnIndex: (path) The column index. 
     - parameter style: (body) Style dto (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostColumnStyle(name: String, sheetName: String, columnIndex: Int32, style: Style? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostColumnStyleWithRequestBuilder(name: name, sheetName: sheetName, columnIndex: columnIndex, style: style, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set column style
     - POST /cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}/style
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter columnIndex: (path) The column index. 
     - parameter style: (body) Style dto (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostColumnStyleWithRequestBuilder(name: String, sheetName: String, columnIndex: Int32, style: Style? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}/style"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let columnIndexPreEscape = "\(columnIndex)"
        let columnIndexPostEscape = columnIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{columnIndex}", with: columnIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: style)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Copy cell into cell
     
     - parameter name: (path) Workbook name. 
     - parameter destCellName: (path) Destination cell name 
     - parameter sheetName: (path) Destination worksheet name. 
     - parameter worksheet: (query) Source worksheet name. 
     - parameter cellname: (query) Source cell name (optional)
     - parameter row: (query) Source row (optional)
     - parameter column: (query) Source column (optional)
     - parameter folder: (query) Folder name (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostCopyCellIntoCell(name: String, destCellName: String, sheetName: String, worksheet: String, cellname: String? = nil, row: Int32? = nil, column: Int32? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostCopyCellIntoCellWithRequestBuilder(name: name, destCellName: destCellName, sheetName: sheetName, worksheet: worksheet, cellname: cellname, row: row, column: column, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Copy cell into cell
     - POST /cells/{name}/worksheets/{sheetName}/cells/{destCellName}/copy
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Workbook name. 
     - parameter destCellName: (path) Destination cell name 
     - parameter sheetName: (path) Destination worksheet name. 
     - parameter worksheet: (query) Source worksheet name. 
     - parameter cellname: (query) Source cell name (optional)
     - parameter row: (query) Source row (optional)
     - parameter column: (query) Source column (optional)
     - parameter folder: (query) Folder name (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostCopyCellIntoCellWithRequestBuilder(name: String, destCellName: String, sheetName: String, worksheet: String, cellname: String? = nil, row: Int32? = nil, column: Int32? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/{destCellName}/copy"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let destCellNamePreEscape = "\(destCellName)"
        let destCellNamePostEscape = destCellNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{destCellName}", with: destCellNamePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "worksheet": worksheet, 
            "cellname": cellname, 
            "row": row?.encodeToJSON(), 
            "column": column?.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Copy worksheet columns.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter sourceColumnIndex: (query) Source column index 
     - parameter destinationColumnIndex: (query) Destination column index 
     - parameter columnNumber: (query) The copied column number 
     - parameter worksheet: (query) The Worksheet (optional, default to )
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostCopyWorksheetColumns(name: String, sheetName: String, sourceColumnIndex: Int32, destinationColumnIndex: Int32, columnNumber: Int32, worksheet: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostCopyWorksheetColumnsWithRequestBuilder(name: name, sheetName: sheetName, sourceColumnIndex: sourceColumnIndex, destinationColumnIndex: destinationColumnIndex, columnNumber: columnNumber, worksheet: worksheet, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Copy worksheet columns.
     - POST /cells/{name}/worksheets/{sheetName}/cells/columns/copy
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter sourceColumnIndex: (query) Source column index 
     - parameter destinationColumnIndex: (query) Destination column index 
     - parameter columnNumber: (query) The copied column number 
     - parameter worksheet: (query) The Worksheet (optional, default to )
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostCopyWorksheetColumnsWithRequestBuilder(name: String, sheetName: String, sourceColumnIndex: Int32, destinationColumnIndex: Int32, columnNumber: Int32, worksheet: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/columns/copy"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sourceColumnIndex": sourceColumnIndex.encodeToJSON(), 
            "destinationColumnIndex": destinationColumnIndex.encodeToJSON(), 
            "columnNumber": columnNumber.encodeToJSON(), 
            "worksheet": worksheet, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Copy worksheet rows.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter sourceRowIndex: (query) Source row index 
     - parameter destinationRowIndex: (query) Destination row index 
     - parameter rowNumber: (query) The copied row number 
     - parameter worksheet: (query) worksheet (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostCopyWorksheetRows(name: String, sheetName: String, sourceRowIndex: Int32, destinationRowIndex: Int32, rowNumber: Int32, worksheet: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostCopyWorksheetRowsWithRequestBuilder(name: name, sheetName: sheetName, sourceRowIndex: sourceRowIndex, destinationRowIndex: destinationRowIndex, rowNumber: rowNumber, worksheet: worksheet, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Copy worksheet rows.
     - POST /cells/{name}/worksheets/{sheetName}/cells/rows/copy
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter sourceRowIndex: (query) Source row index 
     - parameter destinationRowIndex: (query) Destination row index 
     - parameter rowNumber: (query) The copied row number 
     - parameter worksheet: (query) worksheet (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostCopyWorksheetRowsWithRequestBuilder(name: String, sheetName: String, sourceRowIndex: Int32, destinationRowIndex: Int32, rowNumber: Int32, worksheet: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/rows/copy"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sourceRowIndex": sourceRowIndex.encodeToJSON(), 
            "destinationRowIndex": destinationRowIndex.encodeToJSON(), 
            "rowNumber": rowNumber.encodeToJSON(), 
            "worksheet": worksheet, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Group worksheet columns.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter firstIndex: (query) The first column index to be operated. 
     - parameter lastIndex: (query) The last column index to be operated. 
     - parameter hide: (query) columns visible state (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostGroupWorksheetColumns(name: String, sheetName: String, firstIndex: Int32, lastIndex: Int32, hide: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostGroupWorksheetColumnsWithRequestBuilder(name: name, sheetName: sheetName, firstIndex: firstIndex, lastIndex: lastIndex, hide: hide, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Group worksheet columns.
     - POST /cells/{name}/worksheets/{sheetName}/cells/columns/group
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter firstIndex: (query) The first column index to be operated. 
     - parameter lastIndex: (query) The last column index to be operated. 
     - parameter hide: (query) columns visible state (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostGroupWorksheetColumnsWithRequestBuilder(name: String, sheetName: String, firstIndex: Int32, lastIndex: Int32, hide: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/columns/group"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "firstIndex": firstIndex.encodeToJSON(), 
            "lastIndex": lastIndex.encodeToJSON(), 
            "hide": hide, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Group worksheet rows.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter firstIndex: (query) The first row index to be operated. 
     - parameter lastIndex: (query) The last row index to be operated. 
     - parameter hide: (query) rows visible state (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostGroupWorksheetRows(name: String, sheetName: String, firstIndex: Int32, lastIndex: Int32, hide: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostGroupWorksheetRowsWithRequestBuilder(name: name, sheetName: sheetName, firstIndex: firstIndex, lastIndex: lastIndex, hide: hide, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Group worksheet rows.
     - POST /cells/{name}/worksheets/{sheetName}/cells/rows/group
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter firstIndex: (query) The first row index to be operated. 
     - parameter lastIndex: (query) The last row index to be operated. 
     - parameter hide: (query) rows visible state (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostGroupWorksheetRowsWithRequestBuilder(name: String, sheetName: String, firstIndex: Int32, lastIndex: Int32, hide: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/rows/group"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "firstIndex": firstIndex.encodeToJSON(), 
            "lastIndex": lastIndex.encodeToJSON(), 
            "hide": hide, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Hide worksheet columns.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter startColumn: (query) The begin column index to be operated. 
     - parameter totalColumns: (query) Number of columns to be operated. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostHideWorksheetColumns(name: String, sheetName: String, startColumn: Int32, totalColumns: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostHideWorksheetColumnsWithRequestBuilder(name: name, sheetName: sheetName, startColumn: startColumn, totalColumns: totalColumns, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Hide worksheet columns.
     - POST /cells/{name}/worksheets/{sheetName}/cells/columns/hide
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter startColumn: (query) The begin column index to be operated. 
     - parameter totalColumns: (query) Number of columns to be operated. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostHideWorksheetColumnsWithRequestBuilder(name: String, sheetName: String, startColumn: Int32, totalColumns: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/columns/hide"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startColumn": startColumn.encodeToJSON(), 
            "totalColumns": totalColumns.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Hide worksheet rows.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter startrow: (query) The begin row index to be operated. 
     - parameter totalRows: (query) Number of rows to be operated. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostHideWorksheetRows(name: String, sheetName: String, startrow: Int32, totalRows: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostHideWorksheetRowsWithRequestBuilder(name: name, sheetName: sheetName, startrow: startrow, totalRows: totalRows, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Hide worksheet rows.
     - POST /cells/{name}/worksheets/{sheetName}/cells/rows/hide
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter startrow: (query) The begin row index to be operated. 
     - parameter totalRows: (query) Number of rows to be operated. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostHideWorksheetRowsWithRequestBuilder(name: String, sheetName: String, startrow: Int32, totalRows: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/rows/hide"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startrow": startrow.encodeToJSON(), 
            "totalRows": totalRows.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set row style.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter rowIndex: (path) The row index. 
     - parameter style: (body) Style dto (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostRowStyle(name: String, sheetName: String, rowIndex: Int32, style: Style? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostRowStyleWithRequestBuilder(name: name, sheetName: sheetName, rowIndex: rowIndex, style: style, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set row style.
     - POST /cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}/style
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter rowIndex: (path) The row index. 
     - parameter style: (body) Style dto (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostRowStyleWithRequestBuilder(name: String, sheetName: String, rowIndex: Int32, style: Style? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}/style"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let rowIndexPreEscape = "\(rowIndex)"
        let rowIndexPostEscape = rowIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{rowIndex}", with: rowIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: style)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set htmlstring value into cell
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter cellName: (path) The cell name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostSetCellHtmlString(name: String, sheetName: String, cellName: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: CellResponse?,_ error: Error?) -> Void)) {
        cellsPostSetCellHtmlStringWithRequestBuilder(name: name, sheetName: sheetName, cellName: cellName, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set htmlstring value into cell
     - POST /cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter cellName: (path) The cell name. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<CellResponse> 
     */
    open class func cellsPostSetCellHtmlStringWithRequestBuilder(name: String, sheetName: String, cellName: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<CellResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let cellNamePreEscape = "\(cellName)"
        let cellNamePostEscape = cellNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cellName}", with: cellNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<CellResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set cell range value 
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter cellarea: (query) Cell area (like \&quot;A1:C2\&quot;) 
     - parameter value: (query) Range value 
     - parameter type: (query) Value data type (like \&quot;int\&quot;) 
     - parameter folder: (query) Folder name (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostSetCellRangeValue(name: String, sheetName: String, cellarea: String, value: String, type: String, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostSetCellRangeValueWithRequestBuilder(name: name, sheetName: sheetName, cellarea: cellarea, value: value, type: type, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set cell range value 
     - POST /cells/{name}/worksheets/{sheetName}/cells
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter cellarea: (query) Cell area (like \&quot;A1:C2\&quot;) 
     - parameter value: (query) Range value 
     - parameter type: (query) Value data type (like \&quot;int\&quot;) 
     - parameter folder: (query) Folder name (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostSetCellRangeValueWithRequestBuilder(name: String, sheetName: String, cellarea: String, value: String, type: String, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "cellarea": cellarea, 
            "value": value, 
            "type": type, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set worksheet column width.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter columnIndex: (path) The column index. 
     - parameter width: (query) The width. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostSetWorksheetColumnWidth(name: String, sheetName: String, columnIndex: Int32, width: Double, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ColumnResponse?,_ error: Error?) -> Void)) {
        cellsPostSetWorksheetColumnWidthWithRequestBuilder(name: name, sheetName: sheetName, columnIndex: columnIndex, width: width, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set worksheet column width.
     - POST /cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter columnIndex: (path) The column index. 
     - parameter width: (query) The width. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ColumnResponse> 
     */
    open class func cellsPostSetWorksheetColumnWidthWithRequestBuilder(name: String, sheetName: String, columnIndex: Int32, width: Double, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ColumnResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let columnIndexPreEscape = "\(columnIndex)"
        let columnIndexPostEscape = columnIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{columnIndex}", with: columnIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "width": width, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ColumnResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Ungroup worksheet columns.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter firstIndex: (query) The first column index to be operated. 
     - parameter lastIndex: (query) The last column index to be operated. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostUngroupWorksheetColumns(name: String, sheetName: String, firstIndex: Int32, lastIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostUngroupWorksheetColumnsWithRequestBuilder(name: name, sheetName: sheetName, firstIndex: firstIndex, lastIndex: lastIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Ungroup worksheet columns.
     - POST /cells/{name}/worksheets/{sheetName}/cells/columns/ungroup
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter firstIndex: (query) The first column index to be operated. 
     - parameter lastIndex: (query) The last column index to be operated. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostUngroupWorksheetColumnsWithRequestBuilder(name: String, sheetName: String, firstIndex: Int32, lastIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/columns/ungroup"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "firstIndex": firstIndex.encodeToJSON(), 
            "lastIndex": lastIndex.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Ungroup worksheet rows.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter firstIndex: (query) The first row index to be operated. 
     - parameter lastIndex: (query) The last row index to be operated. 
     - parameter isAll: (query) Is all row to be operated (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostUngroupWorksheetRows(name: String, sheetName: String, firstIndex: Int32, lastIndex: Int32, isAll: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostUngroupWorksheetRowsWithRequestBuilder(name: name, sheetName: sheetName, firstIndex: firstIndex, lastIndex: lastIndex, isAll: isAll, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Ungroup worksheet rows.
     - POST /cells/{name}/worksheets/{sheetName}/cells/rows/ungroup
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter firstIndex: (query) The first row index to be operated. 
     - parameter lastIndex: (query) The last row index to be operated. 
     - parameter isAll: (query) Is all row to be operated (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostUngroupWorksheetRowsWithRequestBuilder(name: String, sheetName: String, firstIndex: Int32, lastIndex: Int32, isAll: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/rows/ungroup"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "firstIndex": firstIndex.encodeToJSON(), 
            "lastIndex": lastIndex.encodeToJSON(), 
            "isAll": isAll, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unhide worksheet columns.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter startcolumn: (query) The begin column index to be operated. 
     - parameter totalColumns: (query) Number of columns to be operated. 
     - parameter width: (query) The new column width. (optional, default to 50.0)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostUnhideWorksheetColumns(name: String, sheetName: String, startcolumn: Int32, totalColumns: Int32, width: Double? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostUnhideWorksheetColumnsWithRequestBuilder(name: name, sheetName: sheetName, startcolumn: startcolumn, totalColumns: totalColumns, width: width, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Unhide worksheet columns.
     - POST /cells/{name}/worksheets/{sheetName}/cells/columns/unhide
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter startcolumn: (query) The begin column index to be operated. 
     - parameter totalColumns: (query) Number of columns to be operated. 
     - parameter width: (query) The new column width. (optional, default to 50.0)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostUnhideWorksheetColumnsWithRequestBuilder(name: String, sheetName: String, startcolumn: Int32, totalColumns: Int32, width: Double? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/columns/unhide"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startcolumn": startcolumn.encodeToJSON(), 
            "totalColumns": totalColumns.encodeToJSON(), 
            "width": width, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unhide worksheet rows.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter startrow: (query) The begin row index to be operated. 
     - parameter totalRows: (query) Number of rows to be operated. 
     - parameter height: (query) The new row height. (optional, default to 15.0)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostUnhideWorksheetRows(name: String, sheetName: String, startrow: Int32, totalRows: Int32, height: Double? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostUnhideWorksheetRowsWithRequestBuilder(name: name, sheetName: sheetName, startrow: startrow, totalRows: totalRows, height: height, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Unhide worksheet rows.
     - POST /cells/{name}/worksheets/{sheetName}/cells/rows/unhide
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter startrow: (query) The begin row index to be operated. 
     - parameter totalRows: (query) Number of rows to be operated. 
     - parameter height: (query) The new row height. (optional, default to 15.0)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostUnhideWorksheetRowsWithRequestBuilder(name: String, sheetName: String, startrow: Int32, totalRows: Int32, height: Double? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/rows/unhide"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startrow": startrow.encodeToJSON(), 
            "totalRows": totalRows.encodeToJSON(), 
            "height": height, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update cell's style.
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter cellName: (path) The cell name. 
     - parameter style: (body) with update style settings. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostUpdateWorksheetCellStyle(name: String, sheetName: String, cellName: String, style: Style? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: StyleResponse?,_ error: Error?) -> Void)) {
        cellsPostUpdateWorksheetCellStyleWithRequestBuilder(name: name, sheetName: sheetName, cellName: cellName, style: style, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update cell's style.
     - POST /cells/{name}/worksheets/{sheetName}/cells/{cellName}/style
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter cellName: (path) The cell name. 
     - parameter style: (body) with update style settings. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<StyleResponse> 
     */
    open class func cellsPostUpdateWorksheetCellStyleWithRequestBuilder(name: String, sheetName: String, cellName: String, style: Style? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<StyleResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let cellNamePreEscape = "\(cellName)"
        let cellNamePostEscape = cellNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cellName}", with: cellNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: style)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<StyleResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update cell's range style.
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter range: (query) The range. 
     - parameter style: (body) with update style settings. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostUpdateWorksheetRangeStyle(name: String, sheetName: String, range: String, style: Style? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostUpdateWorksheetRangeStyleWithRequestBuilder(name: name, sheetName: sheetName, range: range, style: style, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update cell's range style.
     - POST /cells/{name}/worksheets/{sheetName}/cells/style
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) Workbook name. 
     - parameter sheetName: (path) Worksheet name. 
     - parameter range: (query) The range. 
     - parameter style: (body) with update style settings. (optional)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostUpdateWorksheetRangeStyleWithRequestBuilder(name: String, sheetName: String, range: String, style: Style? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/style"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: style)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "range": range, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update worksheet row.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter rowIndex: (path) The row index. 
     - parameter height: (query) The new row height. (optional, default to 0.0)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostUpdateWorksheetRow(name: String, sheetName: String, rowIndex: Int32, height: Double? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: RowResponse?,_ error: Error?) -> Void)) {
        cellsPostUpdateWorksheetRowWithRequestBuilder(name: name, sheetName: sheetName, rowIndex: rowIndex, height: height, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update worksheet row.
     - POST /cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter rowIndex: (path) The row index. 
     - parameter height: (query) The new row height. (optional, default to 0.0)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<RowResponse> 
     */
    open class func cellsPostUpdateWorksheetRowWithRequestBuilder(name: String, sheetName: String, rowIndex: Int32, height: Double? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<RowResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let rowIndexPreEscape = "\(rowIndex)"
        let rowIndexPostEscape = rowIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{rowIndex}", with: rowIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "height": height, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<RowResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set cell value.
     
     - parameter name: (path) The document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter cellName: (path) The cell name. 
     - parameter value: (query) The cell value. (optional)
     - parameter type: (query) The value type. (optional)
     - parameter formula: (query) Formula for cell (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostWorksheetCellSetValue(name: String, sheetName: String, cellName: String, value: String? = nil, type: String? = nil, formula: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: CellResponse?,_ error: Error?) -> Void)) {
        cellsPostWorksheetCellSetValueWithRequestBuilder(name: name, sheetName: sheetName, cellName: cellName, value: value, type: type, formula: formula, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set cell value.
     - POST /cells/{name}/worksheets/{sheetName}/cells/{cellName}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The document name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter cellName: (path) The cell name. 
     - parameter value: (query) The cell value. (optional)
     - parameter type: (query) The value type. (optional)
     - parameter formula: (query) Formula for cell (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<CellResponse> 
     */
    open class func cellsPostWorksheetCellSetValueWithRequestBuilder(name: String, sheetName: String, cellName: String, value: String? = nil, type: String? = nil, formula: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<CellResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/{cellName}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let cellNamePreEscape = "\(cellName)"
        let cellNamePostEscape = cellNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cellName}", with: cellNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "value": value, 
            "type": type, 
            "formula": formula, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<CellResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Merge cells.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter startRow: (query) The start row. 
     - parameter startColumn: (query) The start column. 
     - parameter totalRows: (query) The total rows 
     - parameter totalColumns: (query) The total columns. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostWorksheetMerge(name: String, sheetName: String, startRow: Int32, startColumn: Int32, totalRows: Int32, totalColumns: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostWorksheetMergeWithRequestBuilder(name: name, sheetName: sheetName, startRow: startRow, startColumn: startColumn, totalRows: totalRows, totalColumns: totalColumns, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Merge cells.
     - POST /cells/{name}/worksheets/{sheetName}/cells/merge
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter startRow: (query) The start row. 
     - parameter startColumn: (query) The start column. 
     - parameter totalRows: (query) The total rows 
     - parameter totalColumns: (query) The total columns. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostWorksheetMergeWithRequestBuilder(name: String, sheetName: String, startRow: Int32, startColumn: Int32, totalRows: Int32, totalColumns: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/merge"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startRow": startRow.encodeToJSON(), 
            "startColumn": startColumn.encodeToJSON(), 
            "totalRows": totalRows.encodeToJSON(), 
            "totalColumns": totalColumns.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unmerge cells.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter startRow: (query) The start row. 
     - parameter startColumn: (query) The start column. 
     - parameter totalRows: (query) The total rows 
     - parameter totalColumns: (query) The total columns. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPostWorksheetUnmerge(name: String, sheetName: String, startRow: Int32, startColumn: Int32, totalRows: Int32, totalColumns: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPostWorksheetUnmergeWithRequestBuilder(name: name, sheetName: sheetName, startRow: startRow, startColumn: startColumn, totalRows: totalRows, totalColumns: totalColumns, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Unmerge cells.
     - POST /cells/{name}/worksheets/{sheetName}/cells/unmerge
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter startRow: (query) The start row. 
     - parameter startColumn: (query) The start column. 
     - parameter totalRows: (query) The total rows 
     - parameter totalColumns: (query) The total columns. 
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPostWorksheetUnmergeWithRequestBuilder(name: String, sheetName: String, startRow: Int32, startColumn: Int32, totalRows: Int32, totalColumns: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/unmerge"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startRow": startRow.encodeToJSON(), 
            "startColumn": startColumn.encodeToJSON(), 
            "totalRows": totalRows.encodeToJSON(), 
            "totalColumns": totalColumns.encodeToJSON(), 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Insert worksheet columns.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter columnIndex: (path) The column index. 
     - parameter columns: (query) The columns. 
     - parameter updateReference: (query) The update reference. (optional, default to true)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPutInsertWorksheetColumns(name: String, sheetName: String, columnIndex: Int32, columns: Int32, updateReference: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: ColumnsResponse?,_ error: Error?) -> Void)) {
        cellsPutInsertWorksheetColumnsWithRequestBuilder(name: name, sheetName: sheetName, columnIndex: columnIndex, columns: columns, updateReference: updateReference, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Insert worksheet columns.
     - PUT /cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter columnIndex: (path) The column index. 
     - parameter columns: (query) The columns. 
     - parameter updateReference: (query) The update reference. (optional, default to true)
     - parameter folder: (query) The workbook folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<ColumnsResponse> 
     */
    open class func cellsPutInsertWorksheetColumnsWithRequestBuilder(name: String, sheetName: String, columnIndex: Int32, columns: Int32, updateReference: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<ColumnsResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let columnIndexPreEscape = "\(columnIndex)"
        let columnIndexPostEscape = columnIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{columnIndex}", with: columnIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "columns": columns.encodeToJSON(), 
            "updateReference": updateReference, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<ColumnsResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Insert new worksheet row.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter rowIndex: (path) The new row index. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPutInsertWorksheetRow(name: String, sheetName: String, rowIndex: Int32, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: RowResponse?,_ error: Error?) -> Void)) {
        cellsPutInsertWorksheetRowWithRequestBuilder(name: name, sheetName: sheetName, rowIndex: rowIndex, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Insert new worksheet row.
     - PUT /cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter rowIndex: (path) The new row index. 
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<RowResponse> 
     */
    open class func cellsPutInsertWorksheetRowWithRequestBuilder(name: String, sheetName: String, rowIndex: Int32, folder: String? = nil, storage: String? = nil) -> RequestBuilder<RowResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let rowIndexPreEscape = "\(rowIndex)"
        let rowIndexPostEscape = rowIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{rowIndex}", with: rowIndexPostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<RowResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Insert several new worksheet rows.
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter startrow: (query) The begin row index to be operated. 
     - parameter totalRows: (query) Number of rows to be operated. (optional, default to 1)
     - parameter updateReference: (query) Indicates if update references in other worksheets. (optional, default to true)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cellsPutInsertWorksheetRows(name: String, sheetName: String, startrow: Int32, totalRows: Int32? = nil, updateReference: Bool? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        cellsPutInsertWorksheetRowsWithRequestBuilder(name: name, sheetName: sheetName, startrow: startrow, totalRows: totalRows, updateReference: updateReference, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Insert several new worksheet rows.
     - PUT /cells/{name}/worksheets/{sheetName}/cells/rows
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The workbook name. 
     - parameter sheetName: (path) The worksheet name. 
     - parameter startrow: (query) The begin row index to be operated. 
     - parameter totalRows: (query) Number of rows to be operated. (optional, default to 1)
     - parameter updateReference: (query) Indicates if update references in other worksheets. (optional, default to true)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func cellsPutInsertWorksheetRowsWithRequestBuilder(name: String, sheetName: String, startrow: Int32, totalRows: Int32? = nil, updateReference: Bool? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/cells/{name}/worksheets/{sheetName}/cells/rows"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let sheetNamePreEscape = "\(sheetName)"
        let sheetNamePostEscape = sheetNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sheetName}", with: sheetNamePostEscape, options: .literal, range: nil)
        let URLString = AsposeCellsCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startrow": startrow.encodeToJSON(), 
            "totalRows": totalRows?.encodeToJSON(), 
            "updateReference": updateReference, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeCellsCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
