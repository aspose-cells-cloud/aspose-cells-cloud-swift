//
// PdfSaveOptions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct PdfSaveOptions: Codable {

    public var enableHTTPCompression: Bool?
    public var saveFormat: String?
    /** Make the workbook empty after saving the file. */
    public var clearData: Bool?
    /** The cached file folder is used to store some large data. */
    public var cachedFileFolder: String?
    /** Indicates whether validate merged areas before saving the file. The default value is false.              */
    public var validateMergedAreas: Bool?
    public var refreshChartCache: Bool?
    /** If true and the directory does not exist, the directory will be automatically created before saving the file.              */
    public var createDirectory: Bool?
    public var sortNames: Bool?
    public var calculateFormula: Bool?
    public var checkFontCompatibility: Bool?
    public var onePagePerSheet: Bool?
    public var compliance: String?
    public var defaultFont: String?
    public var printingPageType: String?
    public var imageType: String?
    public var desiredPPI: Int32?
    public var jpegQuality: Int32?
    public var securityOptions: PdfSecurityOptions?

public enum CodingKeys: String, CodingKey { 
        case enableHTTPCompression = "EnableHTTPCompression"
        case saveFormat = "SaveFormat"
        case clearData = "ClearData"
        case cachedFileFolder = "CachedFileFolder"
        case validateMergedAreas = "ValidateMergedAreas"
        case refreshChartCache = "RefreshChartCache"
        case createDirectory = "CreateDirectory"
        case sortNames = "SortNames"
        case calculateFormula = "CalculateFormula"
        case checkFontCompatibility = "CheckFontCompatibility"
        case onePagePerSheet = "OnePagePerSheet"
        case compliance = "Compliance"
        case defaultFont = "DefaultFont"
        case printingPageType = "PrintingPageType"
        case imageType = "ImageType"
        case desiredPPI = "desiredPPI"
        case jpegQuality = "jpegQuality"
        case securityOptions = "SecurityOptions"
    }

    public init(enableHTTPCompression: Bool?, saveFormat: String?, clearData: Bool?, cachedFileFolder: String?, validateMergedAreas: Bool?, refreshChartCache: Bool?, createDirectory: Bool?, sortNames: Bool?, calculateFormula: Bool?, checkFontCompatibility: Bool?, onePagePerSheet: Bool?, compliance: String?, defaultFont: String?, printingPageType: String?, imageType: String?, desiredPPI: Int32?, jpegQuality: Int32?, securityOptions: PdfSecurityOptions?) {
        self.enableHTTPCompression = enableHTTPCompression
        self.saveFormat = saveFormat
        self.clearData = clearData
        self.cachedFileFolder = cachedFileFolder
        self.validateMergedAreas = validateMergedAreas
        self.refreshChartCache = refreshChartCache
        self.createDirectory = createDirectory
        self.sortNames = sortNames
        self.calculateFormula = calculateFormula
        self.checkFontCompatibility = checkFontCompatibility
        self.onePagePerSheet = onePagePerSheet
        self.compliance = compliance
        self.defaultFont = defaultFont
        self.printingPageType = printingPageType
        self.imageType = imageType
        self.desiredPPI = desiredPPI
        self.jpegQuality = jpegQuality
        self.securityOptions = securityOptions
    }


}

