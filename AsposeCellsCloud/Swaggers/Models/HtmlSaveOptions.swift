//
// HtmlSaveOptions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class HtmlSaveOptions: SaveOptions {

    public var attachedFilesDirectory: String?
    public var attachedFilesUrlPrefix: String?
    public var encoding: String?
    public var exportActiveWorksheetOnly: Bool?
    public var exportChartImageFormat: String?
    public var exportImagesAsBase64: Bool?
    public var hiddenColDisplayType: String?
    public var hiddenRowDisplayType: String?
    public var htmlCrossStringType: String?
    public var isExpImageToTempDir: Bool?
    public var pageTitle: String?
    public var parseHtmlTagInCell: Bool?

public enum CodingKeys: String, CodingKey {
        case attachedFilesDirectory = "AttachedFilesDirectory"
        case attachedFilesUrlPrefix = "AttachedFilesUrlPrefix"
        case encoding = "Encoding"
        case exportActiveWorksheetOnly = "ExportActiveWorksheetOnly"
        case exportChartImageFormat = "ExportChartImageFormat"
        case exportImagesAsBase64 = "ExportImagesAsBase64"
        case hiddenColDisplayType = "HiddenColDisplayType"
        case hiddenRowDisplayType = "HiddenRowDisplayType"
        case htmlCrossStringType = "HtmlCrossStringType"
        case isExpImageToTempDir = "IsExpImageToTempDir"
        case pageTitle = "PageTitle"
        case parseHtmlTagInCell = "ParseHtmlTagInCell"
    }

    public init(enableHTTPCompression: Bool?, saveFormat: String?, clearData: Bool?, cachedFileFolder: String?, validateMergedAreas: Bool?, refreshChartCache: Bool?, createDirectory: Bool?, sortNames: Bool?, attachedFilesDirectory: String?, attachedFilesUrlPrefix: String?, encoding: String?, exportActiveWorksheetOnly: Bool?, exportChartImageFormat: String?, exportImagesAsBase64: Bool?, hiddenColDisplayType: String?, hiddenRowDisplayType: String?, htmlCrossStringType: String?, isExpImageToTempDir: Bool?, pageTitle: String?, parseHtmlTagInCell: Bool?) {
        self.attachedFilesDirectory = attachedFilesDirectory
        self.attachedFilesUrlPrefix = attachedFilesUrlPrefix
        self.encoding = encoding
        self.exportActiveWorksheetOnly = exportActiveWorksheetOnly
        self.exportChartImageFormat = exportChartImageFormat
        self.exportImagesAsBase64 = exportImagesAsBase64
        self.hiddenColDisplayType = hiddenColDisplayType
        self.hiddenRowDisplayType = hiddenRowDisplayType
        self.htmlCrossStringType = htmlCrossStringType
        self.isExpImageToTempDir = isExpImageToTempDir
        self.pageTitle = pageTitle
        self.parseHtmlTagInCell = parseHtmlTagInCell
        super.init(enableHTTPCompression: enableHTTPCompression, saveFormat: saveFormat, clearData: clearData, cachedFileFolder: cachedFileFolder, validateMergedAreas: validateMergedAreas, refreshChartCache: refreshChartCache, createDirectory: createDirectory, sortNames: sortNames)
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(attachedFilesDirectory, forKey: "AttachedFilesDirectory")
        try container.encodeIfPresent(attachedFilesUrlPrefix, forKey: "AttachedFilesUrlPrefix")
        try container.encodeIfPresent(encoding, forKey: "Encoding")
        try container.encodeIfPresent(exportActiveWorksheetOnly, forKey: "ExportActiveWorksheetOnly")
        
        try container.encodeIfPresent(exportChartImageFormat, forKey: "ExportChartImageFormat")
        try container.encodeIfPresent(exportImagesAsBase64, forKey: "ExportImagesAsBase64")
        try container.encodeIfPresent(hiddenColDisplayType, forKey: "HiddenColDisplayType")
        try container.encodeIfPresent(hiddenRowDisplayType, forKey: "HiddenRowDisplayType")
        
        try container.encodeIfPresent(htmlCrossStringType, forKey: "HtmlCrossStringType")
        try container.encodeIfPresent(isExpImageToTempDir, forKey: "IsExpImageToTempDir")
        try container.encodeIfPresent(pageTitle, forKey: "PageTitle")
        try container.encodeIfPresent(parseHtmlTagInCell, forKey: "ParseHtmlTagInCell")
        try super.encode(to: encoder)
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        attachedFilesDirectory = try container.decodeIfPresent(String.self, forKey: "AttachedFilesDirectory")
        attachedFilesUrlPrefix = try container.decodeIfPresent(String.self, forKey: "AttachedFilesUrlPrefix")
        encoding = try container.decodeIfPresent(String.self, forKey: "Encoding")
        exportActiveWorksheetOnly = try container.decodeIfPresent(Bool.self, forKey: "ExportActiveWorksheetOnly")
        
        exportChartImageFormat = try container.decodeIfPresent(String.self, forKey: "ExportChartImageFormat")
        exportImagesAsBase64 = try container.decodeIfPresent(Bool.self, forKey: "ExportImagesAsBase64")
        hiddenColDisplayType = try container.decodeIfPresent(String.self, forKey: "HiddenColDisplayType")
        hiddenRowDisplayType = try container.decodeIfPresent(String.self, forKey: "HiddenRowDisplayType")
        
        htmlCrossStringType = try container.decodeIfPresent(String.self, forKey: "HtmlCrossStringType")
        isExpImageToTempDir = try container.decodeIfPresent(Bool.self, forKey: "IsExpImageToTempDir")
        pageTitle = try container.decodeIfPresent(String.self, forKey: "PageTitle")
        parseHtmlTagInCell = try container.decodeIfPresent(Bool.self, forKey: "ParseHtmlTagInCell")
        try super.init(from: decoder)
    }

}

