//
// PivotTableOperateParameter.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class PivotTableOperateParameter: OperateParameter {

    public var pivotFieldColumns: [Int32]?
    public var pivotTableIndex: Int32?
    public var tableName: String?
    public var useSameSource: Bool?
    public var pivotFieldData: [Int32]?
    public var pivotFieldRows: [Int32]?
    public var destCellName: String?
    public var sourceData: String?

public enum CodingKeys: String, CodingKey {
        case pivotFieldColumns = "PivotFieldColumns"
        case pivotTableIndex = "PivotTableIndex"
        case tableName = "TableName"
        case useSameSource = "UseSameSource"
        case pivotFieldData = "PivotFieldData"
        case pivotFieldRows = "PivotFieldRows"
        case destCellName = "DestCellName"
        case sourceData = "SourceData"
    }

    public init(operateType: String?, pivotFieldColumns: [Int32]?, pivotTableIndex: Int32?, tableName: String?, useSameSource: Bool?, pivotFieldData: [Int32]?, pivotFieldRows: [Int32]?, destCellName: String?, sourceData: String?) {
        self.pivotFieldColumns = pivotFieldColumns
        self.pivotTableIndex = pivotTableIndex
        self.tableName = tableName
        self.useSameSource = useSameSource
        self.pivotFieldData = pivotFieldData
        self.pivotFieldRows = pivotFieldRows
        self.destCellName = destCellName
        self.sourceData = sourceData
        super.init(operateType: operateType)
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(pivotFieldColumns, forKey: "PivotFieldColumns")
        try container.encodeIfPresent(pivotTableIndex, forKey: "PivotTableIndex")
        try container.encodeIfPresent(tableName, forKey: "TableName")
        try container.encodeIfPresent(useSameSource, forKey: "UseSameSource")
        
        try container.encodeIfPresent(pivotFieldData, forKey: "PivotFieldData")
        try container.encodeIfPresent(pivotFieldRows, forKey: "PivotFieldRows")
        try container.encodeIfPresent(destCellName, forKey: "DestCellName")
        try container.encodeIfPresent(sourceData, forKey: "SourceData")
        try super.encode(to: encoder)
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        pivotFieldColumns = try container.decodeIfPresent([Int32].self, forKey: "PivotFieldColumns")
        pivotTableIndex = try container.decodeIfPresent(Int32.self, forKey: "PivotTableIndex")
        tableName = try container.decodeIfPresent(String.self, forKey: "TableName")
        useSameSource = try container.decodeIfPresent(Bool.self, forKey: "UseSameSource")
        
        pivotFieldData = try container.decodeIfPresent([Int32].self, forKey: "PivotFieldData")
        pivotFieldRows = try container.decodeIfPresent([Int32].self, forKey: "PivotFieldRows")
        destCellName = try container.decodeIfPresent(String.self, forKey: "DestCellName")
        sourceData = try container.decodeIfPresent(String.self, forKey: "SourceData")
        try super.init(from: decoder)
    }

}

