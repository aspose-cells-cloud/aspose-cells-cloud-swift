//
// Cell.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Encapsulates the object that represents a single Workbook cell. */

public struct Cell: Codable {

    public var link: Link?
    public var style: LinkElement?
    /** Gets and sets the html string which contains data and some formattings in this cell.              */
    public var htmlString: String?
    /** Gets the name of the cell.              */
    public var name: String?
    /** Gets column number (zero based) of the cell.              */
    public var column: Int32
    /** Gets the parent worksheet. */
    public var worksheet: String?
    /** Indicates whethe this cell is part of table formula.              */
    public var isInTable: Bool
    /** Inidicates the cell&#39;s formula is and array formula and it is the first cell of the array. */
    public var isArrayHeader: Bool
    public var value: String?
    /** Represents if the specified cell contains formula.              */
    public var isFormula: Bool
    /** Indicates if the cell&#39;s style is set. If return false, it means this cell has a default cell format.              */
    public var isStyleSet: Bool
    /** Indicates whether the cell formula is an array formula. */
    public var isInArray: Bool
    /** Checks if a formula can properly evaluate a result.              */
    public var isErrorValue: Bool
    /** Checks if a cell is part of a merged range or not.              */
    public var isMerged: Bool
    /** Gets or sets a formula of the Aspose.Cells.Cell. */
    public var formula: String?
    /** Specifies a cell value type. */
    public var type: String?
    /** Gets row number (zero based) of the cell.              */
    public var row: Int32

public enum CodingKeys: String, CodingKey { 
        case link = "link"
        case style = "Style"
        case htmlString = "HtmlString"
        case name = "Name"
        case column = "Column"
        case worksheet = "Worksheet"
        case isInTable = "IsInTable"
        case isArrayHeader = "IsArrayHeader"
        case value = "Value"
        case isFormula = "IsFormula"
        case isStyleSet = "IsStyleSet"
        case isInArray = "IsInArray"
        case isErrorValue = "IsErrorValue"
        case isMerged = "IsMerged"
        case formula = "Formula"
        case type = "Type"
        case row = "Row"
    }

    public init(link: Link?, style: LinkElement?, htmlString: String?, name: String?, column: Int32, worksheet: String?, isInTable: Bool, isArrayHeader: Bool, value: String?, isFormula: Bool, isStyleSet: Bool, isInArray: Bool, isErrorValue: Bool, isMerged: Bool, formula: String?, type: String?, row: Int32) {
        self.link = link
        self.style = style
        self.htmlString = htmlString
        self.name = name
        self.column = column
        self.worksheet = worksheet
        self.isInTable = isInTable
        self.isArrayHeader = isArrayHeader
        self.value = value
        self.isFormula = isFormula
        self.isStyleSet = isStyleSet
        self.isInArray = isInArray
        self.isErrorValue = isErrorValue
        self.isMerged = isMerged
        self.formula = formula
        self.type = type
        self.row = row
    }


}

