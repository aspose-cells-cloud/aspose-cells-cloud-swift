//
// ConvertWorksheetTaskParameter.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class ConvertWorksheetTaskParameter: TaskParameter {

    public var workbook: FileSource?
    public var sheet: String?
    public var target: FileSource?
    public var format: String?
    public var area: String?
    public var pageIndex: Int32?
    public var verticalResolution: Int32?
    public var horizontalResolution: Int32?

public enum CodingKeys: String, CodingKey { 
        case workbook = "Workbook"
        case sheet = "Sheet"
        case target = "Target"
        case format = "Format"
        case area = "Area"
        case pageIndex = "PageIndex"
        case verticalResolution = "VerticalResolution"
        case horizontalResolution = "HorizontalResolution"
    }

    public init(workbook: FileSource?, sheet: String?, target: FileSource?, format: String?, area: String?, pageIndex: Int32?, verticalResolution: Int32?, horizontalResolution: Int32?) {
        self.workbook = workbook
        self.sheet = sheet
        self.target = target
        self.format = format
        self.area = area
        self.pageIndex = pageIndex
        self.verticalResolution = verticalResolution
        self.horizontalResolution = horizontalResolution
        super.init()
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(workbook, forKey: "Workbook")
        try container.encodeIfPresent(sheet, forKey: "Sheet")
        try container.encodeIfPresent(target, forKey: "Target")
        try container.encodeIfPresent(format, forKey: "Format")
        
        try container.encodeIfPresent(area, forKey: "Area")
        try container.encodeIfPresent(pageIndex, forKey: "PageIndex")
        try container.encodeIfPresent(verticalResolution, forKey: "VerticalResolution")
        try container.encodeIfPresent(horizontalResolution, forKey: "HorizontalResolution")
        try super.encode(to: encoder)
    }
    
    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        workbook = try container.decodeIfPresent(FileSource.self, forKey: "Workbook")
        sheet = try container.decodeIfPresent(String.self, forKey: "Sheet")
        target = try container.decodeIfPresent(FileSource.self, forKey: "Target")
        format = try container.decodeIfPresent(String.self, forKey: "Format")
        
        area = try container.decodeIfPresent(String.self, forKey: "Area")
        pageIndex = try container.decodeIfPresent(Int32.self, forKey: "PageIndex")
        verticalResolution = try container.decodeIfPresent(Int32.self, forKey: "VerticalResolution")
        horizontalResolution = try container.decodeIfPresent(Int32.self, forKey: "HorizontalResolution")
        try super.init(from: decoder)
    }

}

