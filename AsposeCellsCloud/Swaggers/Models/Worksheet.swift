//
// Worksheet.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct Worksheet: Codable {

    /** Gets the index of sheet in the worksheets collection.              */
    public var index: Int32
    public var pictures: LinkElement?
    public var charts: LinkElement?
    public var comments: LinkElement?
    public var hyperlinks: LinkElement?
    /** Represents if the worksheet is visible.              */
    public var isVisible: Bool?
    /** Gets and sets the view type. */
    public var viewType: String?
    /** Represents worksheet type */
    public var type: String?
    /** Gets or sets a value indicating whether the gridelines are visible.Default     is true. */
    public var isGridlinesVisible: Bool?
    /** Gets or sets a value indicating whether the worksheet will display row and column headers.Default is true.              */
    public var isRowColumnHeadersVisible: Bool?
    /** Indications the specified worksheet is shown in normal view or page break preview. */
    public var isPageBreakPreview: Bool?
    /** True if zero values are displayed. */
    public var displayZeros: Bool?
    /** Flag indicating whether the Transition Formula Evaluation (Lotus compatibility) option is enabled.              */
    public var transitionEvaluation: Bool?
    /** Indicates if the specified worksheet is displayed from right to left instead    of from left to right.  Default is false.              */
    public var displayRightToLeft: Bool?
    /** Represents first visible column index. */
    public var firstVisibleColumn: Int32?
    public var oleObjects: LinkElement?
    /** Indicates whether show outline.              */
    public var isOutlineShown: Bool?
    /** Gets or sets the name of the worksheet.              */
    public var name: String?
    public var autoShapes: LinkElement?
    public var cells: LinkElement?
    public var validations: LinkElement?
    /** Represents the scaling factor in percent. It should be btween 10 and 400.              */
    public var zoom: Int32?
    public var conditionalFormattings: LinkElement?
    /** Indicates whether this worksheet is selected when the workbook is opened. */
    public var isSelected: Bool?
    /** Represents worksheet tab color. */
    public var tabColor: Color?
    /** Represents first visible row index.              */
    public var firstVisibleRow: Int32?
    /** Flag indicating whether the Transition Formula Entry (Lotus compatibility) option is enabled. */
    public var transitionEntry: Bool?
    /** Indicates the state for this sheet visibility              */
    public var visibilityType: String?
    /** Indicates whether the ruler is visible. Only apply for page break preview. */
    public var isRulerVisible: Bool?
    public var links: [Link]?
    /** Indicates if the worksheet is protected. */
    public var isProtected: Bool
    public var mergedCells: LinkElement?

public enum CodingKeys: String, CodingKey { 
        case index = "Index"
        case pictures = "Pictures"
        case charts = "Charts"
        case comments = "Comments"
        case hyperlinks = "Hyperlinks"
        case isVisible = "IsVisible"
        case viewType = "ViewType"
        case type = "Type"
        case isGridlinesVisible = "IsGridlinesVisible"
        case isRowColumnHeadersVisible = "IsRowColumnHeadersVisible"
        case isPageBreakPreview = "IsPageBreakPreview"
        case displayZeros = "DisplayZeros"
        case transitionEvaluation = "TransitionEvaluation"
        case displayRightToLeft = "DisplayRightToLeft"
        case firstVisibleColumn = "FirstVisibleColumn"
        case oleObjects = "OleObjects"
        case isOutlineShown = "IsOutlineShown"
        case name = "Name"
        case autoShapes = "AutoShapes"
        case cells = "Cells"
        case validations = "Validations"
        case zoom = "Zoom"
        case conditionalFormattings = "ConditionalFormattings"
        case isSelected = "IsSelected"
        case tabColor = "TabColor"
        case firstVisibleRow = "FirstVisibleRow"
        case transitionEntry = "TransitionEntry"
        case visibilityType = "VisibilityType"
        case isRulerVisible = "IsRulerVisible"
        case links = "Links"
        case isProtected = "IsProtected"
        case mergedCells = "MergedCells"
    }

    public init(index: Int32, pictures: LinkElement?, charts: LinkElement?, comments: LinkElement?, hyperlinks: LinkElement?, isVisible: Bool?, viewType: String?, type: String?, isGridlinesVisible: Bool?, isRowColumnHeadersVisible: Bool?, isPageBreakPreview: Bool?, displayZeros: Bool?, transitionEvaluation: Bool?, displayRightToLeft: Bool?, firstVisibleColumn: Int32?, oleObjects: LinkElement?, isOutlineShown: Bool?, name: String?, autoShapes: LinkElement?, cells: LinkElement?, validations: LinkElement?, zoom: Int32?, conditionalFormattings: LinkElement?, isSelected: Bool?, tabColor: Color?, firstVisibleRow: Int32?, transitionEntry: Bool?, visibilityType: String?, isRulerVisible: Bool?, links: [Link]?, isProtected: Bool, mergedCells: LinkElement?) {
        self.index = index
        self.pictures = pictures
        self.charts = charts
        self.comments = comments
        self.hyperlinks = hyperlinks
        self.isVisible = isVisible
        self.viewType = viewType
        self.type = type
        self.isGridlinesVisible = isGridlinesVisible
        self.isRowColumnHeadersVisible = isRowColumnHeadersVisible
        self.isPageBreakPreview = isPageBreakPreview
        self.displayZeros = displayZeros
        self.transitionEvaluation = transitionEvaluation
        self.displayRightToLeft = displayRightToLeft
        self.firstVisibleColumn = firstVisibleColumn
        self.oleObjects = oleObjects
        self.isOutlineShown = isOutlineShown
        self.name = name
        self.autoShapes = autoShapes
        self.cells = cells
        self.validations = validations
        self.zoom = zoom
        self.conditionalFormattings = conditionalFormattings
        self.isSelected = isSelected
        self.tabColor = tabColor
        self.firstVisibleRow = firstVisibleRow
        self.transitionEntry = transitionEntry
        self.visibilityType = visibilityType
        self.isRulerVisible = isRulerVisible
        self.links = links
        self.isProtected = isProtected
        self.mergedCells = mergedCells
    }


}

