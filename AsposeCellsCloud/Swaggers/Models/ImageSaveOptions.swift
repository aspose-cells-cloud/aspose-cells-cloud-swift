//
// ImageSaveOptions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class ImageSaveOptions: SaveOptions {

    public var chartImageType: String?
    public var embededImageNameInSvg: String?
    public var horizontalResolution: Int32?
    public var imageFormat: String?
    public var isCellAutoFit: Bool?
    public var onePagePerSheet: Bool?
    public var onlyArea: Bool?
    public var printingPage: String?
    public var printWithStatusDialog: Int32?
    public var quality: Int32?
    public var tiffCompression: String?
    public var verticalResolution: Int32?

public enum CodingKeys: String, CodingKey {
        case chartImageType = "ChartImageType"
        case embededImageNameInSvg = "EmbededImageNameInSvg"
        case horizontalResolution = "HorizontalResolution"
        case imageFormat = "ImageFormat"
        case isCellAutoFit = "IsCellAutoFit"
        case onePagePerSheet = "OnePagePerSheet"
        case onlyArea = "OnlyArea"
        case printingPage = "PrintingPage"
        case printWithStatusDialog = "PrintWithStatusDialog"
        case quality = "Quality"
        case tiffCompression = "TiffCompression"
        case verticalResolution = "VerticalResolution"
    }

    public init(enableHTTPCompression: Bool?, saveFormat: String?, clearData: Bool?, cachedFileFolder: String?, validateMergedAreas: Bool?, refreshChartCache: Bool?, createDirectory: Bool?, sortNames: Bool?, chartImageType: String?, embededImageNameInSvg: String?, horizontalResolution: Int32?, imageFormat: String?, isCellAutoFit: Bool?, onePagePerSheet: Bool?, onlyArea: Bool?, printingPage: String?, printWithStatusDialog: Int32?, quality: Int32?, tiffCompression: String?, verticalResolution: Int32?) {
        self.chartImageType = chartImageType
        self.embededImageNameInSvg = embededImageNameInSvg
        self.horizontalResolution = horizontalResolution
        self.imageFormat = imageFormat
        self.isCellAutoFit = isCellAutoFit
        self.onePagePerSheet = onePagePerSheet
        self.onlyArea = onlyArea
        self.printingPage = printingPage
        self.printWithStatusDialog = printWithStatusDialog
        self.quality = quality
        self.tiffCompression = tiffCompression
        self.verticalResolution = verticalResolution
        super.init(enableHTTPCompression: enableHTTPCompression, saveFormat: saveFormat, clearData: clearData, cachedFileFolder: cachedFileFolder, validateMergedAreas: validateMergedAreas, refreshChartCache: refreshChartCache, createDirectory: createDirectory, sortNames: sortNames)
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(chartImageType, forKey: "ChartImageType")
        try container.encodeIfPresent(embededImageNameInSvg, forKey: "EmbededImageNameInSvg")
        try container.encodeIfPresent(horizontalResolution, forKey: "HorizontalResolution")
        try container.encodeIfPresent(imageFormat, forKey: "ImageFormat")
        
        try container.encodeIfPresent(isCellAutoFit, forKey: "IsCellAutoFit")
        try container.encodeIfPresent(onePagePerSheet, forKey: "OnePagePerSheet")
        try container.encodeIfPresent(onlyArea, forKey: "OnlyArea")
        try container.encodeIfPresent(printingPage, forKey: "PrintingPage")
        
        try container.encodeIfPresent(printWithStatusDialog, forKey: "PrintWithStatusDialog")
        try container.encodeIfPresent(quality, forKey: "Quality")
        try container.encodeIfPresent(tiffCompression, forKey: "TiffCompression")
        try container.encodeIfPresent(verticalResolution, forKey: "VerticalResolution")
        try super.encode(to: encoder)
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        chartImageType = try container.decodeIfPresent(String.self, forKey: "ChartImageType")
        embededImageNameInSvg = try container.decodeIfPresent(String.self, forKey: "EmbededImageNameInSvg")
        horizontalResolution = try container.decodeIfPresent(Int32.self, forKey: "HorizontalResolution")
        imageFormat = try container.decodeIfPresent(String.self, forKey: "ImageFormat")
        
        isCellAutoFit = try container.decodeIfPresent(Bool.self, forKey: "IsCellAutoFit")
        onePagePerSheet = try container.decodeIfPresent(Bool.self, forKey: "OnePagePerSheet")
        onlyArea = try container.decodeIfPresent(Bool.self, forKey: "OnlyArea")
        printingPage = try container.decodeIfPresent(String.self, forKey: "PrintingPage")
        
        printWithStatusDialog = try container.decodeIfPresent(Int32.self, forKey: "PrintWithStatusDialog")
        quality = try container.decodeIfPresent(Int32.self, forKey: "Quality")
        tiffCompression = try container.decodeIfPresent(String.self, forKey: "TiffCompression")
        verticalResolution = try container.decodeIfPresent(Int32.self, forKey: "VerticalResolution")
        try super.init(from: decoder)
    }

}

