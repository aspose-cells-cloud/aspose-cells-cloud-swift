//
// ImageSaveOptions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct ImageSaveOptions: Codable {

    public var enableHTTPCompression: Bool?
    public var saveFormat: String?
    /** Make the workbook empty after saving the file. */
    public var clearData: Bool?
    /** The cached file folder is used to store some large data. */
    public var cachedFileFolder: String?
    /** Indicates whether validate merged areas before saving the file. The default value is false.              */
    public var validateMergedAreas: Bool?
    public var refreshChartCache: Bool?
    /** If true and the directory does not exist, the directory will be automatically created before saving the file.              */
    public var createDirectory: Bool?
    public var sortNames: Bool?
    public var chartImageType: String?
    public var embededImageNameInSvg: String?
    public var horizontalResolution: Int32?
    public var imageFormat: String?
    public var isCellAutoFit: Bool?
    public var onePagePerSheet: Bool?
    public var onlyArea: Bool?
    public var printingPage: String?
    public var printWithStatusDialog: Int32?
    public var quality: Int32?
    public var tiffCompression: String?
    public var verticalResolution: Int32?

public enum CodingKeys: String, CodingKey { 
        case enableHTTPCompression = "EnableHTTPCompression"
        case saveFormat = "SaveFormat"
        case clearData = "ClearData"
        case cachedFileFolder = "CachedFileFolder"
        case validateMergedAreas = "ValidateMergedAreas"
        case refreshChartCache = "RefreshChartCache"
        case createDirectory = "CreateDirectory"
        case sortNames = "SortNames"
        case chartImageType = "ChartImageType"
        case embededImageNameInSvg = "EmbededImageNameInSvg"
        case horizontalResolution = "HorizontalResolution"
        case imageFormat = "ImageFormat"
        case isCellAutoFit = "IsCellAutoFit"
        case onePagePerSheet = "OnePagePerSheet"
        case onlyArea = "OnlyArea"
        case printingPage = "PrintingPage"
        case printWithStatusDialog = "PrintWithStatusDialog"
        case quality = "Quality"
        case tiffCompression = "TiffCompression"
        case verticalResolution = "VerticalResolution"
    }

    public init(enableHTTPCompression: Bool?, saveFormat: String?, clearData: Bool?, cachedFileFolder: String?, validateMergedAreas: Bool?, refreshChartCache: Bool?, createDirectory: Bool?, sortNames: Bool?, chartImageType: String?, embededImageNameInSvg: String?, horizontalResolution: Int32?, imageFormat: String?, isCellAutoFit: Bool?, onePagePerSheet: Bool?, onlyArea: Bool?, printingPage: String?, printWithStatusDialog: Int32?, quality: Int32?, tiffCompression: String?, verticalResolution: Int32?) {
        self.enableHTTPCompression = enableHTTPCompression
        self.saveFormat = saveFormat
        self.clearData = clearData
        self.cachedFileFolder = cachedFileFolder
        self.validateMergedAreas = validateMergedAreas
        self.refreshChartCache = refreshChartCache
        self.createDirectory = createDirectory
        self.sortNames = sortNames
        self.chartImageType = chartImageType
        self.embededImageNameInSvg = embededImageNameInSvg
        self.horizontalResolution = horizontalResolution
        self.imageFormat = imageFormat
        self.isCellAutoFit = isCellAutoFit
        self.onePagePerSheet = onePagePerSheet
        self.onlyArea = onlyArea
        self.printingPage = printingPage
        self.printWithStatusDialog = printWithStatusDialog
        self.quality = quality
        self.tiffCompression = tiffCompression
        self.verticalResolution = verticalResolution
    }


}

