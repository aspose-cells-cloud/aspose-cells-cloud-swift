//
// TxtSaveOptions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class TxtSaveOptions: SaveOptions {

    public var quoteType: String?
    public var separator: String?
    public var separatorString: String?
    public var alwaysQuoted: Bool?

public enum CodingKeys: String, CodingKey {
        case quoteType = "QuoteType"
        case separator = "Separator"
        case separatorString = "SeparatorString"
        case alwaysQuoted = "AlwaysQuoted"
    }

    public init(enableHTTPCompression: Bool?, saveFormat: String?, clearData: Bool?, cachedFileFolder: String?, validateMergedAreas: Bool?, refreshChartCache: Bool?, createDirectory: Bool?, sortNames: Bool?, quoteType: String?, separator: String?, separatorString: String?, alwaysQuoted: Bool?) {
        self.quoteType = quoteType
        self.separator = separator
        self.separatorString = separatorString
        self.alwaysQuoted = alwaysQuoted
        super.init(enableHTTPCompression: enableHTTPCompression, saveFormat: saveFormat, clearData: clearData, cachedFileFolder: cachedFileFolder, validateMergedAreas: validateMergedAreas, refreshChartCache: refreshChartCache, createDirectory: createDirectory, sortNames: sortNames)
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(quoteType, forKey: "QuoteType")
        try container.encodeIfPresent(separator, forKey: "Separator")
        try container.encodeIfPresent(separatorString, forKey: "SeparatorString")
        try container.encodeIfPresent(alwaysQuoted, forKey: "AlwaysQuoted")
        try super.encode(to: encoder)
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        quoteType = try container.decodeIfPresent(String.self, forKey: "QuoteType")
        separator = try container.decodeIfPresent(String.self, forKey: "Separator")
        separatorString = try container.decodeIfPresent(String.self, forKey: "SeparatorString")
        alwaysQuoted = try container.decodeIfPresent(Bool.self, forKey: "AlwaysQuoted")
        try super.init(from: decoder)
    }

}

