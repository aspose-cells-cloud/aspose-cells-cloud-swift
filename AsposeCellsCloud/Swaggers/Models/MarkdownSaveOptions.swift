//
// MarkdownSaveOptions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class MarkdownSaveOptions: SaveOptions {

    public var encoding: String?
    public var formatStrategy: String?
    public var lineSeparator: String?

public enum CodingKeys: String, CodingKey {
        case encoding = "Encoding"
        case formatStrategy = "FormatStrategy"
        case lineSeparator = "LineSeparator"
    }

    public init(enableHTTPCompression: Bool?, saveFormat: String?, clearData: Bool?, cachedFileFolder: String?, validateMergedAreas: Bool?, refreshChartCache: Bool?, createDirectory: Bool?, sortNames: Bool?, encoding: String?, formatStrategy: String?, lineSeparator: String?) {
        self.encoding = encoding
        self.formatStrategy = formatStrategy
        self.lineSeparator = lineSeparator
        super.init(enableHTTPCompression: enableHTTPCompression, saveFormat: saveFormat, clearData: clearData, cachedFileFolder: cachedFileFolder, validateMergedAreas: validateMergedAreas, refreshChartCache: refreshChartCache, createDirectory: createDirectory, sortNames: sortNames)
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(encoding, forKey: "Encoding")
        try container.encodeIfPresent(formatStrategy, forKey: "FormatStrategy")
        try container.encodeIfPresent(lineSeparator, forKey: "LineSeparator")
        try super.encode(to: encoder)
    }
    
    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        encoding = try container.decodeIfPresent(String.self, forKey: "Encoding")
        formatStrategy = try container.decodeIfPresent(String.self, forKey: "FormatStrategy")
        lineSeparator = try container.decodeIfPresent(String.self, forKey: "LineSeparator")
        try super.init(from: decoder)
    }

}

