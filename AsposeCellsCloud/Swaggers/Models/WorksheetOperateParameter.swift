//
// WorksheetOperateParameter.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class WorksheetOperateParameter: OperateParameter {

    public var name: String?
    public var sheetType: String?
    public var newName: String?
    public var movingRequest: WorksheetMovingRequest?

public enum CodingKeys: String, CodingKey {
        case name = "Name"
        case sheetType = "SheetType"
        case newName = "NewName"
        case movingRequest = "MovingRequest"
    }

    public init(operateType: String?, name: String?, sheetType: String?, newName: String?, movingRequest: WorksheetMovingRequest?) {
        self.name = name
        self.sheetType = sheetType
        self.newName = newName
        self.movingRequest = movingRequest
        super.init(operateType: operateType)
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(sheetType, forKey: "SheetType")
        try container.encodeIfPresent(newName, forKey: "NewName")
        try container.encodeIfPresent(movingRequest, forKey: "MovingRequest")
        
        try super.encode(to: encoder)
    }
    
    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        name = try container.decodeIfPresent(String.self, forKey: "Name")
        sheetType = try container.decodeIfPresent(String.self, forKey: "SheetType")
        newName = try container.decodeIfPresent(String.self, forKey: "NewName")
        movingRequest = try container.decodeIfPresent(WorksheetMovingRequest.self, forKey: "MovingRequest")
        
        try super.init(from: decoder)
    }

}

