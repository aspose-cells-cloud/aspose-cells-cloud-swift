//
// PageSetup.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** excel print page setting */

public struct PageSetup: Codable {

    public var link: Link?
    /** True means that the header/footer of the first page is different with other pages. */
    public var isHFDiffFirst: Bool?
    /** Represents the number of pages wide the worksheet will be scaled to when it&#39;s printed. */
    public var fitToPagesWide: Int32?
    /** Represents the print quality. */
    public var printQuality: Int32?
    /** Represents if the sheet will be printed without graphics. */
    public var printDraft: Bool?
    /** Represents the first page number that will be used when this sheet is printed. */
    public var firstPageNumber: Int32?
    /** Represents the size of the paper. */
    public var paperSize: String?
    /** Represents the way comments are printed with the sheet. */
    public var printComments: String?
    /** Specifies the type of print error displayed. */
    public var printErrors: String?
    /** Represent if the sheet is printed centered vertically. */
    public var centerVertically: Bool?
    /** If this property is False, the FitToPagesWide and FitToPagesTall properties control how the worksheet is scaled. */
    public var isPercentScale: Bool?
    /** Represents if elements of the document will be printed in black and white. True/False */
    public var blackAndWhite: Bool?
    /** Represents the columns that contain the cells to be repeated on the left side of each page. */
    public var printTitleColumns: String?
    /** Indicates whether header and footer margins are aligned with the page margins.Only applies for Excel 2007. */
    public var isHFAlignMargins: Bool?
    /** Represents the range to be printed. */
    public var printArea: String?
    /** Represents the distance from the bottom of the page to the footer, in unit of centimeters. */
    public var footerMargin: Double?
    /** Represents the size of the left margin, in unit of centimeters. */
    public var leftMargin: Double?
    /** Represent if the sheet is printed centered horizontally. */
    public var centerHorizontally: Bool?
    /** Represents the distance from the top of the page to the header, in unit of centimeters. */
    public var headerMargin: Double?
    /** Represents the size of the top margin, in unit of centimeters. */
    public var topMargin: Double?
    /** Represents the page footor. */
    public var footer: [PageSection]?
    /** Represents the number of pages tall the worksheet will be scaled to when it&#39;s printed. */
    public var fitToPagesTall: Int32?
    /** Indicates whether header and footer are scaled with document scaling.Only applies for Excel 2007.  */
    public var isHFScaleWithDoc: Bool?
    /** Represents if row and column headings are printed with this page. */
    public var printHeadings: Bool?
    /** Represents the scaling factor in percent. It should be between 10 and 400. */
    public var zoom: Int32?
    /** Represents the rows that contain the cells to be repeated at the top of each page. */
    public var printTitleRows: String?
    /** Represents the order that Microsoft Excel uses to number pages when printing a large worksheet. */
    public var order: String?
    /** Get and sets number of copies to print. */
    public var printCopies: Int32?
    /** Represents page print orientation. */
    public var orientation: String?
    /** Represents the size of the right margin, in unit of centimeters. */
    public var rightMargin: Double?
    /** Represents if cell gridlines are printed on the page. */
    public var printGridlines: Bool?
    /** Indicates whether the first the page number is automatically assigned. */
    public var isAutoFirstPageNumber: Bool?
    /** Represents the page header. */
    public var header: [PageSection]?
    /** True means that the header/footer of the odd pages is different with odd pages. */
    public var isHFDiffOddEven: Bool?
    /** Represents the size of the bottom margin, in unit of centimeters. */
    public var bottomMargin: Double?

public enum CodingKeys: String, CodingKey { 
        case link = "link"
        case isHFDiffFirst = "IsHFDiffFirst"
        case fitToPagesWide = "FitToPagesWide"
        case printQuality = "PrintQuality"
        case printDraft = "PrintDraft"
        case firstPageNumber = "FirstPageNumber"
        case paperSize = "PaperSize"
        case printComments = "PrintComments"
        case printErrors = "PrintErrors"
        case centerVertically = "CenterVertically"
        case isPercentScale = "IsPercentScale"
        case blackAndWhite = "BlackAndWhite"
        case printTitleColumns = "PrintTitleColumns"
        case isHFAlignMargins = "IsHFAlignMargins"
        case printArea = "PrintArea"
        case footerMargin = "FooterMargin"
        case leftMargin = "LeftMargin"
        case centerHorizontally = "CenterHorizontally"
        case headerMargin = "HeaderMargin"
        case topMargin = "TopMargin"
        case footer = "Footer"
        case fitToPagesTall = "FitToPagesTall"
        case isHFScaleWithDoc = "IsHFScaleWithDoc"
        case printHeadings = "PrintHeadings"
        case zoom = "Zoom"
        case printTitleRows = "PrintTitleRows"
        case order = "Order"
        case printCopies = "PrintCopies"
        case orientation = "Orientation"
        case rightMargin = "RightMargin"
        case printGridlines = "PrintGridlines"
        case isAutoFirstPageNumber = "IsAutoFirstPageNumber"
        case header = "Header"
        case isHFDiffOddEven = "IsHFDiffOddEven"
        case bottomMargin = "BottomMargin"
    }

    public init(link: Link?, isHFDiffFirst: Bool?, fitToPagesWide: Int32?, printQuality: Int32?, printDraft: Bool?, firstPageNumber: Int32?, paperSize: String?, printComments: String?, printErrors: String?, centerVertically: Bool?, isPercentScale: Bool?, blackAndWhite: Bool?, printTitleColumns: String?, isHFAlignMargins: Bool?, printArea: String?, footerMargin: Double?, leftMargin: Double?, centerHorizontally: Bool?, headerMargin: Double?, topMargin: Double?, footer: [PageSection]?, fitToPagesTall: Int32?, isHFScaleWithDoc: Bool?, printHeadings: Bool?, zoom: Int32?, printTitleRows: String?, order: String?, printCopies: Int32?, orientation: String?, rightMargin: Double?, printGridlines: Bool?, isAutoFirstPageNumber: Bool?, header: [PageSection]?, isHFDiffOddEven: Bool?, bottomMargin: Double?) {
        self.link = link
        self.isHFDiffFirst = isHFDiffFirst
        self.fitToPagesWide = fitToPagesWide
        self.printQuality = printQuality
        self.printDraft = printDraft
        self.firstPageNumber = firstPageNumber
        self.paperSize = paperSize
        self.printComments = printComments
        self.printErrors = printErrors
        self.centerVertically = centerVertically
        self.isPercentScale = isPercentScale
        self.blackAndWhite = blackAndWhite
        self.printTitleColumns = printTitleColumns
        self.isHFAlignMargins = isHFAlignMargins
        self.printArea = printArea
        self.footerMargin = footerMargin
        self.leftMargin = leftMargin
        self.centerHorizontally = centerHorizontally
        self.headerMargin = headerMargin
        self.topMargin = topMargin
        self.footer = footer
        self.fitToPagesTall = fitToPagesTall
        self.isHFScaleWithDoc = isHFScaleWithDoc
        self.printHeadings = printHeadings
        self.zoom = zoom
        self.printTitleRows = printTitleRows
        self.order = order
        self.printCopies = printCopies
        self.orientation = orientation
        self.rightMargin = rightMargin
        self.printGridlines = printGridlines
        self.isAutoFirstPageNumber = isAutoFirstPageNumber
        self.header = header
        self.isHFDiffOddEven = isHFDiffOddEven
        self.bottomMargin = bottomMargin
    }


}

