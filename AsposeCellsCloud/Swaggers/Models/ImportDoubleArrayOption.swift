//
// ImportDoubleArrayOption.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class ImportDoubleArrayOption: ImportOption {

    public var data: [Double]?
    public var isVertical: Bool?
    public var firstRow: Int32?
    public var firstColumn: Int32?

public enum CodingKeys: String, CodingKey {
        case data = "Data"
        case isVertical = "IsVertical"
        case firstRow = "FirstRow"
        case firstColumn = "FirstColumn"
    }

    public init(source: FileSource?, importDataType: String?, destinationWorksheet: String?, isInsert: Bool?, data: [Double]?, isVertical: Bool?, firstRow: Int32?, firstColumn: Int32?) {
        self.data = data
        self.isVertical = isVertical
        self.firstRow = firstRow
        self.firstColumn = firstColumn
        super.init(source: source, importDataType: importDataType, destinationWorksheet: destinationWorksheet, isInsert: isInsert)
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(data, forKey: "Data")
        try container.encodeIfPresent(isVertical, forKey: "IsVertical")
        try container.encodeIfPresent(firstRow, forKey: "FirstRow")
        try container.encodeIfPresent(firstColumn, forKey: "FirstColumn")

        try super.encode(to: encoder)
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        data = try container.decodeIfPresent([Double].self, forKey: "Data")
        isVertical = try container.decodeIfPresent(Bool.self, forKey: "IsVertical")
        firstRow = try container.decodeIfPresent(Int32.self, forKey: "FirstRow")
        firstColumn = try container.decodeIfPresent(Int32.self, forKey: "FirstColumn")
        
        try super.init(from: decoder)
    }

}

