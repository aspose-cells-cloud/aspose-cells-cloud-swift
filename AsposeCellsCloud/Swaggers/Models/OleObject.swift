//
// OleObject.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct OleObject: Codable {

    public var alternativeText: String?
    public var bottom: Int32?
    public var top: Int32?
    public var width: Int32?
    public var htmlText: String?
    public var textVerticalAlignment: String?
    public var autoShapeType: String?
    public var isPrintable: Bool?
    public var upperLeftColumn: Int32?
    public var isLockAspectRatio: Bool?
    public var isGroup: Bool?
    public var rotationAngle: Double?
    public var zOrderPosition: Int32?
    public var textHorizontalOverflow: String?
    public var msoDrawingType: String?
    public var textOrientationType: String?
    public var placement: String?
    public var name: String?
    public var isWordArt: Bool?
    public var linkedCell: String?
    public var upperLeftRow: Int32?
    public var isLocked: Bool?
    public var lowerRightRow: Int32?
    public var isTextWrapped: Bool?
    public var Y: Int32?
    public var X: Int32?
    public var isHidden: Bool?
    public var _left: Int32?
    public var _right: Int32?
    public var text: String?
    public var lowerRightColumn: Int32?
    public var height: Int32?
    public var textHorizontalAlignment: String?
    public var textVerticalOverflow: String?
    public var link: Link?
    public var displayAsIcon: Bool?
    public var fileFormatType: String?
    public var sourceFullName: String?
    public var isAutoSize: Bool?
    public var imageSourceFullName: String?
    public var progID: String?
    public var isLink: Bool?

public enum CodingKeys: String, CodingKey { 
        case alternativeText = "AlternativeText"
        case bottom = "Bottom"
        case top = "Top"
        case width = "Width"
        case htmlText = "HtmlText"
        case textVerticalAlignment = "TextVerticalAlignment"
        case autoShapeType = "AutoShapeType"
        case isPrintable = "IsPrintable"
        case upperLeftColumn = "UpperLeftColumn"
        case isLockAspectRatio = "IsLockAspectRatio"
        case isGroup = "IsGroup"
        case rotationAngle = "RotationAngle"
        case zOrderPosition = "ZOrderPosition"
        case textHorizontalOverflow = "TextHorizontalOverflow"
        case msoDrawingType = "MsoDrawingType"
        case textOrientationType = "TextOrientationType"
        case placement = "Placement"
        case name = "Name"
        case isWordArt = "IsWordArt"
        case linkedCell = "LinkedCell"
        case upperLeftRow = "UpperLeftRow"
        case isLocked = "IsLocked"
        case lowerRightRow = "LowerRightRow"
        case isTextWrapped = "IsTextWrapped"
        case Y = "Y"
        case X = "X"
        case isHidden = "IsHidden"
        case _left = "Left"
        case _right = "Right"
        case text = "Text"
        case lowerRightColumn = "LowerRightColumn"
        case height = "Height"
        case textHorizontalAlignment = "TextHorizontalAlignment"
        case textVerticalOverflow = "TextVerticalOverflow"
        case link = "link"
        case displayAsIcon = "DisplayAsIcon"
        case fileFormatType = "FileFormatType"
        case sourceFullName = "SourceFullName"
        case isAutoSize = "IsAutoSize"
        case imageSourceFullName = "ImageSourceFullName"
        case progID = "ProgID"
        case isLink = "IsLink"
    }

    public init(alternativeText: String?, bottom: Int32?, top: Int32?, width: Int32?, htmlText: String?, textVerticalAlignment: String?, autoShapeType: String?, isPrintable: Bool?, upperLeftColumn: Int32?, isLockAspectRatio: Bool?, isGroup: Bool?, rotationAngle: Double?, zOrderPosition: Int32?, textHorizontalOverflow: String?, msoDrawingType: String?, textOrientationType: String?, placement: String?, name: String?, isWordArt: Bool?, linkedCell: String?, upperLeftRow: Int32?, isLocked: Bool?, lowerRightRow: Int32?, isTextWrapped: Bool?, Y: Int32?, X: Int32?, isHidden: Bool?, _left: Int32?, _right: Int32?, text: String?, lowerRightColumn: Int32?, height: Int32?, textHorizontalAlignment: String?, textVerticalOverflow: String?, link: Link?, displayAsIcon: Bool?, fileFormatType: String?, sourceFullName: String?, isAutoSize: Bool?, imageSourceFullName: String?, progID: String?, isLink: Bool?) {
        self.alternativeText = alternativeText
        self.bottom = bottom
        self.top = top
        self.width = width
        self.htmlText = htmlText
        self.textVerticalAlignment = textVerticalAlignment
        self.autoShapeType = autoShapeType
        self.isPrintable = isPrintable
        self.upperLeftColumn = upperLeftColumn
        self.isLockAspectRatio = isLockAspectRatio
        self.isGroup = isGroup
        self.rotationAngle = rotationAngle
        self.zOrderPosition = zOrderPosition
        self.textHorizontalOverflow = textHorizontalOverflow
        self.msoDrawingType = msoDrawingType
        self.textOrientationType = textOrientationType
        self.placement = placement
        self.name = name
        self.isWordArt = isWordArt
        self.linkedCell = linkedCell
        self.upperLeftRow = upperLeftRow
        self.isLocked = isLocked
        self.lowerRightRow = lowerRightRow
        self.isTextWrapped = isTextWrapped
        self.Y = Y
        self.X = X
        self.isHidden = isHidden
        self._left = _left
        self._right = _right
        self.text = text
        self.lowerRightColumn = lowerRightColumn
        self.height = height
        self.textHorizontalAlignment = textHorizontalAlignment
        self.textVerticalOverflow = textVerticalOverflow
        self.link = link
        self.displayAsIcon = displayAsIcon
        self.fileFormatType = fileFormatType
        self.sourceFullName = sourceFullName
        self.isAutoSize = isAutoSize
        self.imageSourceFullName = imageSourceFullName
        self.progID = progID
        self.isLink = isLink
    }


}

