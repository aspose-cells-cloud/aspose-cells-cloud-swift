//
// Chart.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct Chart: Codable {

    public var link: Link?
    /** Gets or sets the angle of the first pie-chart or doughnut-chart slice, in degrees (clockwise from vertical). Applies only to pie, 3-D pie, and doughnut charts, 0 to 360. */
    public var firstSliceAngle: Int32?
    /** Returns a Floor object that represents the walls of a 3-D chart.              */
    public var floor: LinkElement?
    /** Gets and sets how to plot the empty cells. */
    public var plotEmptyCellsType: String?
    /** True if Microsoft Excel scales a 3-D chart so that it&#39;s closer in size to the equivalent 2-D chart. The RightAngleAxes property must be True. */
    public var autoScaling: Bool?
    /** Gets and sets the builtin style. */
    public var style: Int32?
    /** Gets the chart&#39;s series axis. */
    public var seriesAxis: LinkElement?
    /** Gets the chart&#39;s Y axis. */
    public var valueAxis: LinkElement?
    /** Gets or sets a value indicating whether the chart displays a data table. */
    public var showDataTable: Bool?
    /** Indicates whether the chart is a 3d chart. */
    public var is3D: Bool?
    /** Gets the chart area in the worksheet */
    public var chartArea: LinkElement?
    /** Represents the elevation of the 3-D chart view, in degrees. */
    public var elevation: Int32?
    public var sideWall: LinkElement?
    /** Gets or sets a chart&#39;s type. */
    public var type: String?
    /** Gets the chart&#39;s title. */
    public var title: LinkElement?
    /** Returns a Walls object that represents the walls of a 3-D chart. */
    public var walls: LinkElement?
    public var backWall: LinkElement?
    /** Represents the chart data table. */
    public var chartDataTable: LinkElement?
    /** Returns or sets the height of a 3-D chart as a percentage of the chart width (between 5 and 500 percent). */
    public var heightPercent: Int32?
    /** Returns or sets the space between bar or column clusters, as a percentage of the bar or column width. The value of this property must be between 0 and 500.              */
    public var gapWidth: Int32?
    /** Gets the chart legend. */
    public var legend: LinkElement?
    /** Represents the chartShape; */
    public var chartObject: LinkElement?
    /** Gets or sets a value indicating whether the chart displays a data table. */
    public var isRectangularCornered: Bool?
    /** Gets the chart&#39;s second X axis. */
    public var secondCategoryAxis: LinkElement?
    /** Gets the chart&#39;s second Y axis. */
    public var secondValueAxis: LinkElement?
    /** Represents the way the chart is attached to the cells below it. */
    public var placement: String?
    /** Gets and sets the name of the chart. */
    public var name: String?
    /** True if Microsoft Excel resizes the chart to match the size of the chart sheet window. */
    public var sizeWithWindow: Bool?
    /** True if the chart axes are at right angles.Applies only for 3-D charts(except Column3D and 3-D Pie Charts). */
    public var rightAngleAxes: Bool?
    /** Indicates whether only plot visible cells. */
    public var plotVisibleCells: Bool?
    /** Gets or sets a value indicating whether the chart legend will be displayed. Default is true. */
    public var showLegend: Bool?
    /** The source is the data of the pivotTable.If PivotSource is not empty ,the chart is PivotChart. */
    public var pivotSource: String?
    /** Represents the depth of a 3-D chart as a percentage of the chart width (between 20 and 2000 percent). */
    public var depthPercent: Int32?
    /** Gets and sets the printed chart size. */
    public var printSize: String?
    /** Gets or sets the distance between the data series in a 3-D chart, as a percentage of the marker width.The value of this property must be between 0 and 500. */
    public var gapDepth: Int32?
    /** Returns all drawing shapes in this chart. */
    public var shapes: LinkElement?
    /** True if gridlines are drawn two-dimensionally on a 3-D chart. */
    public var wallsAndGridlines2D: Bool?
    /** Gets a SeriesCollection collection representing the data series in the chart. */
    public var nSeries: LinkElement?
    /** Represents the rotation of the 3-D chart view (the rotation of the plot area around the z-axis, in degrees). */
    public var rotationAngle: Int32?
    /** Gets the chart&#39;s plot area which includes axis tick lables. */
    public var plotArea: LinkElement?
    /** Gets the chart&#39;s X axis. The property is read only */
    public var categoryAxis: LinkElement?
    /** Returns or sets the perspective for the 3-D chart view. Must be between 0 and 100.This property is ignored if the RightAngleAxes property is True. */
    public var perspective: Int32?
    /** Indicates whether hide the pivot chart field buttons only when the chart is PivotChart */
    public var hidePivotFieldButtons: Bool?
    /** Represents the page setup description in this chart. */
    public var pageSetup: LinkElement?

public enum CodingKeys: String, CodingKey { 
        case link = "link"
        case firstSliceAngle = "FirstSliceAngle"
        case floor = "Floor"
        case plotEmptyCellsType = "PlotEmptyCellsType"
        case autoScaling = "AutoScaling"
        case style = "Style"
        case seriesAxis = "SeriesAxis"
        case valueAxis = "ValueAxis"
        case showDataTable = "ShowDataTable"
        case is3D = "Is3D"
        case chartArea = "ChartArea"
        case elevation = "Elevation"
        case sideWall = "SideWall"
        case type = "Type"
        case title = "Title"
        case walls = "Walls"
        case backWall = "BackWall"
        case chartDataTable = "ChartDataTable"
        case heightPercent = "HeightPercent"
        case gapWidth = "GapWidth"
        case legend = "Legend"
        case chartObject = "ChartObject"
        case isRectangularCornered = "IsRectangularCornered"
        case secondCategoryAxis = "SecondCategoryAxis"
        case secondValueAxis = "SecondValueAxis"
        case placement = "Placement"
        case name = "Name"
        case sizeWithWindow = "SizeWithWindow"
        case rightAngleAxes = "RightAngleAxes"
        case plotVisibleCells = "PlotVisibleCells"
        case showLegend = "ShowLegend"
        case pivotSource = "PivotSource"
        case depthPercent = "DepthPercent"
        case printSize = "PrintSize"
        case gapDepth = "GapDepth"
        case shapes = "Shapes"
        case wallsAndGridlines2D = "WallsAndGridlines2D"
        case nSeries = "NSeries"
        case rotationAngle = "RotationAngle"
        case plotArea = "PlotArea"
        case categoryAxis = "CategoryAxis"
        case perspective = "Perspective"
        case hidePivotFieldButtons = "HidePivotFieldButtons"
        case pageSetup = "PageSetup"
    }

    public init(link: Link?, firstSliceAngle: Int32?, floor: LinkElement?, plotEmptyCellsType: String?, autoScaling: Bool?, style: Int32?, seriesAxis: LinkElement?, valueAxis: LinkElement?, showDataTable: Bool?, is3D: Bool?, chartArea: LinkElement?, elevation: Int32?, sideWall: LinkElement?, type: String?, title: LinkElement?, walls: LinkElement?, backWall: LinkElement?, chartDataTable: LinkElement?, heightPercent: Int32?, gapWidth: Int32?, legend: LinkElement?, chartObject: LinkElement?, isRectangularCornered: Bool?, secondCategoryAxis: LinkElement?, secondValueAxis: LinkElement?, placement: String?, name: String?, sizeWithWindow: Bool?, rightAngleAxes: Bool?, plotVisibleCells: Bool?, showLegend: Bool?, pivotSource: String?, depthPercent: Int32?, printSize: String?, gapDepth: Int32?, shapes: LinkElement?, wallsAndGridlines2D: Bool?, nSeries: LinkElement?, rotationAngle: Int32?, plotArea: LinkElement?, categoryAxis: LinkElement?, perspective: Int32?, hidePivotFieldButtons: Bool?, pageSetup: LinkElement?) {
        self.link = link
        self.firstSliceAngle = firstSliceAngle
        self.floor = floor
        self.plotEmptyCellsType = plotEmptyCellsType
        self.autoScaling = autoScaling
        self.style = style
        self.seriesAxis = seriesAxis
        self.valueAxis = valueAxis
        self.showDataTable = showDataTable
        self.is3D = is3D
        self.chartArea = chartArea
        self.elevation = elevation
        self.sideWall = sideWall
        self.type = type
        self.title = title
        self.walls = walls
        self.backWall = backWall
        self.chartDataTable = chartDataTable
        self.heightPercent = heightPercent
        self.gapWidth = gapWidth
        self.legend = legend
        self.chartObject = chartObject
        self.isRectangularCornered = isRectangularCornered
        self.secondCategoryAxis = secondCategoryAxis
        self.secondValueAxis = secondValueAxis
        self.placement = placement
        self.name = name
        self.sizeWithWindow = sizeWithWindow
        self.rightAngleAxes = rightAngleAxes
        self.plotVisibleCells = plotVisibleCells
        self.showLegend = showLegend
        self.pivotSource = pivotSource
        self.depthPercent = depthPercent
        self.printSize = printSize
        self.gapDepth = gapDepth
        self.shapes = shapes
        self.wallsAndGridlines2D = wallsAndGridlines2D
        self.nSeries = nSeries
        self.rotationAngle = rotationAngle
        self.plotArea = plotArea
        self.categoryAxis = categoryAxis
        self.perspective = perspective
        self.hidePivotFieldButtons = hidePivotFieldButtons
        self.pageSetup = pageSetup
    }


}

