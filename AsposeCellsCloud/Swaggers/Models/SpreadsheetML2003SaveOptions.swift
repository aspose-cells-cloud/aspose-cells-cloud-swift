//
// SpreadsheetML2003SaveOptions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class SpreadsheetML2003SaveOptions: SaveOptions {

    public var exportColumnIndexOfCell: Bool?
    public var isIndentedFormatting: Bool?
    public var limitAsXls: Bool?

public enum CodingKeys: String, CodingKey {
        case exportColumnIndexOfCell = "ExportColumnIndexOfCell"
        case isIndentedFormatting = "IsIndentedFormatting"
        case limitAsXls = "LimitAsXls"
    }

    public init(enableHTTPCompression: Bool?, saveFormat: String?, clearData: Bool?, cachedFileFolder: String?, validateMergedAreas: Bool?, refreshChartCache: Bool?, createDirectory: Bool?, sortNames: Bool?, exportColumnIndexOfCell: Bool?, isIndentedFormatting: Bool?, limitAsXls: Bool?) {
        self.exportColumnIndexOfCell = exportColumnIndexOfCell
        self.isIndentedFormatting = isIndentedFormatting
        self.limitAsXls = limitAsXls
        super.init(enableHTTPCompression: enableHTTPCompression, saveFormat: saveFormat, clearData: clearData, cachedFileFolder: cachedFileFolder, validateMergedAreas: validateMergedAreas, refreshChartCache: refreshChartCache, createDirectory: createDirectory, sortNames: sortNames)
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(exportColumnIndexOfCell, forKey: "ExportColumnIndexOfCell")
        try container.encodeIfPresent(isIndentedFormatting, forKey: "IsIndentedFormatting")
        try container.encodeIfPresent(limitAsXls, forKey: "LimitAsXls")
        
        try super.encode(to: encoder)
    }
    
    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        exportColumnIndexOfCell = try container.decodeIfPresent(Bool.self, forKey: "ExportColumnIndexOfCell")
        isIndentedFormatting = try container.decodeIfPresent(Bool.self, forKey: "IsIndentedFormatting")
        limitAsXls = try container.decodeIfPresent(Bool.self, forKey: "LimitAsXls")
        
        try super.init(from: decoder)
    }

}

