//
// CellsRangesAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeCellsCloud


class CellsRangesAPITests: AsposeCellsCloudTests {

	override func setUp() 
	{
        super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "CellsRangesAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error CellsRangesAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
	}

	func testcellsRangesGetWorksheetCellsRangeValue() 
	{
		let expectation = self.expectation(description: "testcellsRangesGetWorksheetCellsRangeValue")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		var namerange:String? = nil
		let firstRow:Int32? = 0
		let firstColumn:Int32? = 0
		let rowCount:Int32? = 3
		let columnCount:Int32? = 2
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsRangesGetWorksheetCellsRangeValue(name: name, sheetName: sheetName, namerange: namerange, firstRow: firstRow, firstColumn: firstColumn, rowCount: rowCount, columnCount: columnCount, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsRangesGetWorksheetCellsRangeValue")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					//expectation.fulfill()
				}
			}
            
            namerange = "A1:B3"
            CellsAPI.cellsRangesGetWorksheetCellsRangeValue(name: name, sheetName: sheetName, namerange: namerange, firstRow: firstRow, firstColumn: firstColumn, rowCount: rowCount, columnCount: columnCount, folder: folder, storage: storage)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsRangesGetWorksheetCellsRangeValue")
                    return
                }
                
                if let response = response {
                    XCTAssertEqual(response.code, 200)
                    //expectation.fulfill()
                }
            }
            
            namerange = "Name_2"
            CellsAPI.cellsRangesGetWorksheetCellsRangeValue(name: name, sheetName: sheetName, namerange: namerange, firstRow: firstRow, firstColumn: firstColumn, rowCount: rowCount, columnCount: columnCount, folder: folder, storage: storage)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsRangesGetWorksheetCellsRangeValue")
                    return
                }
                
                if let response = response {
                    XCTAssertEqual(response.code, 200)
                    expectation.fulfill()
                }
            }
            
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsRangesPostWorksheetCellsRangeColumnWidth() 
	{
		let expectation = self.expectation(description: "testcellsRangesPostWorksheetCellsRangeColumnWidth")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let value:Double = 10.01
		let range:AsposeCellsCloud.Range? = AsposeCellsCloud.Range(columnCount: 1, rowHeight: nil, name: nil, firstColumn: 1, columnWidth: 10.1, refersTo: nil, rowCount: 10, firstRow: 1, worksheet: nil)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsRangesPostWorksheetCellsRangeColumnWidth(name: name, sheetName: sheetName, value: value, range: range, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsRangesPostWorksheetCellsRangeColumnWidth")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsRangesPostWorksheetCellsRangeMerge() 
	{
		let expectation = self.expectation(description: "testcellsRangesPostWorksheetCellsRangeMerge")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let range:AsposeCellsCloud.Range? = AsposeCellsCloud.Range(columnCount: 1, rowHeight: nil, name: nil, firstColumn: 1, columnWidth: 10.1, refersTo: nil, rowCount: 10, firstRow: 1, worksheet: nil)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsRangesPostWorksheetCellsRangeMerge(name: name, sheetName: sheetName, range: range, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsRangesPostWorksheetCellsRangeMerge")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsRangesPostWorksheetCellsRangeMoveTo() 
	{
		let expectation = self.expectation(description: "testcellsRangesPostWorksheetCellsRangeMoveTo")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let destRow:Int32 = 1
		let destColumn:Int32 = 1
		let range:AsposeCellsCloud.Range? = AsposeCellsCloud.Range(columnCount: 1, rowHeight: nil, name: nil, firstColumn: 1, columnWidth: 10.1, refersTo: nil, rowCount: 10, firstRow: 1, worksheet: nil)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsRangesPostWorksheetCellsRangeMoveTo(name: name, sheetName: sheetName, destRow: destRow, destColumn: destColumn, range: range, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsRangesPostWorksheetCellsRangeMoveTo")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsRangesPostWorksheetCellsRangeOutlineBorder() 
	{
		let expectation = self.expectation(description: "testcellsRangesPostWorksheetCellsRangeOutlineBorder")
		let name:String = BOOK1
		let sheetName:String = SHEET1
        
        let range:AsposeCellsCloud.Range? = AsposeCellsCloud.Range(columnCount: 1, rowHeight: nil, name: nil, firstColumn: 1, columnWidth: 10.1, refersTo: nil, rowCount: 10, firstRow: 1, worksheet: nil)
        let col: Color = Color(A: nil, B: nil, R: 255, G: nil)
		let rangeOperate:RangeSetOutlineBorderRequest? = RangeSetOutlineBorderRequest(borderColor: col, range: range, borderStyle: "Dotted", borderEdge: "LeftBorder")
        
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsRangesPostWorksheetCellsRangeOutlineBorder(name: name, sheetName: sheetName, rangeOperate: rangeOperate, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsRangesPostWorksheetCellsRangeOutlineBorder")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsRangesPostWorksheetCellsRangeRowHeight() 
	{
		let expectation = self.expectation(description: "testcellsRangesPostWorksheetCellsRangeRowHeight")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let value:Double = 10.99
		let range:AsposeCellsCloud.Range? = AsposeCellsCloud.Range(columnCount: 1, rowHeight: nil, name: nil, firstColumn: 1, columnWidth: 10.1, refersTo: nil, rowCount: 10, firstRow: 1, worksheet: nil)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsRangesPostWorksheetCellsRangeRowHeight(name: name, sheetName: sheetName, value: value, range: range, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsRangesPostWorksheetCellsRangeRowHeight")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsRangesPostWorksheetCellsRangeStyle() 
	{
		let expectation = self.expectation(description: "testcellsRangesPostWorksheetCellsRangeStyle")
		let name:String = BOOK1
		let sheetName:String = SHEET1
        
        let font1 = Font(isItalic: nil, name: nil, doubleSize: nil, color: nil, isBold: true, isSubscript: nil, isSuperscript: nil, isStrikeout: nil, underline: nil, size: nil)
        let style:Style? = Style(link: nil, pattern: nil, textDirection: nil, custom: nil, shrinkToFit: nil, isDateTime: nil, cultureCustom: nil, rotationAngle: nil, indentLevel: nil, isPercent: nil, foregroundColor: nil, name: nil, foregroundThemeColor: nil, borderCollection: nil, isLocked: nil, verticalAlignment: nil, backgroundColor: nil, backgroundThemeColor: nil, isFormulaHidden: nil, isGradient: nil, number: nil, horizontalAlignment: nil, isTextWrapped: nil, font: font1)
        let range:AsposeCellsCloud.Range? = AsposeCellsCloud.Range(columnCount: 1, rowHeight: nil, name: nil, firstColumn: 1, columnWidth: 10.1, refersTo: nil, rowCount: 10, firstRow: 1, worksheet: nil)
		let rangeOperate:RangeSetStyleRequest? = RangeSetStyleRequest(range: range, style: style)
		
        let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsRangesPostWorksheetCellsRangeStyle(name: name, sheetName: sheetName, rangeOperate: rangeOperate, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsRangesPostWorksheetCellsRangeStyle")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsRangesPostWorksheetCellsRangeUnmerge() 
	{
		let expectation = self.expectation(description: "testcellsRangesPostWorksheetCellsRangeUnmerge")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let range:AsposeCellsCloud.Range? = AsposeCellsCloud.Range(columnCount: 1, rowHeight: nil, name: nil, firstColumn: 1, columnWidth: 10.1, refersTo: nil, rowCount: 10, firstRow: 1, worksheet: nil)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsRangesPostWorksheetCellsRangeUnmerge(name: name, sheetName: sheetName, range: range, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsRangesPostWorksheetCellsRangeUnmerge")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsRangesPostWorksheetCellsRangeValue() 
	{
		let expectation = self.expectation(description: "testcellsRangesPostWorksheetCellsRangeValue")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let value:String = "null"
		let range:AsposeCellsCloud.Range? = AsposeCellsCloud.Range(columnCount: 1, rowHeight: nil, name: nil, firstColumn: 1, columnWidth: 10.1, refersTo: nil, rowCount: 10, firstRow: 1, worksheet: nil)
		let isConverted:Bool? = true
		let setStyle:Bool? = true
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsRangesPostWorksheetCellsRangeValue(name: name, sheetName: sheetName, value: value, range: range, isConverted: isConverted, setStyle: setStyle, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsRangesPostWorksheetCellsRangeValue")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsRangesPostWorksheetCellsRanges() 
	{
		let expectation = self.expectation(description: "testcellsRangesPostWorksheetCellsRanges")
		let name:String = BOOK1
		let sheetName:String = SHEET1
        
        let pasteOptions: PasteOptions = PasteOptions(pasteType: nil, skipBlanks: nil, onlyVisibleCells: true, transpose: nil)
        let range:AsposeCellsCloud.Range? = AsposeCellsCloud.Range(columnCount: 1, rowHeight: nil, name: nil, firstColumn: 1, columnWidth: 10.1, refersTo: nil, rowCount: 10, firstRow: 1, worksheet: nil)
        let range2:AsposeCellsCloud.Range? = AsposeCellsCloud.Range(columnCount: 1, rowHeight: nil, name: nil, firstColumn: 1, columnWidth: 10.1, refersTo: nil, rowCount: 10, firstRow: 20, worksheet: nil)
		let rangeOperate:RangeCopyRequest? = RangeCopyRequest(source: range, operate: "copydata", target: range2, pasteOptions: pasteOptions)
        
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsRangesPostWorksheetCellsRanges(name: name, sheetName: sheetName, rangeOperate: rangeOperate, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsRangesPostWorksheetCellsRanges")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

}

