//
// CellsAutoshapesAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeCellsCloud


class CellsAutoshapesAPITests: AsposeCellsCloudTests {

	override func setUp() 
	{
        super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "CellsAutoshapesAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error CellsAutoshapesAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
	}

	func testcellsAutoshapesGetWorksheetAutoshape() 
	{
		let expectation = self.expectation(description: "testcellsAutoshapesGetWorksheetAutoshape")
		let name:String = MYDOC
		let sheetName:String = SHEET2
		let autoshapeNumber:Int32 = 4
		let format:String? = nil
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAutoshapesAPI.cellsAutoshapesGetWorksheetAutoshape(name: name, sheetName: sheetName, autoshapeNumber: autoshapeNumber, format: format, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsAutoshapesGetWorksheetAutoshape")
					return
				}
	
				if let response = response {
                    //response is a Data of json, we may write it down and check it.
                    let fileName = "testcellsAutoshapesGetWorksheetAutoshape.txt"
                    let filePath = NSHomeDirectory()
                    let fileManager = FileManager.default
                    let path = "\(filePath)/tmp/\(fileName)"
                    fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                    let handle = FileHandle(forWritingAtPath:path)
                    handle?.write(response)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsAutoshapesGetWorksheetAutoshapes() 
	{
		let expectation = self.expectation(description: "testcellsAutoshapesGetWorksheetAutoshapes")
		let name:String = MYDOC
		let sheetName:String = SHEET2
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAutoshapesAPI.cellsAutoshapesGetWorksheetAutoshapes(name: name, sheetName: sheetName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsAutoshapesGetWorksheetAutoshapes")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

}

