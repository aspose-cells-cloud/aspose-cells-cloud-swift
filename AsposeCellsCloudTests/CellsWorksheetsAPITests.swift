//
// CellsWorksheetsAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
import Foundation
@testable import AsposeCellsCloud


class CellsWorksheetsAPITests: AsposeCellsCloudTests {

	override func setUp() 
	{
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "CellsWorksheetsAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error CellsWorksheetsAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
	}

	func testcellsWorksheetsDeleteUnprotectWorksheet() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsDeleteUnprotectWorksheet")
		let name:String = BOOK1
		let sheetName:String = SHEET1
        let protectParameter:ProtectSheetParameter? = ProtectSheetParameter(allowSelectingUnlockedCell: nil, allowFiltering: nil, allowDeletingColumn: nil, allowSelectingLockedCell: nil, allowUsingPivotTable: nil, allowEditArea: nil, allowInsertingHyperlink: nil, allowFormattingCell: nil, allowFormattingRow: nil, allowInsertingRow: nil, allowFormattingColumn: nil, allowSorting: nil, allowInsertingColumn: nil, password: "12345", allowDeletingRow: nil, protectionType: "All")
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsDeleteUnprotectWorksheet(name: name, sheetName: sheetName, protectParameter: protectParameter, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsDeleteUnprotectWorksheet")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsDeleteWorksheet() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsDeleteWorksheet")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsDeleteWorksheet(name: name, sheetName: sheetName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsDeleteWorksheet")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsDeleteWorksheetBackground() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsDeleteWorksheetBackground")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsDeleteWorksheetBackground(name: name, sheetName: sheetName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsDeleteWorksheetBackground")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsDeleteWorksheetComment() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsDeleteWorksheetComment")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let cellName:String = "C1"
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsDeleteWorksheetComment(name: name, sheetName: sheetName, cellName: cellName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsDeleteWorksheetComment")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsDeleteWorksheetComments() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsDeleteWorksheetComments")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsDeleteWorksheetComments(name: name, sheetName: sheetName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsDeleteWorksheetComments")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsDeleteWorksheetFreezePanes() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsDeleteWorksheetFreezePanes")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let row:Int32 = 1
		let column:Int32 = 1
		let freezedRows:Int32 = 2
		let freezedColumns:Int32 = 2
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsDeleteWorksheetFreezePanes(name: name, sheetName: sheetName, row: row, column: column, freezedRows: freezedRows, freezedColumns: freezedColumns, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsDeleteWorksheetFreezePanes")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsGetNamedRanges() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsGetNamedRanges")
		let name:String = BOOK1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsGetNamedRanges(name: name, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsGetNamedRanges")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsGetWorksheet() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsGetWorksheet")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let format:String? = nil
		let verticalResolution:Int32? = 100
		let horizontalResolution:Int32? = 90
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsGetWorksheet(name: name, sheetName: sheetName, format: format, verticalResolution: verticalResolution, horizontalResolution: horizontalResolution, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsGetWorksheet")
					return
				}
	
				if let response = response {
					XCTAssertTrue(response is String)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsGetWorksheetCalculateFormula() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsGetWorksheetCalculateFormula")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let formula:String = "=NOW()"
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsGetWorksheetCalculateFormula(name: name, sheetName: sheetName, formula: formula, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsGetWorksheetCalculateFormula")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsGetWorksheetComment() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsGetWorksheetComment")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let cellName:String = "B3"
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsGetWorksheetComment(name: name, sheetName: sheetName, cellName: cellName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsGetWorksheetComment")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsGetWorksheetComments() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsGetWorksheetComments")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsGetWorksheetComments(name: name, sheetName: sheetName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsGetWorksheetComments")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsGetWorksheetMergedCell() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsGetWorksheetMergedCell")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let mergedCellIndex:Int32 = 1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsGetWorksheetMergedCell(name: name, sheetName: sheetName, mergedCellIndex: mergedCellIndex, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsGetWorksheetMergedCell")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsGetWorksheetMergedCells() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsGetWorksheetMergedCells")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsGetWorksheetMergedCells(name: name, sheetName: sheetName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsGetWorksheetMergedCells")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsGetWorksheetTextItems() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsGetWorksheetTextItems")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsGetWorksheetTextItems(name: name, sheetName: sheetName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsGetWorksheetTextItems")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsGetWorksheets() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsGetWorksheets")
		let name:String = BOOK1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsGetWorksheets(name: name, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsGetWorksheets")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPostAutofitWorksheetColumns() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPostAutofitWorksheetColumns")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let firstColumn:Int32 = 1
		let lastColumn:Int32 = 10
		let autoFitterOptions:AutoFitterOptions? = nil
		let firstRow:Int32? = 1
		let lastRow:Int32? = 19
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPostAutofitWorksheetColumns(name: name, sheetName: sheetName, firstColumn: firstColumn, lastColumn: lastColumn, autoFitterOptions: autoFitterOptions, firstRow: firstRow, lastRow: lastRow, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPostAutofitWorksheetColumns")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPostAutofitWorksheetRow() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPostAutofitWorksheetRow")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let rowIndex:Int32 = 1
		let firstColumn:Int32 = 1
		let lastColumn:Int32 = 10
		let autoFitterOptions:AutoFitterOptions? = AutoFitterOptions(ignoreHidden: false, onlyAuto: false, autoFitMergedCells: true)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPostAutofitWorksheetRow(name: name, sheetName: sheetName, rowIndex: rowIndex, firstColumn: firstColumn, lastColumn: lastColumn, autoFitterOptions: autoFitterOptions, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPostAutofitWorksheetRow")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPostAutofitWorksheetRows() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPostAutofitWorksheetRows")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let autoFitterOptions:AutoFitterOptions? = AutoFitterOptions(ignoreHidden: false, onlyAuto: false, autoFitMergedCells: true)
		let startRow:Int32 = 1
		let endRow:Int32? = 10
		let onlyAuto:Bool? = true
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPostAutofitWorksheetRows(name: name, sheetName: sheetName, autoFitterOptions: autoFitterOptions, startRow: startRow, endRow: endRow, onlyAuto: onlyAuto, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPostAutofitWorksheetRows")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPostCopyWorksheet() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPostCopyWorksheet")
		let name:String = "NewCopy.xlsx"
		let sheetName:String = SHEET5
		let sourceSheet:String = SHEET6
		let options:CopyOptions? = CopyOptions(referToDestinationSheet: nil, copyNames: nil, referToSheetWithSameName: nil, columnCharacterWidth: true, copyInvalidFormulasAsValues: nil, extendToAdjacentRange: nil)
		let sourceWorkbook:String? = BOOK1
		let sourceFolder:String? = TEMPFOLDER
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
        uploadFile(name: name) {
		self.uploadFile(name: sourceWorkbook!) {
			CellsWorksheetsAPI.cellsWorksheetsPostCopyWorksheet(name: name, sheetName: sheetName, sourceSheet: sourceSheet, options: options, sourceWorkbook: sourceWorkbook, sourceFolder: sourceFolder, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPostCopyWorksheet")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
        }
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPostMoveWorksheet() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPostMoveWorksheet")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let moving:WorksheetMovingRequest? = WorksheetMovingRequest(position: "after", destinationWorksheet: SHEET3)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPostMoveWorksheet(name: name, sheetName: sheetName, moving: moving, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPostMoveWorksheet")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPostRenameWorksheet() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPostRenameWorksheet")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let newname:String = "renametest"
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPostRenameWorksheet(name: name, sheetName: sheetName, newname: newname, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPostRenameWorksheet")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPostUpdateWorksheetProperty() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPostUpdateWorksheetProperty")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let sheet:Worksheet? = Worksheet(index: 0, pictures: nil, charts: nil, comments: nil, hyperlinks: nil, isVisible: nil, viewType: nil, type: nil, isGridlinesVisible: true, isRowColumnHeadersVisible: nil, isPageBreakPreview: nil, displayZeros: nil, transitionEvaluation: nil, displayRightToLeft: nil, firstVisibleColumn: nil, oleObjects: nil, isOutlineShown: nil, name: nil, autoShapes: nil, cells: nil, validations: nil, zoom: nil, conditionalFormattings: nil, isSelected: nil, tabColor: nil, firstVisibleRow: nil, transitionEntry: nil, visibilityType: nil, isRulerVisible: nil, links: nil, isProtected: false, mergedCells: nil)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPostUpdateWorksheetProperty(name: name, sheetName: sheetName, sheet: sheet, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPostUpdateWorksheetProperty")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPostUpdateWorksheetZoom() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPostUpdateWorksheetZoom")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let value:Int32 = 1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPostUpdateWorksheetZoom(name: name, sheetName: sheetName, value: value, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPostUpdateWorksheetZoom")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPostWorksheetComment() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPostWorksheetComment")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let cellName:String = "B3"
		let comment:Comment? = Comment(link: nil, autoSize: nil, author: "Roy", isVisible: nil, textOrientationType: nil, height: nil, note: nil, width: nil, textVerticalAlignment: nil, cellName: nil, htmlNote: nil, textHorizontalAlignment: nil)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPostWorksheetComment(name: name, sheetName: sheetName, cellName: cellName, comment: comment, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPostWorksheetComment")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPostWorksheetRangeSort() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPostWorksheetRangeSort")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let cellArea:String = CELLAREA
		let dataSorter:DataSorter? = DataSorter(caseSensitive: true, keyList: nil, hasHeaders: nil, sortLeftToRight: nil)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPostWorksheetRangeSort(name: name, sheetName: sheetName, cellArea: cellArea, dataSorter: dataSorter, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPostWorksheetRangeSort")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPostWorksheetTextSearch() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPostWorksheetTextSearch")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let text:String = "123456"
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPostWorksheetTextSearch(name: name, sheetName: sheetName, text: text, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPostWorksheetTextSearch")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPostWorsheetTextReplace() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPostWorsheetTextReplace")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let oldValue:String = "1234"
		let newValue:String = "56678"
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPostWorsheetTextReplace(name: name, sheetName: sheetName, oldValue: oldValue, newValue: newValue, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPostWorsheetTextReplace")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPutAddNewWorksheet() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPutAddNewWorksheet")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let position:Int32? = 1
		let sheettype:String? = "VB"
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPutAddNewWorksheet(name: name, sheetName: sheetName, position: position, sheettype: sheettype, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPutAddNewWorksheet")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 201)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPutChangeVisibilityWorksheet() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPutChangeVisibilityWorksheet")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let isVisible:Bool = true
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPutChangeVisibilityWorksheet(name: name, sheetName: sheetName, isVisible: isVisible, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPutChangeVisibilityWorksheet")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPutProtectWorksheet() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPutProtectWorksheet")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let protectParameter:ProtectSheetParameter? = ProtectSheetParameter(allowSelectingUnlockedCell: nil, allowFiltering: nil, allowDeletingColumn: nil, allowSelectingLockedCell: nil, allowUsingPivotTable: nil, allowEditArea: nil, allowInsertingHyperlink: nil, allowFormattingCell: nil, allowFormattingRow: nil, allowInsertingRow: nil, allowFormattingColumn: nil, allowSorting: nil, allowInsertingColumn: nil, password: "123", allowDeletingRow: nil, protectionType: "All")
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPutProtectWorksheet(name: name, sheetName: sheetName, protectParameter: protectParameter, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPutProtectWorksheet")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPutWorksheetComment() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPutWorksheetComment")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let cellName:String = "C1"
		let comment:Comment? = Comment(link: nil, autoSize: nil, author: "Roy", isVisible: nil, textOrientationType: nil, height: nil, note: nil, width: nil, textVerticalAlignment: nil, cellName: nil, htmlNote: nil, textHorizontalAlignment: nil)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPutWorksheetComment(name: name, sheetName: sheetName, cellName: cellName, comment: comment, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPutWorksheetComment")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetsPutWorksheetFreezePanes() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetsPutWorksheetFreezePanes")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let row:Int32 = 1
		let column:Int32 = 1
		let freezedRows:Int32 = 4
		let freezedColumns:Int32 = 5
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsWorksheetsAPI.cellsWorksheetsPutWorksheetFreezePanes(name: name, sheetName: sheetName, row: row, column: column, freezedRows: freezedRows, freezedColumns: freezedColumns, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetsPutWorksheetFreezePanes")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

}

