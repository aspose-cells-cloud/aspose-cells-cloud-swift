//
// CellsPageSetupAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeCellsCloud


class CellsPageSetupAPITests: AsposeCellsCloudTests {

	override func setUp() 
	{
        super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "CellsPageSetupAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error CellsPageSetupAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
	}

	func testcellsPageSetupDeleteHeaderFooter() 
	{
		let expectation = self.expectation(description: "testcellsPageSetupDeleteHeaderFooter")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPageSetupDeleteHeaderFooter(name: name, sheetName: sheetName, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageSetupDeleteHeaderFooter")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPageSetupGetFooter() 
	{
		let expectation = self.expectation(description: "testcellsPageSetupGetFooter")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPageSetupGetFooter(name: name, sheetName: sheetName, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageSetupGetFooter")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPageSetupGetHeader() 
	{
		let expectation = self.expectation(description: "testcellsPageSetupGetHeader")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPageSetupGetHeader(name: name, sheetName: sheetName, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageSetupGetHeader")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPageSetupGetPageSetup() 
	{
		let expectation = self.expectation(description: "testcellsPageSetupGetPageSetup")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPageSetupGetPageSetup(name: name, sheetName: sheetName, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageSetupGetPageSetup")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPageSetupPostFooter() 
	{
		let expectation = self.expectation(description: "testcellsPageSetupPostFooter")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let section:Int32 = 0
		let script:String = "test"
		let isFirstPage:Bool = true
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPageSetupPostFooter(name: name, sheetName: sheetName, section: section, script: script, isFirstPage: isFirstPage, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageSetupPostFooter")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPageSetupPostHeader() 
	{
		let expectation = self.expectation(description: "testcellsPageSetupPostHeader")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let section:Int32 = 1
		let script:String = "trst"
		let isFirstPage:Bool = false
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPageSetupPostHeader(name: name, sheetName: sheetName, section: section, script: script, isFirstPage: isFirstPage, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageSetupPostHeader")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPageSetupPostPageSetup() 
	{
		let expectation = self.expectation(description: "testcellsPageSetupPostPageSetup")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let pageSetup:PageSetup? = PageSetup(link: nil, isHFDiffFirst: nil, fitToPagesWide: nil, printQuality: nil, printDraft: nil, firstPageNumber: nil, paperSize: nil, printComments: nil, printErrors: nil, centerVertically: nil, isPercentScale: nil, blackAndWhite: true, printTitleColumns: nil, isHFAlignMargins: nil, printArea: nil, footerMargin: nil, leftMargin: nil, centerHorizontally: nil, headerMargin: nil, topMargin: nil, footer: nil, fitToPagesTall: nil, isHFScaleWithDoc: nil, printHeadings: nil, zoom: nil, printTitleRows: nil, order: nil, printCopies: nil, orientation: nil, rightMargin: nil, printGridlines: nil, isAutoFirstPageNumber: nil, header: nil, isHFDiffOddEven: nil, bottomMargin: nil)
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPageSetupPostPageSetup(name: name, sheetName: sheetName, pageSetup: pageSetup, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageSetupPostPageSetup")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

}

