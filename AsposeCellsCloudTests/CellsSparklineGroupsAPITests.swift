//
// CellsSparklineGroupsAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeCellsCloud


class CellsSparklineGroupsAPITests: AsposeCellsCloudTests {

	override func setUp() 
	{
        super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "CellsSparklineGroupsAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error CellsSparklineGroupsAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
	}
    
    func testcellsSparklineGroupsApiGPPD()
    {
        let expectation = self.expectation(description: "testcellsSparklineGroupsApiGPPD")
        let name:String = PivTestFile
        let sheetName:String = SHEET1
        let folder:String? = TEMPFOLDER
        let storageName:String? = nil
        let type:String = "Line"
        let dataRange:String = "C6:E13"
        let isVertical:Bool = false
        let locationRange:String = "G6:G13"
        let sparklineGroupIndex:Int32 = 0
        
        
        uploadFile(name: name) {
            //Upload file once, then test following steps:
            //1, Test cellsSparklineGroupsGetWorksheetSparklineGroups
            CellsAPI.cellsSparklineGroupsGetWorksheetSparklineGroups(name: name, sheetName: sheetName, folder: folder, storageName: storageName)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsSparklineGroupsGetWorksheetSparklineGroups")
                    return
                }
                
                if let response = response {
                    XCTAssertEqual(response.code, 200)
                    //expectation.fulfill()
                }
            }
            //2, Test cellsSparklineGroupsPutWorksheetSparklineGroup
            CellsAPI.cellsSparklineGroupsPutWorksheetSparklineGroup(name: name, sheetName: sheetName, type: type, dataRange: dataRange, isVertical: isVertical, locationRange: locationRange, folder: folder, storageName: storageName)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsSparklineGroupsPutWorksheetSparklineGroup")
                    return
                }
                
                if let response = response {
                    XCTAssertEqual(response.code, 200)
                    //expectation.fulfill()
                    //3, Test cellsSparklineGroupsGetWorksheetSparklineGroup
                    CellsAPI.cellsSparklineGroupsGetWorksheetSparklineGroup(name: name, sheetName: sheetName, sparklineGroupIndex: sparklineGroupIndex, folder: folder, storageName: storageName)
                    {
                        (response, error) in
                        guard error == nil else {
                            let errorinfo = self.GetErrorDataInfo(error: error as! ErrorResponse)
                            print("error info: \(errorinfo!)")
                            XCTFail("error testcellsSparklineGroupsGetWorksheetSparklineGroup")
                            return
                        }
                        
                        if let response = response {
                            XCTAssertEqual(response.code, 200)
                            //expectation.fulfill()
                            //4, Test cellsSparklineGroupsPostWorksheetSparklineGroup
                            let sparklineGroup:SparklineGroup = SparklineGroup(displayHidden: true, firstPointColor: nil, highPointColor: nil, horizontalAxisColor: nil, horizontalAxisDateRange: nil, lastPointColor: nil, lineWeight: nil, lowPointColor: nil, markersColor: nil, negativePointsColor: nil, plotEmptyCellsType: nil, plotRightToLeft: nil, presetStyle: nil, seriesColor: nil, showFirstPoint: nil, showHighPoint: nil, showHorizontalAxis: nil, showLastPoint: nil, showLowPoint: nil, showMarkers: nil, showNegativePoints: nil, sparklineCollection: nil, type: nil, verticalAxisMaxValue: nil, verticalAxisMaxValueType: nil, verticalAxisMinValue: nil, verticalAxisMinValueType: nil)
                            CellsAPI.cellsSparklineGroupsPostWorksheetSparklineGroup(name: name, sheetName: sheetName, sparklineGroupIndex: sparklineGroupIndex, sparklineGroup: sparklineGroup, folder: folder, storageName: storageName)
                            {
                                (response, error) in
                                guard error == nil else {
                                    let errorinfo = self.GetErrorDataInfo(error: error as! ErrorResponse)
                                    print("error info: \(errorinfo!)")
                                    XCTFail("error testcellsSparklineGroupsPostWorksheetSparklineGroup")
                                    return
                                }
                                
                                if let response = response {
                                    XCTAssertEqual(response.code, 200)
                                    //expectation.fulfill()
                                    //5, Test cellsSparklineGroupsDeleteWorksheetSparklineGroup
                                    CellsAPI.cellsSparklineGroupsDeleteWorksheetSparklineGroup(name: name, sheetName: sheetName, sparklineGroupIndex: sparklineGroupIndex, folder: folder, storageName: storageName)
                                    {
                                        (response, error) in
                                        guard error == nil else {
                                            XCTFail("error testcellsSparklineGroupsDeleteWorksheetSparklineGroup")
                                            return
                                        }
                                        
                                        if let response = response {
                                            XCTAssertEqual(response.code, 200)
                                            //expectation.fulfill()
                                            //6, Test cellsSparklineGroupsDeleteWorksheetSparklineGroups
                                            CellsAPI.cellsSparklineGroupsDeleteWorksheetSparklineGroups(name: name, sheetName: sheetName, folder: folder, storageName: storageName)
                                            {
                                                (response, error) in
                                                guard error == nil else {
                                                    XCTFail("error testcellsSparklineGroupsDeleteWorksheetSparklineGroups")
                                                    return
                                                }
                                                
                                                if let response = response {
                                                    XCTAssertEqual(response.code, 200)
                                                    expectation.fulfill()
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
}

