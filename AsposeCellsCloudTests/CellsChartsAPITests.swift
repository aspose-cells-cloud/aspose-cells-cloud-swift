//
// CellsChartsAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeCellsCloud


class CellsChartsAPITests: AsposeCellsCloudTests {

	override func setUp() 
	{
        super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "CellsChartsAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error CellsChartsAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
	}

	func testcellsChartsDeleteWorksheetChartLegend() 
	{
		let expectation = self.expectation(description: "testcellsChartsDeleteWorksheetChartLegend")
		let name:String = MYDOC
		let sheetName:String = SHEET3
		let chartIndex:Int32 = 1
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsChartsDeleteWorksheetChartLegend(name: name, sheetName: sheetName, chartIndex: chartIndex, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsChartsDeleteWorksheetChartLegend")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsChartsDeleteWorksheetChartTitle() 
	{
		let expectation = self.expectation(description: "testcellsChartsDeleteWorksheetChartTitle")
		let name:String = MYDOC
		let sheetName:String = SHEET3
		let chartIndex:Int32 = 0
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsChartsDeleteWorksheetChartTitle(name: name, sheetName: sheetName, chartIndex: chartIndex, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsChartsDeleteWorksheetChartTitle")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsChartsDeleteWorksheetClearCharts() 
	{
		let expectation = self.expectation(description: "testcellsChartsDeleteWorksheetClearCharts")
		let name:String = MYDOC
		let sheetName:String = SHEET3
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsChartsDeleteWorksheetClearCharts(name: name, sheetName: sheetName, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsChartsDeleteWorksheetClearCharts")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsChartsDeleteWorksheetDeleteChart() 
	{
		let expectation = self.expectation(description: "testcellsChartsDeleteWorksheetDeleteChart")
		let name:String = MYDOC
		let sheetName:String = SHEET3
		let chartIndex:Int32 = 0
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsChartsDeleteWorksheetDeleteChart(name: name, sheetName: sheetName, chartIndex: chartIndex, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsChartsDeleteWorksheetDeleteChart")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsChartsGetWorksheetChart() 
	{
		let expectation = self.expectation(description: "testcellsChartsGetWorksheetChart")
		let name:String = MYDOC
		let sheetName:String = SHEET3
		let chartNumber:Int32 = 0
		let format:String? = "png"
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsChartsGetWorksheetChart(name: name, sheetName: sheetName, chartNumber: chartNumber, format: format, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsChartsGetWorksheetChart")
					return
				}
	
				if let response = response {
                    let fileName = "testcellsChartsGetWorksheetChart.txt"
                    let filePath = NSHomeDirectory()
                    let fileManager = FileManager.default
                    let path = "\(filePath)/tmp/\(fileName)"
                    fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                    let handle = FileHandle(forWritingAtPath:path)
                    handle?.write(response as Data)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsChartsGetWorksheetChartLegend() 
	{
		let expectation = self.expectation(description: "testcellsChartsGetWorksheetChartLegend")
		let name:String = MYDOC
		let sheetName:String = SHEET3
		let chartIndex:Int32 = 0
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsChartsGetWorksheetChartLegend(name: name, sheetName: sheetName, chartIndex: chartIndex, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsChartsGetWorksheetChartLegend")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsChartsGetWorksheetChartTitle() 
	{
		let expectation = self.expectation(description: "testcellsChartsGetWorksheetChartTitle")
		let name:String = BOOK1
		let sheetName:String = SHEET4
		let chartIndex:Int32 = 0
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsChartsGetWorksheetChartTitle(name: name, sheetName: sheetName, chartIndex: chartIndex, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsChartsGetWorksheetChartTitle")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsChartsGetWorksheetCharts() 
	{
		let expectation = self.expectation(description: "testcellsChartsGetWorksheetCharts")
		let name:String = MYDOC
		let sheetName:String = SHEET3
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsChartsGetWorksheetCharts(name: name, sheetName: sheetName, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsChartsGetWorksheetCharts")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsChartsPostWorksheetChart() 
	{
		let expectation = self.expectation(description: "testcellsChartsPostWorksheetChart")
		let name:String = MYDOC
		let sheetName:String = SHEET3
		let chartIndex:Int32 = 0
		let chart:Chart? = Chart(link: nil, firstSliceAngle: nil, floor: nil, plotEmptyCellsType: nil, autoScaling: true, style: nil, seriesAxis: nil, valueAxis: nil, showDataTable: nil, is3D: nil, chartArea: nil, elevation: nil, sideWall: nil, type: nil, title: nil, walls: nil, backWall: nil, chartDataTable: nil, heightPercent: nil, gapWidth: nil, legend: nil, chartObject: nil, isRectangularCornered: nil, secondCategoryAxis: nil, secondValueAxis: nil, placement: nil, name: nil, sizeWithWindow: nil, rightAngleAxes: nil, plotVisibleCells: nil, showLegend: nil, pivotSource: nil, depthPercent: nil, printSize: nil, gapDepth: nil, shapes: nil, wallsAndGridlines2D: nil, nSeries: nil, rotationAngle: nil, plotArea: nil, categoryAxis: nil, perspective: nil, hidePivotFieldButtons: nil, pageSetup: nil)
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsChartsPostWorksheetChart(name: name, sheetName: sheetName, chartIndex: chartIndex, chart: chart, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsChartsPostWorksheetChart")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsChartsPostWorksheetChartLegend() 
	{
		let expectation = self.expectation(description: "testcellsChartsPostWorksheetChartLegend")
		let name:String = MYDOC
		let sheetName:String = SHEET3
		let chartIndex:Int32 = 0
		let legend:Legend? = Legend(isInnerMode: nil, shapeProperties: nil, autoScaleFont: nil, area: nil, height: nil, width: 10, backgroundMode: nil, isAutomaticSize: nil, Y: nil, X: nil, shadow: nil, font: nil, border: nil, link: nil, legendEntries: nil, position: nil)
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsChartsPostWorksheetChartLegend(name: name, sheetName: sheetName, chartIndex: chartIndex, legend: legend, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsChartsPostWorksheetChartLegend")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsChartsPostWorksheetChartTitle() 
	{
		let expectation = self.expectation(description: "testcellsChartsPostWorksheetChartTitle")
		let name:String = MYDOC
		let sheetName:String = SHEET3
		let chartIndex:Int32 = 0
		let title:Title? = Title(isInnerMode: nil, shapeProperties: nil, autoScaleFont: nil, area: nil, height: nil, width: nil, backgroundMode: nil, isAutomaticSize: nil, Y: nil, X: nil, shadow: nil, font: nil, border: nil, link: nil, linkedSource: nil, text: "Post title", isVisible: nil, textDirection: nil, rotationAngle: nil, textVerticalAlignment: nil, textHorizontalAlignment: nil)
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsChartsPostWorksheetChartTitle(name: name, sheetName: sheetName, chartIndex: chartIndex, title: title, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsChartsPostWorksheetChartTitle")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsChartsPutWorksheetAddChart() 
	{
		let expectation = self.expectation(description: "testcellsChartsPutWorksheetAddChart")
		let name:String = MYDOC
		let sheetName:String = SHEET4
		let chartType:String = "Pie"
		let upperLeftRow:Int32? = 5
		let upperLeftColumn:Int32? = 5
		let lowerRightRow:Int32? = 10
		let lowerRightColumn:Int32? = 10
        let area:String? = "C7:D11"
		let isVertical:Bool? = true
		let categoryData:String? = nil
		let isAutoGetSerialName:Bool? = nil
		let title:String? = nil
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsChartsPutWorksheetAddChart(name: name, sheetName: sheetName, chartType: chartType, upperLeftRow: upperLeftRow, upperLeftColumn: upperLeftColumn, lowerRightRow: lowerRightRow, lowerRightColumn: lowerRightColumn, area: area, isVertical: isVertical, categoryData: categoryData, isAutoGetSerialName: isAutoGetSerialName, title: title, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsChartsPutWorksheetAddChart")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsChartsPutWorksheetChartLegend() 
	{
		let expectation = self.expectation(description: "testcellsChartsPutWorksheetChartLegend")
		let name:String = MYDOC
		let sheetName:String = SHEET3
		let chartIndex:Int32 = 0
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsChartsPutWorksheetChartLegend(name: name, sheetName: sheetName, chartIndex: chartIndex, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsChartsPutWorksheetChartLegend")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsChartsPutWorksheetChartTitle() 
	{
		let expectation = self.expectation(description: "testcellsChartsPutWorksheetChartTitle")
		let name:String = MYDOC
		let sheetName:String = SHEET3
		let chartIndex:Int32 = 0
		let title:Title? = Title(isInnerMode: nil, shapeProperties: nil, autoScaleFont: nil, area: nil, height: nil, width: nil, backgroundMode: nil, isAutomaticSize: nil, Y: nil, X: nil, shadow: nil, font: nil, border: nil, link: nil, linkedSource: nil, text: "New title", isVisible: nil, textDirection: nil, rotationAngle: nil, textVerticalAlignment: nil, textHorizontalAlignment: nil)
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsChartsPutWorksheetChartTitle(name: name, sheetName: sheetName, chartIndex: chartIndex, title: title, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsChartsPutWorksheetChartTitle")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

}

