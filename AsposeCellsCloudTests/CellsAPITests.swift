//
// CellsAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeCellsCloud


class CellsAPITests: AsposeCellsCloudTests {

	override func setUp() 
	{
        super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "CellsAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error CellsAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
	}

	func testcellsDeleteWorksheetColumns() 
	{
		let expectation = self.expectation(description: "testcellsDeleteWorksheetColumns")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let columnIndex:Int32 = 1
		let columns:Int32 = 1
		let updateReference:Bool = true
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsDeleteWorksheetColumns(name: name, sheetName: sheetName, columnIndex: columnIndex, columns: columns, updateReference: updateReference, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsDeleteWorksheetColumns")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}
    
	func testcellsDeleteWorksheetRow() 
	{
		let expectation = self.expectation(description: "testcellsDeleteWorksheetRow")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let rowIndex:Int32 = 1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsDeleteWorksheetRow(name: name, sheetName: sheetName, rowIndex: rowIndex, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsDeleteWorksheetRow")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsDeleteWorksheetRows() 
	{
		let expectation = self.expectation(description: "testcellsDeleteWorksheetRows")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let startrow:Int32 = 1
		let totalRows:Int32 = 2
		let updateReference:Bool = true
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsDeleteWorksheetRows(name: name, sheetName: sheetName, startrow: startrow, totalRows: totalRows, updateReference: updateReference, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsDeleteWorksheetRows")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}
    
    func testcellsGetCellHtmlString()
    {
        let expectation = self.expectation(description: "testcellsGetCellHtmlString")
        let name:String = BOOK1
        let sheetName:String = SHEET1
        let cellName:String = CellName
        let folder:String? = TEMPFOLDER
        let storage:String? = nil
        
        uploadFile(name: name) {
            CellsAPI.cellsGetCellHtmlString(name: name, sheetName: sheetName, cellName: cellName, folder: folder, storage: storage)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsGetCellHtmlString")
                    return
                }
                
                if let response = response {
                    XCTAssertTrue(response is NSData)
                    //response is a Data of file, we may write it down and check it.
                    let fileName = "testcellsGetCellHtmlString.txt"
                    let filePath = NSHomeDirectory()
                    let fileManager = FileManager.default
                    let path = "\(filePath)/tmp/\(fileName)"
                    fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                    let handle = FileHandle(forWritingAtPath:path)
                    handle?.write(response as! Data)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testcellsGetWorksheetCell()
	{
		let expectation = self.expectation(description: "testcellsGetWorksheetCell")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let cellOrMethodName:String = "firstcell"
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsGetWorksheetCell(name: name, sheetName: sheetName, cellOrMethodName: cellOrMethodName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsGetWorksheetCell")
					return
				}
	
				if let response = response {
					XCTAssertTrue(response is NSData)
                    //response is a Data of json, we may write it down and check it.
                    let fileName = "testcellsGetWorksheetCell.txt"
                    let filePath = NSHomeDirectory()
                    let fileManager = FileManager.default
                    let path = "\(filePath)/tmp/\(fileName)"
                    fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                    let handle = FileHandle(forWritingAtPath:path)
                    handle?.write(response as! Data)
                    expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsGetWorksheetCellStyle() 
	{
		let expectation = self.expectation(description: "testcellsGetWorksheetCellStyle")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let cellName:String = CellName
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsGetWorksheetCellStyle(name: name, sheetName: sheetName, cellName: cellName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsGetWorksheetCellStyle")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}
    
	func testcellsGetWorksheetCells() 
	{
		let expectation = self.expectation(description: "testcellsGetWorksheetCells")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let offest:Int32? = 1
		let count:Int32? = 10
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsGetWorksheetCells(name: name, sheetName: sheetName, offest: offest, count: count, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsGetWorksheetCells")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsGetWorksheetColumn() 
	{
		let expectation = self.expectation(description: "testcellsGetWorksheetColumn")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let columnIndex:Int32 = 1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsGetWorksheetColumn(name: name, sheetName: sheetName, columnIndex: columnIndex, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsGetWorksheetColumn")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsGetWorksheetColumns() 
	{
		let expectation = self.expectation(description: "testcellsGetWorksheetColumns")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsGetWorksheetColumns(name: name, sheetName: sheetName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsGetWorksheetColumns")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsGetWorksheetRow() 
	{
		let expectation = self.expectation(description: "testcellsGetWorksheetRow")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let rowIndex:Int32 = 1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsGetWorksheetRow(name: name, sheetName: sheetName, rowIndex: rowIndex, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsGetWorksheetRow")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsGetWorksheetRows() 
	{
		let expectation = self.expectation(description: "testcellsGetWorksheetRows")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsGetWorksheetRows(name: name, sheetName: sheetName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsGetWorksheetRows")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostCellCalculate() 
	{
		let expectation = self.expectation(description: "testcellsPostCellCalculate")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let cellName:String = CellName
		let options:CalculationOptions? = CalculationOptions(precisionStrategy: nil, ignoreError: true, recursive: true, calcStackSize: nil)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostCellCalculate(name: name, sheetName: sheetName, cellName: cellName, options: options, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostCellCalculate")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostCellCharacters() 
	{
		let expectation = self.expectation(description: "testcellsPostCellCharacters")
		let name:String = BOOK1
		let sheetName:String = SHEET2
		let cellName:String = "G8"
        let font1 = Font(isItalic: nil, name: nil, doubleSize: nil, color: nil, isBold: nil, isSubscript: nil, isSuperscript: nil, isStrikeout: nil, underline: nil, size: 10)
        let fs1 = FontSetting(textOptions: nil, length: 2, font: font1, type: nil, startIndex: 0)
		let options:[FontSetting]? = [fs1]
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostCellCharacters(name: name, sheetName: sheetName, cellName: cellName, options: options, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostCellCharacters")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostClearContents() 
	{
		let expectation = self.expectation(description: "testcellsPostClearContents")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let range:String? = RANGE
		let startRow:Int32 = 1
		let startColumn:Int32 = 1
		let endRow:Int32? = 3
		let endColumn:Int32? = 3
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostClearContents(name: name, sheetName: sheetName, range: range, startRow: startRow, startColumn: startColumn, endRow: endRow, endColumn: endColumn, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostClearContents")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostClearFormats() 
	{
		let expectation = self.expectation(description: "testcellsPostClearFormats")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let range:String? = RANGE
		let startRow:Int32 = 1
		let startColumn:Int32 = 1
		let endRow:Int32? = 3
		let endColumn:Int32? = 10
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostClearFormats(name: name, sheetName: sheetName, range: range, startRow: startRow, startColumn: startColumn, endRow: endRow, endColumn: endColumn, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostClearFormats")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostColumnStyle() 
	{
		let expectation = self.expectation(description: "testcellsPostColumnStyle")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let columnIndex:Int32 = 1
        let font1 = Font(isItalic: nil, name: nil, doubleSize: nil, color: nil, isBold: true, isSubscript: nil, isSuperscript: nil, isStrikeout: nil, underline: nil, size: 16)
		let style:Style? = Style(link: nil, pattern: nil, textDirection: nil, custom: nil, shrinkToFit: nil, isDateTime: nil, cultureCustom: nil, rotationAngle: nil, indentLevel: nil, isPercent: nil, foregroundColor: nil, name: nil, foregroundThemeColor: nil, borderCollection: nil, isLocked: nil, verticalAlignment: nil, backgroundColor: nil, backgroundThemeColor: nil, isFormulaHidden: nil, isGradient: nil, number: nil, horizontalAlignment: nil, isTextWrapped: nil, font: font1)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostColumnStyle(name: name, sheetName: sheetName, columnIndex: columnIndex, style: style, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostColumnStyle")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostCopyCellIntoCell() 
	{
		let expectation = self.expectation(description: "testcellsPostCopyCellIntoCell")
		let name:String = BOOK1
		let destCellName:String = "C1"
		let sheetName:String = SHEET1
		let worksheet:String = SHEET2
		let cellname: String = CellName
		let row:Int32? = 1
		let column:Int32? = 1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostCopyCellIntoCell(name: name, destCellName: destCellName, sheetName: sheetName, worksheet: worksheet, cellname: cellname, row: row, column: column, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostCopyCellIntoCell")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostCopyWorksheetColumns() 
	{
		let expectation = self.expectation(description: "testcellsPostCopyWorksheetColumns")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let sourceColumnIndex:Int32 = 1
		let destinationColumnIndex:Int32 = 21
		let columnNumber:Int32 = 1
		let worksheet:String = SHEET2
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostCopyWorksheetColumns(name: name, sheetName: sheetName, sourceColumnIndex: sourceColumnIndex, destinationColumnIndex: destinationColumnIndex, columnNumber: columnNumber, worksheet: worksheet, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostCopyWorksheetColumns")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostCopyWorksheetRows() 
	{
		let expectation = self.expectation(description: "testcellsPostCopyWorksheetRows")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let sourceRowIndex:Int32 = 1
		let destinationRowIndex:Int32 = 1
		let rowNumber:Int32 = 1
		let worksheet:String = SHEET2
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostCopyWorksheetRows(name: name, sheetName: sheetName, sourceRowIndex: sourceRowIndex, destinationRowIndex: destinationRowIndex, rowNumber: rowNumber, worksheet: worksheet, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostCopyWorksheetRows")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostGroupWorksheetColumns() 
	{
		let expectation = self.expectation(description: "testcellsPostGroupWorksheetColumns")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let firstIndex:Int32 = 1
		let lastIndex:Int32 = 1
		let hide:Bool? = true
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostGroupWorksheetColumns(name: name, sheetName: sheetName, firstIndex: firstIndex, lastIndex: lastIndex, hide: hide, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostGroupWorksheetColumns")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostGroupWorksheetRows() 
	{
		let expectation = self.expectation(description: "testcellsPostGroupWorksheetRows")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let firstIndex:Int32 = 1
		let lastIndex:Int32 = 1
		let hide:Bool? = true
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostGroupWorksheetRows(name: name, sheetName: sheetName, firstIndex: firstIndex, lastIndex: lastIndex, hide: hide, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostGroupWorksheetRows")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostHideWorksheetColumns() 
	{
		let expectation = self.expectation(description: "testcellsPostHideWorksheetColumns")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let startColumn:Int32 = 1
		let totalColumns:Int32 = 2
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostHideWorksheetColumns(name: name, sheetName: sheetName, startColumn: startColumn, totalColumns: totalColumns, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostHideWorksheetColumns")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostHideWorksheetRows() 
	{
		let expectation = self.expectation(description: "testcellsPostHideWorksheetRows")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let startrow:Int32 = 1
		let totalRows:Int32 = 2
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostHideWorksheetRows(name: name, sheetName: sheetName, startrow: startrow, totalRows: totalRows, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostHideWorksheetRows")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostRowStyle() 
	{
		let expectation = self.expectation(description: "testcellsPostRowStyle")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let rowIndex:Int32 = 1
        let font1 = Font(isItalic: nil, name: nil, doubleSize: nil, color: nil, isBold: nil, isSubscript: nil, isSuperscript: nil, isStrikeout: nil, underline: nil, size: 20)
        let style:Style? = Style(link: nil, pattern: nil, textDirection: nil, custom: nil, shrinkToFit: nil, isDateTime: nil, cultureCustom: nil, rotationAngle: nil, indentLevel: nil, isPercent: nil, foregroundColor: nil, name: nil, foregroundThemeColor: nil, borderCollection: nil, isLocked: nil, verticalAlignment: nil, backgroundColor: nil, backgroundThemeColor: nil, isFormulaHidden: nil, isGradient: nil, number: nil, horizontalAlignment: nil, isTextWrapped: nil, font: font1)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostRowStyle(name: name, sheetName: sheetName, rowIndex: rowIndex, style: style, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostRowStyle")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}
    
    func testcellsPostSetCellHtmlString()
    {
        let expectation = self.expectation(description: "testcellsPostSetCellHtmlString")
        let name:String = BOOK1
        let sheetName:String = SHEET1
        let cellName:String = CellName
        let folder:String = TEMPFOLDER
        let storage:String? = nil
        
        uploadFile(name: name) {
            CellsAPI.cellsPostSetCellHtmlString(name: name, sheetName: sheetName, cellName: cellName, folder: folder, storage: storage)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsPostSetCellHtmlString")
                    return
                }
                
                if let response = response {
                    XCTAssertEqual(response.code, 200)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

	func testcellsPostSetCellRangeValue() 
	{
		let expectation = self.expectation(description: "testcellsPostSetCellRangeValue")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let cellarea:String = CELLAREA
		let value:String = "2017-10-1"
		let type:String = "Date"
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostSetCellRangeValue(name: name, sheetName: sheetName, cellarea: cellarea, value: value, type: type, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostSetCellRangeValue")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostSetWorksheetColumnWidth() 
	{
		let expectation = self.expectation(description: "testcellsPostSetWorksheetColumnWidth")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let columnIndex:Int32 = 1
		let width:Double = 10
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostSetWorksheetColumnWidth(name: name, sheetName: sheetName, columnIndex: columnIndex, width: width, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostSetWorksheetColumnWidth")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostUngroupWorksheetColumns() 
	{
		let expectation = self.expectation(description: "testcellsPostUngroupWorksheetColumns")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let firstIndex:Int32 = 1
		let lastIndex:Int32 = 5
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostUngroupWorksheetColumns(name: name, sheetName: sheetName, firstIndex: firstIndex, lastIndex: lastIndex, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostUngroupWorksheetColumns")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostUngroupWorksheetRows() 
	{
		let expectation = self.expectation(description: "testcellsPostUngroupWorksheetRows")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let firstIndex:Int32 = 1
		let lastIndex:Int32 = 5
		let isAll:Bool? = true
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostUngroupWorksheetRows(name: name, sheetName: sheetName, firstIndex: firstIndex, lastIndex: lastIndex, isAll: isAll, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostUngroupWorksheetRows")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostUnhideWorksheetColumns() 
	{
		let expectation = self.expectation(description: "testcellsPostUnhideWorksheetColumns")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let startcolumn:Int32 = 1
		let totalColumns:Int32 = 2
		let width:Double = 10
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostUnhideWorksheetColumns(name: name, sheetName: sheetName, startcolumn: startcolumn, totalColumns: totalColumns, width: width, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostUnhideWorksheetColumns")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostUnhideWorksheetRows() 
	{
		let expectation = self.expectation(description: "testcellsPostUnhideWorksheetRows")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let startrow:Int32 = 1
		let totalRows:Int32 = 8
		let height:Double? = 18
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostUnhideWorksheetRows(name: name, sheetName: sheetName, startrow: startrow, totalRows: totalRows, height: height, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostUnhideWorksheetRows")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostUpdateWorksheetCellStyle() 
	{
		let expectation = self.expectation(description: "testcellsPostUpdateWorksheetCellStyle")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let cellName:String = CellName
        let font1 = Font(isItalic: nil, name: nil, doubleSize: nil, color: nil, isBold: nil, isSubscript: nil, isSuperscript: nil, isStrikeout: nil, underline: nil, size: 19)
        let style:Style? = Style(link: nil, pattern: nil, textDirection: nil, custom: nil, shrinkToFit: nil, isDateTime: nil, cultureCustom: nil, rotationAngle: nil, indentLevel: nil, isPercent: nil, foregroundColor: nil, name: nil, foregroundThemeColor: nil, borderCollection: nil, isLocked: nil, verticalAlignment: nil, backgroundColor: nil, backgroundThemeColor: nil, isFormulaHidden: nil, isGradient: nil, number: nil, horizontalAlignment: nil, isTextWrapped: nil, font: font1)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostUpdateWorksheetCellStyle(name: name, sheetName: sheetName, cellName: cellName, style: style, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostUpdateWorksheetCellStyle")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostUpdateWorksheetRangeStyle() 
	{
		let expectation = self.expectation(description: "testcellsPostUpdateWorksheetRangeStyle")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let range:String = RANGE
        let font1 = Font(isItalic: nil, name: nil, doubleSize: nil, color: nil, isBold: nil, isSubscript: nil, isSuperscript: nil, isStrikeout: nil, underline: nil, size: 15)
        let style:Style? = Style(link: nil, pattern: nil, textDirection: nil, custom: nil, shrinkToFit: nil, isDateTime: nil, cultureCustom: nil, rotationAngle: nil, indentLevel: nil, isPercent: nil, foregroundColor: nil, name: nil, foregroundThemeColor: nil, borderCollection: nil, isLocked: nil, verticalAlignment: nil, backgroundColor: nil, backgroundThemeColor: nil, isFormulaHidden: nil, isGradient: nil, number: nil, horizontalAlignment: nil, isTextWrapped: nil, font: font1)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostUpdateWorksheetRangeStyle(name: name, sheetName: sheetName, range: range, style: style, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostUpdateWorksheetRangeStyle")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostUpdateWorksheetRow() 
	{
		let expectation = self.expectation(description: "testcellsPostUpdateWorksheetRow")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let rowIndex:Int32 = 1
		let height:Double? = 10.8
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostUpdateWorksheetRow(name: name, sheetName: sheetName, rowIndex: rowIndex, height: height, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostUpdateWorksheetRow")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostWorksheetCellSetValue() 
	{
		let expectation = self.expectation(description: "testcellsPostWorksheetCellSetValue")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let cellName:String = CellName
		let value:String = "2018/10/09" //"1"
        let type:String = "DateTime"    //"String"
		let formula:String? = "=Now()"  //nil
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostWorksheetCellSetValue(name: name, sheetName: sheetName, cellName: cellName, value: value, type: type, formula: formula, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostWorksheetCellSetValue")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostWorksheetMerge() 
	{
		let expectation = self.expectation(description: "testcellsPostWorksheetMerge")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let startRow:Int32 = 1
		let startColumn:Int32 = 1
		let totalRows:Int32 = 4
		let totalColumns:Int32 = 4
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostWorksheetMerge(name: name, sheetName: sheetName, startRow: startRow, startColumn: startColumn, totalRows: totalRows, totalColumns: totalColumns, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostWorksheetMerge")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPostWorksheetUnmerge() 
	{
		let expectation = self.expectation(description: "testcellsPostWorksheetUnmerge")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let startRow:Int32 = 1
		let startColumn:Int32 = 1
		let totalRows:Int32 = 4
		let totalColumns:Int32 = 4
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPostWorksheetUnmerge(name: name, sheetName: sheetName, startRow: startRow, startColumn: startColumn, totalRows: totalRows, totalColumns: totalColumns, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPostWorksheetUnmerge")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPutInsertWorksheetColumns() 
	{
		let expectation = self.expectation(description: "testcellsPutInsertWorksheetColumns")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let columnIndex:Int32 = 1
		let columns:Int32 = 1
		let updateReference:Bool = true
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPutInsertWorksheetColumns(name: name, sheetName: sheetName, columnIndex: columnIndex, columns: columns, updateReference: updateReference, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPutInsertWorksheetColumns")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPutInsertWorksheetRow() 
	{
		let expectation = self.expectation(description: "testcellsPutInsertWorksheetRow")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let rowIndex:Int32 = 1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPutInsertWorksheetRow(name: name, sheetName: sheetName, rowIndex: rowIndex, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPutInsertWorksheetRow")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPutInsertWorksheetRows() 
	{
		let expectation = self.expectation(description: "testcellsPutInsertWorksheetRows")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let startrow:Int32 = 1
		let totalRows:Int32 = 2
		let updateReference:Bool = true
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPutInsertWorksheetRows(name: name, sheetName: sheetName, startrow: startrow, totalRows: totalRows, updateReference: updateReference, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPutInsertWorksheetRows")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

}

