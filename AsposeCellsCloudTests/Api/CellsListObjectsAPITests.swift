//
// CellsListObjectsAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeCellsCloud


class CellsListObjectsAPITests: AsposeCellsCloudTests {

	override func setUp() 
	{
        super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "CellsListObjectsAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error CellsListObjectsAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
	}

	func testcellsListObjectsDeleteWorksheetListObject() 
	{
		let expectation = self.expectation(description: "testcellsListObjectsDeleteWorksheetListObject")
		let name:String = BOOK1
		let sheetName:String = SHEET7
		let listObjectIndex:Int32 = 0
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsListObjectsDeleteWorksheetListObject(name: name, sheetName: sheetName, listObjectIndex: listObjectIndex, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsListObjectsDeleteWorksheetListObject")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsListObjectsDeleteWorksheetListObjects() 
	{
		let expectation = self.expectation(description: "testcellsListObjectsDeleteWorksheetListObjects")
		let name:String = BOOK1
		let sheetName:String = SHEET7
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsListObjectsDeleteWorksheetListObjects(name: name, sheetName: sheetName, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsListObjectsDeleteWorksheetListObjects")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsListObjectsGetWorksheetListObject() 
	{
		let expectation = self.expectation(description: "testcellsListObjectsGetWorksheetListObject")
		let name:String = BOOK1
		let sheetName:String = SHEET7
		let listobjectindex:Int32 = 0
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsListObjectsGetWorksheetListObject(name: name, sheetName: sheetName, listobjectindex: listobjectindex, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsListObjectsGetWorksheetListObject")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsListObjectsGetWorksheetListObjects() 
	{
		let expectation = self.expectation(description: "testcellsListObjectsGetWorksheetListObjects")
		let name:String = BOOK1
		let sheetName:String = SHEET7
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsListObjectsGetWorksheetListObjects(name: name, sheetName: sheetName, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsListObjectsGetWorksheetListObjects")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsListObjectsPostWorksheetListObject() 
	{
		let expectation = self.expectation(description: "testcellsListObjectsPostWorksheetListObject")
		let name:String = BOOK1
		let sheetName:String = SHEET7
		let listObjectIndex:Int32 = 0
		let listObject:ListObject? = ListObject(link: nil, showTotals: nil, tableStyleType: nil, displayName: nil, showHeaderRow: true, startColumn: nil, showTableStyleLastColumn: nil, showTableStyleColumnStripes: nil, showTableStyleFirstColumn: nil, startRow: nil, autoFilter: nil, showTableStyleRowStripes: nil, endColumn: nil, tableStyleName: nil, listColumns: nil, endRow: nil)
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsListObjectsPostWorksheetListObject(name: name, sheetName: sheetName, listObjectIndex: listObjectIndex, listObject: listObject, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsListObjectsPostWorksheetListObject")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsListObjectsPostWorksheetListObjectConvertToRange() 
	{
		let expectation = self.expectation(description: "testcellsListObjectsPostWorksheetListObjectConvertToRange")
		let name:String = BOOK1
		let sheetName:String = SHEET7
		let listObjectIndex:Int32 = 0
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsListObjectsPostWorksheetListObjectConvertToRange(name: name, sheetName: sheetName, listObjectIndex: listObjectIndex, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsListObjectsPostWorksheetListObjectConvertToRange")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsListObjectsPostWorksheetListObjectSortTable() 
	{
		let expectation = self.expectation(description: "testcellsListObjectsPostWorksheetListObjectSortTable")
		let name:String = BOOK1
		let sheetName:String = SHEET7
		let listObjectIndex:Int32 = 0
		let dataSorter:DataSorter? = DataSorter(caseSensitive: true, keyList: nil, hasHeaders: nil, sortLeftToRight: nil)
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsListObjectsPostWorksheetListObjectSortTable(name: name, sheetName: sheetName, listObjectIndex: listObjectIndex, dataSorter: dataSorter, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsListObjectsPostWorksheetListObjectSortTable")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable() 
	{
		let expectation = self.expectation(description: "testcellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable")
		let name:String = BOOK1
		let sheetName:String = SHEET7
		let listObjectIndex:Int32 = 0
		let destsheetName:String = "sheet2"
        
        let ia1:[Int32]? = [2]
        let ia2:[Int32]? = [1]
        let ia3:[Int32]? = [0]
		let request:CreatePivotTableRequest? = CreatePivotTableRequest(pivotFieldColumns: ia1, name: "testp", useSameSource: true, pivotFieldData: ia2, pivotFieldRows: ia3, destCellName: "C1", sourceData: "=Sheet2!A1:E8")
        
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable(name: name, sheetName: sheetName, listObjectIndex: listObjectIndex, destsheetName: destsheetName, request: request, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsListObjectsPostWorksheetListObjectSummarizeWithPivotTable")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsListObjectsPutWorksheetListObject() 
	{
		let expectation = self.expectation(description: "testcellsListObjectsPutWorksheetListObject")
		let name:String = BOOK1
		let sheetName:String = SHEET7
		let startRow:Int32 = 1
		let startColumn:Int32 = 1
		let endRow:Int32 = 6
		let endColumn:Int32 = 6
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		let hasHeaders:Bool? = nil
		
		uploadFile(name: name) {
            CellsAPI.cellsListObjectsPutWorksheetListObject(name: name, sheetName: sheetName, startRow: startRow, startColumn: startColumn, endRow: endRow, endColumn: endColumn, hasHeaders: hasHeaders, listObject: nil, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsListObjectsPutWorksheetListObject")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

}

