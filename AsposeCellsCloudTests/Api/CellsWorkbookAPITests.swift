//
// CellsWorkbookAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeCellsCloud
import Foundation

class CellsWorkbookAPITests: AsposeCellsCloudTests {

	override func setUp() 
	{
        super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "CellsWorkbookAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error CellsWorkbookAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
	}

	func testcellsWorkbookDeleteDecryptDocument() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookDeleteDecryptDocument")
		let name:String = BOOK1
		let encryption:WorkbookEncryptionRequest? = WorkbookEncryptionRequest(password: "123456", keyLength: 128, encryptionType: "XOR")
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookDeleteDecryptDocument(name: name, encryption: encryption, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookDeleteDecryptDocument")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookDeleteDocumentUnprotectFromChanges() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookDeleteDocumentUnprotectFromChanges")
		let name:String = BOOK1
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookDeleteDocumentUnprotectFromChanges(name: name, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookDeleteDocumentUnprotectFromChanges")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookDeleteUnprotectDocument() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookDeleteUnprotectDocument")
		let name:String = BOOK1
		let protection:WorkbookProtectionRequest? = WorkbookProtectionRequest(password: "123", protectionType: "All")
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookDeleteUnprotectDocument(name: name, protection: protection, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookDeleteUnprotectDocument")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookDeleteWorkbookName() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookDeleteWorkbookName")
		let name:String = BOOK1
		let nameName:String = "Name_2"
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookDeleteWorkbookName(name: name, nameName: nameName, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookDeleteWorkbookName")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookDeleteWorkbookNames() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookDeleteWorkbookNames")
		let name:String = BOOK1
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookDeleteWorkbookNames(name: name, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookDeleteWorkbookNames")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookGetWorkbook() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookGetWorkbook")
		let name:String = BOOK1
		let password:String? = nil
		let format:String? = "XPS"
		let isAutoFit:Bool? = true
		let onlySaveTable:Bool? = true
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		let outPath:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookGetWorkbook(name: name, password: password, format: format, isAutoFit: isAutoFit, onlySaveTable: onlySaveTable, folder: folder, storageName: storageName, outPath: outPath)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookGetWorkbook")
					return
				}
	
				if let response = response {
                    //response is a Data of json, we may write it down and check it.
                    let fileName = "testcellsWorkbookGetWorkbook.\(format!)"
                    let filePath = NSHomeDirectory()
                    let fileManager = FileManager.default
                    let path = "\(filePath)/tmp/\(fileName)"
                    fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                    let handle = FileHandle(forWritingAtPath:path)
                    handle?.write(response as Data)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

    func testcellsWorkbookGetMarkdownFormat()
    {
        let expectation = self.expectation(description: "testcellsWorkbookGetMarkdownFormat")
        let name:String = BOOK1
        let password:String? = nil
        let format:String? = "md"
        let isAutoFit:Bool? = true
        let onlySaveTable:Bool? = true
        let folder:String = TEMPFOLDER
        let storageName:String? = nil
        let outPath:String? = nil
        
        uploadFile(name: name) {
            CellsAPI.cellsWorkbookGetWorkbook(name: name, password: password, format: format, isAutoFit: isAutoFit, onlySaveTable: onlySaveTable, folder: folder, storageName: storageName, outPath: outPath)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsWorkbookGetMarkdownFormat")
                    return
                }
                
                if let response = response {
                    //response is a Data of json, we may write it down and check it.
                    let fileName = "markdowntest.md"
                    let filePath = NSHomeDirectory()
                    let fileManager = FileManager.default
                    let path = "\(filePath)/tmp/\(fileName)"
                    fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                    let handle = FileHandle(forWritingAtPath:path)
                    handle?.write(response as Data)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

	func testcellsWorkbookGetWorkbookDefaultStyle() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookGetWorkbookDefaultStyle")
		let name:String = BOOK1
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookGetWorkbookDefaultStyle(name: name, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookGetWorkbookDefaultStyle")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookGetWorkbookName() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookGetWorkbookName")
		let name:String = BOOK1
		let nameName:String = "Name_2"
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookGetWorkbookName(name: name, nameName: nameName, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookGetWorkbookName")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookGetWorkbookNameValue() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookGetWorkbookNameValue")
		let name:String = BOOK1
		let nameName:String = "Name_2"
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookGetWorkbookNameValue(name: name, nameName: nameName, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookGetWorkbookNameValue")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookGetWorkbookNames() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookGetWorkbookNames")
		let name:String = BOOK1
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookGetWorkbookNames(name: name, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookGetWorkbookNames")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookGetWorkbookSettings() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookGetWorkbookSettings")
		let name:String = BOOK1
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookGetWorkbookSettings(name: name, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookGetWorkbookSettings")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookGetWorkbookTextItems() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookGetWorkbookTextItems")
		let name:String = BOOK1
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookGetWorkbookTextItems(name: name, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookGetWorkbookTextItems")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookPostAutofitWorkbookRows() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookPostAutofitWorkbookRows")
		let name:String = BOOK1
		let autoFitterOptions:AutoFitterOptions? = AutoFitterOptions(ignoreHidden: false, onlyAuto: false, autoFitMergedCells: false)
		let startRow:Int32 = 1
		let endRow:Int32? = 100
		let onlyAuto:Bool? = true
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookPostAutofitWorkbookRows(name: name, autoFitterOptions: autoFitterOptions, startRow: startRow, endRow: endRow, onlyAuto: onlyAuto, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookPostAutofitWorkbookRows")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}
    
    func testcellsWorkbookPostAutofitWorkbookColumns()
    {
        let expectation = self.expectation(description: "testcellsWorkbookPostAutofitWorkbookColumns")
        let name:String = BOOK1
        let autoFitterOptions:AutoFitterOptions? = AutoFitterOptions(ignoreHidden: false, onlyAuto: false, autoFitMergedCells: false)
        let startColumn:Int32? = 1
        let endColumn:Int32? = 100
        let folder:String? = TEMPFOLDER
        let storageName:String? = nil
        
        uploadFile(name: name) {
            CellsAPI.cellsWorkbookPostAutofitWorkbookColumns(name: name, autoFitterOptions: autoFitterOptions, startColumn: startColumn, endColumn: endColumn, folder: folder, storageName: storageName)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsWorkbookPostAutofitWorkbookColumns")
                    return
                }
                
                if let response = response {
                    XCTAssertEqual(response.code, 200)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

	func testcellsWorkbookPostEncryptDocument() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookPostEncryptDocument")
		let name:String = BOOK1
		let encryption:WorkbookEncryptionRequest? = WorkbookEncryptionRequest(password: "123456", keyLength: 128, encryptionType: "XOR")
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookPostEncryptDocument(name: name, encryption: encryption, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookPostEncryptDocument")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookPostImportData() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookPostImportData")
		let name:String = BOOK1
        let list1:[Int32]? = [1, 2, 3, 4]
        let importdata:ImportIntArrayOption = ImportIntArrayOption(source: nil, importDataType: "IntArray", destinationWorksheet: SHEET1, isInsert: nil, data: list1, isVertical: true, firstRow: 3, firstColumn: 1)
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
            CellsAPI.cellsWorkbookPostImportData(name: name, importData: importdata, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookPostImportData")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookPostProtectDocument() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookPostProtectDocument")
		let name:String = BOOK1
		let protection:WorkbookProtectionRequest? = WorkbookProtectionRequest(password: "123", protectionType: "All")
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookPostProtectDocument(name: name, protection: protection, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookPostProtectDocument")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookPostWorkbookCalculateFormula() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookPostWorkbookCalculateFormula")
		let name:String = BOOK1
		let options:CalculationOptions? = CalculationOptions(precisionStrategy: nil, ignoreError: true, recursive: nil, calcStackSize: nil)
		let ignoreError:Bool? = true
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookPostWorkbookCalculateFormula(name: name, options: options, ignoreError: ignoreError, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookPostWorkbookCalculateFormula")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookPostWorkbookGetSmartMarkerResult() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookPostWorkbookGetSmartMarkerResult")
		let name:String = BOOK1
		let xmlFile:String? = "ReportData.xml"
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		let outPath:String? = nil
		
		uploadFile(name: name) {
        self.uploadFile(name: xmlFile!, folder: "") {
            
			CellsAPI.cellsWorkbookPostWorkbookGetSmartMarkerResult(name: name, xmlFile: xmlFile, folder: folder, storageName: storageName, outPath: outPath)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookPostWorkbookGetSmartMarkerResult")
					return
				}
	
				if let response = response {
                    //response is a Data of json, we may write it down and check it.
                    let fileName = "testcellsWorkbookPostWorkbookGetSmartMarkerResult.txt"
                    let filePath = NSHomeDirectory()
                    let fileManager = FileManager.default
                    let path = "\(filePath)/tmp/\(fileName)"
                    fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                    let handle = FileHandle(forWritingAtPath:path)
                    handle?.write(response as Data)
					expectation.fulfill()
				}
			}
		}
        }
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookPostWorkbookSettings() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookPostWorkbookSettings")
		let name:String = BOOK1
        let settings:WorkbookSettings? = WorkbookSettings(numberGroupSeparator: nil, hidePivotFieldList: nil, isMinimized: nil, calculationId: nil, reCalculateOnOpen: nil, checkExcelRestriction: nil, isHScrollBarVisible: nil, windowHeight: nil, windowLeft: nil, calcStackSize: nil, shared: nil, removePersonalInformation: nil, languageCode: nil, enableMacros: nil, isDefaultEncrypted: nil, recalculateBeforeSave: nil, parsingFormulaOnOpen: nil, windowTop: nil, region: nil, memorySetting: nil, updateAdjacentCellsBorder: nil, crashSave: nil, showTabs: nil, precisionAsDisplayed: nil, calcMode: nil, autoCompressPictures: true, date1904: nil, numberDecimalSeparator: nil, iteration: nil, checkComptiliblity: nil, autoRecover: nil, maxChange: nil, dataExtractLoad: nil, firstVisibleTab: nil, isHidden: nil, recommendReadOnly: nil, displayDrawingObjects: nil, buildVersion: nil, isVScrollBarVisible: nil, windowWidth: nil, createCalcChain: nil, maxIteration: nil, repairLoad: nil, updateLinksType: nil, sheetTabBarWidth: nil)
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookPostWorkbookSettings(name: name, settings: settings, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookPostWorkbookSettings")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookPostWorkbookSplit() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookPostWorkbookSplit")
		let name:String = BOOK1
		let format:String? = "png"
		let from:Int32? = 1
		let to:Int32? = 3
		let horizontalResolution:Int32? = 100
		let verticalResolution:Int32? = 90
		let folder:String = TEMPFOLDER
        let outFolder:String? = nil
		let storageName:String? = nil
		
		uploadFile(name: name) {
            CellsAPI.cellsWorkbookPostWorkbookSplit(name: name, format: format, from: from, to: to, horizontalResolution: horizontalResolution, verticalResolution: verticalResolution, folder: folder, outFolder: outFolder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookPostWorkbookSplit")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookPostWorkbooksMerge() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookPostWorkbooksMerge")
		let name:String = BOOK1
		let mergeWith:String = "myDocument.xlsx"
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
        self.uploadFile(name: mergeWith, folder: "") {
                
			CellsAPI.cellsWorkbookPostWorkbooksMerge(name: name, mergeWith: mergeWith, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookPostWorkbooksMerge")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
        }
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookPostWorkbooksTextReplace() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookPostWorkbooksTextReplace")
		let name:String = BOOK1
		let oldValue:String = "!22"
		let newValue:String = "22"
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookPostWorkbooksTextReplace(name: name, oldValue: oldValue, newValue: newValue, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookPostWorkbooksTextReplace")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookPostWorkbooksTextSearch() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookPostWorkbooksTextSearch")
		let name:String = BOOK1
		let text:String = "test"
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookPostWorkbooksTextSearch(name: name, text: text, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookPostWorkbooksTextSearch")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookPutConvertWorkbook() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookPutConvertWorkbook")
        let workbook:String = BOOK1
		let format:String? = "pdf"
        
        let url1: URL? = getURL(workbook)
        //let newImage = UIImage(contentsOfFile: url1!.path)
        //let imageData = newImage!.pngData()
        let filedata = NSData(contentsOfFile: url1!.path)
        
		let password:String? = nil
		let outPath:String? = nil
		
		uploadFile(name: workbook) {
            CellsAPI.cellsWorkbookPutConvertWorkbook(file: url1!, format: format, password: password, outPath: outPath)
			{
				(response, error) in
				guard error == nil else {
                    let errorinfo = self.GetErrorDataInfo(error: error as! ErrorResponse)
                    print("error info: \(errorinfo!)")
					XCTFail("error testcellsWorkbookPutConvertWorkbook")
					return
				}
	
				if let response = response {
                    //response is a Data of file, we may write it down and check it.
                    let fileName = "testcellsWorkbookPutConvertWorkbook.pdf"
                    let filePath = NSHomeDirectory()
                    let fileManager = FileManager.default
                    let path = "\(filePath)/tmp/\(fileName)"
                    fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                    let handle = FileHandle(forWritingAtPath:path)
                    handle?.write(response as Data)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}
    
    func testcellsWorkbookPutConvertMD()
    {
        let expectation = self.expectation(description: "testcellsWorkbookPutConvertMD")
        let workbook:String = BOOK1
        let format:String? = "md"
        
        let url1: URL? = getURL(workbook)
        let filedata = NSData(contentsOfFile: url1!.path)
        
        let password:String? = nil
        let outPath:String? = nil
        
        uploadFile(name: workbook) {
            CellsAPI.cellsWorkbookPutConvertWorkbook(file: url1!, format: format, password: password, outPath: outPath)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsWorkbookPutConvertMD")
                    return
                }
                
                if let response = response {
                    //response is a Data of file, we may write it down and check it.
                    let fileName = "testcellsWorkbookPutConvertMD.md"
                    let filePath = NSHomeDirectory()
                    let fileManager = FileManager.default
                    let path = "\(filePath)/tmp/\(fileName)"
                    fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                    let handle = FileHandle(forWritingAtPath:path)
                    handle?.write(response as Data)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
	func testcellsWorkbookPutDocumentProtectFromChanges() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookPutDocumentProtectFromChanges")
		let name:String = BOOK1
        let password:PasswordRequest? = PasswordRequest(password: "123456")
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorkbookPutDocumentProtectFromChanges(name: name, password: password, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookPutDocumentProtectFromChanges")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorkbookPutWorkbookCreate() 
	{
		let expectation = self.expectation(description: "testcellsWorkbookPutWorkbookCreate")
        
        let dateformatter = DateFormatter()
        dateformatter.dateFormat = "YYYYMMddHHmmss"
        let dateNow = Date()
        let s1 = dateformatter.string(from: dateNow)
        let name:String = "NewBook\(s1).xlsx" ;
        
        let isWriteOver:Bool? = false
        let folder:String = TEMPFOLDER
		let templateFile:String? = "\(TEMPFOLDER)/\(BOOK1)"
		let dataFile:String? = "\(TEMPFOLDER)/ReportData.xml"
		let storageName:String? = nil
		
        self.uploadFile(name: BOOK1) {
        self.uploadFile(name: "ReportData.xml") {
            CellsAPI.cellsWorkbookPutWorkbookCreate(name: name, templateFile: templateFile, dataFile: dataFile, isWriteOver: isWriteOver, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorkbookPutWorkbookCreate")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
        }
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}
/*
    //Only test for DropBox Storage
    func testcellsWorkbookPostWorkbooksTextSearchTestForDropBox()
    {
        let expectation = self.expectation(description: "testcellsWorkbookPostWorkbooksTextSearchTestForDropBox")
        let name:String = BOOK1
        let text:String = "test"
        let folder:String = TEMPFOLDER
        let storageName:String? = "DropBox"
        
        self.uploadFile(name: name, folder: folder, storageName: storageName) {
            CellsAPI.cellsWorkbookPostWorkbooksTextSearch(name: name, text: text, folder: folder, storageName: storageName)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsWorkbookPostWorkbooksTextSearchTestForDropBox")
                    return
                }
                
                if let response = response {
                    XCTAssertEqual(response.code, 200)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    //Only test for DropBox Storage
    func testcellsWorkbookPostWorkbooksSaveAsTestForDropBox()
    {
        let expectation = self.expectation(description: "testcellsWorkbookPostWorkbooksSaveAsTestForDropBox")
        let name:String = BOOK1
        let saveOptions:SaveOptions = SaveOptions(enableHTTPCompression: nil, saveFormat: "xml", clearData: nil, cachedFileFolder: nil, validateMergedAreas: nil, refreshChartCache: nil, createDirectory: nil, sortNames: nil)
        let folder:String = TEMPFOLDER
        let storageName:String? = "DropBox"
        
        self.uploadFile(name: name, folder: folder, storageName: storageName) {
            CellsAPI.cellsSaveAsPostDocumentSaveAs(name: name, saveOptions: saveOptions, newfilename: "Book1.xlsx.xml", isAutoFitRows: nil, isAutoFitColumns: nil, folder: folder, storageName: storageName)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsWorkbookPostWorkbooksSaveAsTestForDropBox")
                    return
                }
                
                if let response = response {
                    XCTAssertEqual(response.code, 200)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    */
    func testcellsWorkbookPutWorkbookBackground()
    {
        let expectation = self.expectation(description: "testcellsWorkbookPutWorkbookBackground")
        let name:String = BOOK1
        
        let url1: URL? = getURL("WaterMark.png")
        let newImage = UIImage(contentsOfFile: url1!.path)
        let imageData = newImage!.pngData()
        
        let folder:String? = TEMPFOLDER
        let storageName:String? = nil
        
        uploadFile(name: name) {
            CellsAPI.cellsWorkbookPutWorkbookBackground(name: name, png: imageData! as NSData, folder: folder, storageName: storageName)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsWorkbookPutWorkbookBackground")
                    return
                }
                
                if let response = response {
                    XCTAssertEqual(response.code, 200)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testcellsWorkbookDeleteWorkbookBackground()
    {
        let expectation = self.expectation(description: "testcellsWorkbookDeleteWorkbookBackground")
        let name:String = BOOK1
        let folder:String? = TEMPFOLDER
        let storageName:String? = nil
        
        uploadFile(name: name) {
            CellsAPI.cellsWorkbookDeleteWorkbookBackground(name: name, folder: folder, storageName: storageName)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsWorkbookDeleteWorkbookBackground")
                    return
                }
                
                if let response = response {
                    XCTAssertEqual(response.code, 200)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testcellsWorkbookPutWorkbookCreateNew()
    {
        let expectation = self.expectation(description: "testcellsWorkbookPutWorkbookCreateNew")
        
        let dateformatter = DateFormatter()
        dateformatter.dateFormat = "YYYYMMddHHmmss"
        let dateNow = Date()
        let s1 = dateformatter.string(from: dateNow)
        let name:String = "NewBook\(s1).xlsx" ;
        
        let isWriteOver:Bool? = true
        let folder:String = TEMPFOLDER
        let templateFile:String? = "\(TEMPFOLDER)/\(BOOK1)"
        let dataFile:String? = "\(TEMPFOLDER)/ReportData.xml"
        let storageName:String? = nil
        
        self.uploadFile(name: BOOK1) {
            self.uploadFile(name: "ReportData.xml") {
                CellsAPI.cellsWorkbookPutWorkbookCreate(name: name, templateFile: templateFile, dataFile: dataFile, isWriteOver: isWriteOver, folder: folder, storageName: storageName)
                {
                    (response, error) in
                    guard error == nil else {
                        XCTFail("error testcellsWorkbookPutWorkbookCreateNew")
                        return
                    }
                    
                    if let response = response {
                        XCTAssertEqual(response.code, 200)
                        expectation.fulfill()
                    }
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testcellsWorkbookPutWorkbookWaterMarker()
    {
        let expectation = self.expectation(description: "testcellsWorkbookPutWorkbookWaterMarker")
        let name:String = BOOK1
        let folder:String? = TEMPFOLDER
        let storageName:String? = nil
        let textWaterMarkerRequest:TextWaterMarkerRequest? = TextWaterMarkerRequest(text: "Aspose.Cells Cloud", fontName: nil, fontSize: 25, height: nil, width: nil)
        
        uploadFile(name: name) {
            CellsAPI.cellsWorkbookPutWorkbookWaterMarker(name: name, folder: folder, storageName: storageName, textWaterMarkerRequest: textWaterMarkerRequest)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsWorkbookPutWorkbookWaterMarker")
                    return
                }
                
                if let response = response {
                    XCTAssertEqual(response.code, 200)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
}

