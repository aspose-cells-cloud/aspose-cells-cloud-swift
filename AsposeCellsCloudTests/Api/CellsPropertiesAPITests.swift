//
// CellsPropertiesAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeCellsCloud


class CellsPropertiesAPITests: AsposeCellsCloudTests {

	override func setUp() 
	{
        super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "CellsPropertiesAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error CellsPropertiesAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
	}

	func testcellsPropertiesDeleteDocumentProperties() 
	{
		let expectation = self.expectation(description: "testcellsPropertiesDeleteDocumentProperties")
		let name:String = BOOK1
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPropertiesDeleteDocumentProperties(name: name, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPropertiesDeleteDocumentProperties")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPropertiesDeleteDocumentProperty() 
	{
		let expectation = self.expectation(description: "testcellsPropertiesDeleteDocumentProperty")
		let name:String = BOOK1
		let propertyName:String = "Author"
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPropertiesDeleteDocumentProperty(name: name, propertyName: propertyName, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPropertiesDeleteDocumentProperty")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPropertiesGetDocumentProperties() 
	{
		let expectation = self.expectation(description: "testcellsPropertiesGetDocumentProperties")
		let name:String = BOOK1
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPropertiesGetDocumentProperties(name: name, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPropertiesGetDocumentProperties")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPropertiesGetDocumentProperty() 
	{
		let expectation = self.expectation(description: "testcellsPropertiesGetDocumentProperty")
		let name:String = BOOK1
		let propertyName:String = "Author"
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPropertiesGetDocumentProperty(name: name, propertyName: propertyName, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPropertiesGetDocumentProperty")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPropertiesPutDocumentProperty() 
	{
		let expectation = self.expectation(description: "testcellsPropertiesPutDocumentProperty")
		let name:String = BOOK1
		let propertyName:String = "Name"
        let property:CellsDocumentProperty? = CellsDocumentProperty(link: nil, name: "Author", value: "Val", isLinkedToContent: nil, source: nil, type: nil, isGeneratedName: nil)
		//let property:CellsDocumentProperty? = CellsDocumentProperty(link: nil, builtIn: nil, name: "Author", value: "Val")
        
        
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPropertiesPutDocumentProperty(name: name, propertyName: propertyName, property: property, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
                    let errorinfo = self.GetErrorDataInfo(error: error as! ErrorResponse)
                    print("error info: \(errorinfo!)")
					XCTFail("error testcellsPropertiesPutDocumentProperty")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

}

