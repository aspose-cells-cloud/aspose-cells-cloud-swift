//
// CellsPicturesAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeCellsCloud


class CellsPicturesAPITests: AsposeCellsCloudTests {

	override func setUp() 
	{
        super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "CellsPicturesAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error CellsPicturesAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
	}

	func testcellsPicturesDeleteWorksheetPicture() 
	{
		let expectation = self.expectation(description: "testcellsPicturesDeleteWorksheetPicture")
		let name:String = BOOK1
		let sheetName:String = SHEET6
		let pictureIndex:Int32 = 0
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPicturesDeleteWorksheetPicture(name: name, sheetName: sheetName, pictureIndex: pictureIndex, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPicturesDeleteWorksheetPicture")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPicturesDeleteWorksheetPictures() 
	{
		let expectation = self.expectation(description: "testcellsPicturesDeleteWorksheetPictures")
		let name:String = BOOK1
		let sheetName:String = SHEET6
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPicturesDeleteWorksheetPictures(name: name, sheetName: sheetName, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPicturesDeleteWorksheetPictures")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPicturesGetWorksheetPicture() 
	{
		let expectation = self.expectation(description: "testcellsPicturesGetWorksheetPicture")
		let name:String = BOOK1
		let sheetName:String = SHEET6
		let pictureIndex:Int32 = 0
		let format:String? = nil
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPicturesGetWorksheetPicture(name: name, sheetName: sheetName, pictureIndex: pictureIndex, format: format, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPicturesGetWorksheetPicture")
					return
				}
	
				if let response = response {
                    //response is a Data of json, we may write it down and check it.
                    let fileName = "testcellsPicturesGetWorksheetPicture.txt"
                    let filePath = NSHomeDirectory()
                    let fileManager = FileManager.default
                    let path = "\(filePath)/tmp/\(fileName)"
                    fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                    let handle = FileHandle(forWritingAtPath:path)
                    handle?.write(response as Data)
                    expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPicturesGetWorksheetPictures() 
	{
		let expectation = self.expectation(description: "testcellsPicturesGetWorksheetPictures")
		let name:String = BOOK1
		let sheetName:String = SHEET6
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPicturesGetWorksheetPictures(name: name, sheetName: sheetName, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPicturesGetWorksheetPictures")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPicturesPostWorksheetPicture() 
	{
		let expectation = self.expectation(description: "testcellsPicturesPostWorksheetPicture")
		let name:String = BOOK1
		let sheetName:String = SHEET6
		let pictureIndex:Int32 = 0
		let picture:Picture? = Picture(alternativeText: nil, bottom: nil, top: nil, width: nil, htmlText: nil, textVerticalAlignment: nil, autoShapeType: nil, isPrintable: nil, upperLeftColumn: nil, isLockAspectRatio: nil, isGroup: nil, rotationAngle: nil, zOrderPosition: nil, textHorizontalOverflow: nil, msoDrawingType: nil, textOrientationType: nil, placement: nil, name: nil, isWordArt: nil, linkedCell: nil, upperLeftRow: nil, isLocked: nil, lowerRightRow: nil, isTextWrapped: nil, Y: nil, X: nil, isHidden: nil, _left: 10, _right: nil, text: nil, lowerRightColumn: nil, height: nil, textHorizontalAlignment: nil, textVerticalOverflow: nil, link: nil, sourceFullName: nil, borderLineColor: nil, originalHeight: nil, imageFormat: nil, originalWidth: nil, borderWeight: nil)
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsPicturesPostWorksheetPicture(name: name, sheetName: sheetName, pictureIndex: pictureIndex, picture: picture, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPicturesPostWorksheetPicture")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPicturesPutWorksheetAddPicture() 
	{
		let expectation = self.expectation(description: "testcellsPicturesPutWorksheetAddPicture")
		let name:String = BOOK1
		let sheetName:String = SHEET6
		let upperLeftRow:Int32? = 1
		let upperLeftColumn:Int32? = 1
		let lowerRightRow:Int32? = 10
		let lowerRightColumn:Int32? = 10
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
        let picturePath:String? = "\(folder)/WaterMark.png"
        let picture:Picture? = Picture(alternativeText: nil, bottom: nil, top: nil, width: nil, htmlText: nil, textVerticalAlignment: nil, autoShapeType: nil, isPrintable: nil, upperLeftColumn: 1, isLockAspectRatio: nil, isGroup: nil, rotationAngle: nil, zOrderPosition: nil, textHorizontalOverflow: nil, msoDrawingType: nil, textOrientationType: nil, placement: nil, name: nil, isWordArt: nil, linkedCell: nil, upperLeftRow: 1, isLocked: nil, lowerRightRow: 10, isTextWrapped: nil, Y: nil, X: nil, isHidden: nil, _left: nil, _right: nil, text: nil, lowerRightColumn: 10, height: nil, textHorizontalAlignment: nil, textVerticalOverflow: nil, link: nil, sourceFullName: picturePath, borderLineColor: nil, originalHeight: nil, imageFormat: nil, originalWidth: nil, borderWeight: nil)
        
		
        uploadFile(name: name) {
		self.uploadFile(name: "WaterMark.png") {
			CellsAPI.cellsPicturesPutWorksheetAddPicture(name: name, sheetName: sheetName, picture: picture, upperLeftRow: upperLeftRow, upperLeftColumn: upperLeftColumn, lowerRightRow: lowerRightRow, lowerRightColumn: lowerRightColumn, picturePath: picturePath, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPicturesPutWorksheetAddPicture")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
        }
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

}

