//
// CellsSaveAsAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeCellsCloud


class CellsSaveAsAPITests: AsposeCellsCloudTests {

	override func setUp() 
	{
        super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "CellsSaveAsAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error CellsSaveAsAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
	}

	func testcellsSaveAsPostDocumentSaveAs() 
	{
		let expectation = self.expectation(description: "testcellsSaveAsPostDocumentSaveAs")
		let name:String = BOOK1
		let saveOptions:SaveOptions? = PdfSaveOptions(enableHTTPCompression: nil, saveFormat: "xlsx", clearData: nil, cachedFileFolder: nil, validateMergedAreas: nil, refreshChartCache: nil, createDirectory: nil, sortNames: nil, calculateFormula: nil, checkFontCompatibility: nil, onePagePerSheet: true, compliance: nil, defaultFont: nil, printingPageType: nil, imageType: nil, desiredPPI: nil, jpegQuality: nil, securityOptions: nil)
		let newfilename:String = "newbook.xlsx"
		let isAutoFitRows:Bool? = true
		let isAutoFitColumns:Bool? = true
		let folder:String = TEMPFOLDER
		let storageName:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsSaveAsPostDocumentSaveAs(name: name, saveOptions: saveOptions, newfilename: newfilename, isAutoFitRows: isAutoFitRows, isAutoFitColumns: isAutoFitColumns, folder: folder, storageName: storageName)
			{
				(response, error) in
				guard error == nil else {
                    let errorinfo = self.GetErrorDataInfo(error: error as! ErrorResponse)
                    print("error info: \(errorinfo!)")
					XCTFail("error testcellsSaveAsPostDocumentSaveAs")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}
    
    func testcellsSaveAsPostDocumentSaveAsPDF()
    {
        let expectation = self.expectation(description: "testcellsSaveAsPostDocumentSaveAsPDF")
        let name:String = BOOK1
        let saveOptions:PdfSaveOptions? = PdfSaveOptions(enableHTTPCompression: nil, saveFormat: "pdf", clearData: nil, cachedFileFolder: nil, validateMergedAreas: nil, refreshChartCache: nil, createDirectory: nil, sortNames: nil, calculateFormula: nil, checkFontCompatibility: nil, onePagePerSheet: true, compliance: nil, defaultFont: nil, printingPageType: nil, imageType: nil, desiredPPI: nil, jpegQuality: nil, securityOptions: nil)
        let newfilename:String = "newbook.pdf"
        let isAutoFitRows:Bool? = true
        let isAutoFitColumns:Bool? = true
        let folder:String = TEMPFOLDER
        let storageName:String? = nil
        
        uploadFile(name: name) {
            CellsAPI.cellsSaveAsPostDocumentSaveAs(name: name, saveOptions: saveOptions, newfilename: newfilename, isAutoFitRows: isAutoFitRows, isAutoFitColumns: isAutoFitColumns, folder: folder, storageName: storageName)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsSaveAsPostDocumentSaveAsPDF")
                    return
                }
                
                if let response = response {
                    XCTAssertEqual(response.code, 200)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testcellsSaveAsPostDocumentSaveAsMD()
    {
        let expectation = self.expectation(description: "testcellsSaveAsPostDocumentSaveAsMD")
        let name:String = BOOK1
        let saveOptions:PdfSaveOptions? = PdfSaveOptions(enableHTTPCompression: nil, saveFormat: "markdown", clearData: nil, cachedFileFolder: nil, validateMergedAreas: nil, refreshChartCache: nil, createDirectory: nil, sortNames: nil, calculateFormula: nil, checkFontCompatibility: nil, onePagePerSheet: true, compliance: nil, defaultFont: nil, printingPageType: nil, imageType: nil, desiredPPI: nil, jpegQuality: nil, securityOptions: nil)
        let newfilename:String = "newbook.md"
        let isAutoFitRows:Bool? = true
        let isAutoFitColumns:Bool? = nil
        let folder:String = TEMPFOLDER
        let storageName:String? = nil
        
        uploadFile(name: name) {
            CellsAPI.cellsSaveAsPostDocumentSaveAs(name: name, saveOptions: saveOptions, newfilename: newfilename, isAutoFitRows: isAutoFitRows, isAutoFitColumns: isAutoFitColumns, folder: folder, storageName: storageName)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testcellsSaveAsPostDocumentSaveAsMD")
                    return
                }
                
                if let response = response {
                    XCTAssertEqual(response.code, 200)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

}

