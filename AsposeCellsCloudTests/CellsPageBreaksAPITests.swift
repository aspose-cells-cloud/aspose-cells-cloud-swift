//
// CellsPageBreaksAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeCellsCloud


class CellsPageBreaksAPITests: AsposeCellsCloudTests {

	override func setUp() 
	{
        super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "CellsPageBreaksAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error CellsPageBreaksAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
	}

	func testcellsPageBreaksDeleteHorizontalPageBreak() 
	{
		let expectation = self.expectation(description: "testcellsPageBreaksDeleteHorizontalPageBreak")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let index:Int32 = 0
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsPageBreaksAPI.cellsPageBreaksDeleteHorizontalPageBreak(name: name, sheetName: sheetName, index: index, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageBreaksDeleteHorizontalPageBreak")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPageBreaksDeleteHorizontalPageBreaks() 
	{
		let expectation = self.expectation(description: "testcellsPageBreaksDeleteHorizontalPageBreaks")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let row:Int32? = 1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsPageBreaksAPI.cellsPageBreaksDeleteHorizontalPageBreaks(name: name, sheetName: sheetName, row: row, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageBreaksDeleteHorizontalPageBreaks")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPageBreaksDeleteVerticalPageBreak() 
	{
		let expectation = self.expectation(description: "testcellsPageBreaksDeleteVerticalPageBreak")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let index:Int32 = 0
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsPageBreaksAPI.cellsPageBreaksDeleteVerticalPageBreak(name: name, sheetName: sheetName, index: index, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageBreaksDeleteVerticalPageBreak")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPageBreaksDeleteVerticalPageBreaks() 
	{
		let expectation = self.expectation(description: "testcellsPageBreaksDeleteVerticalPageBreaks")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let column:Int32? = 1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsPageBreaksAPI.cellsPageBreaksDeleteVerticalPageBreaks(name: name, sheetName: sheetName, column: column, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageBreaksDeleteVerticalPageBreaks")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPageBreaksGetHorizontalPageBreak() 
	{
		let expectation = self.expectation(description: "testcellsPageBreaksGetHorizontalPageBreak")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let index:Int32 = 0
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsPageBreaksAPI.cellsPageBreaksGetHorizontalPageBreak(name: name, sheetName: sheetName, index: index, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageBreaksGetHorizontalPageBreak")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPageBreaksGetHorizontalPageBreaks() 
	{
		let expectation = self.expectation(description: "testcellsPageBreaksGetHorizontalPageBreaks")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsPageBreaksAPI.cellsPageBreaksGetHorizontalPageBreaks(name: name, sheetName: sheetName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageBreaksGetHorizontalPageBreaks")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPageBreaksGetVerticalPageBreak() 
	{
		let expectation = self.expectation(description: "testcellsPageBreaksGetVerticalPageBreak")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let index:Int32 = 0
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsPageBreaksAPI.cellsPageBreaksGetVerticalPageBreak(name: name, sheetName: sheetName, index: index, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageBreaksGetVerticalPageBreak")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsPageBreaksGetVerticalPageBreaks() 
	{
		let expectation = self.expectation(description: "testcellsPageBreaksGetVerticalPageBreaks")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsPageBreaksAPI.cellsPageBreaksGetVerticalPageBreaks(name: name, sheetName: sheetName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageBreaksGetVerticalPageBreaks")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: 80, handler: nil)
	}

	func testcellsPageBreaksPutHorizontalPageBreak() 
	{
		let expectation = self.expectation(description: "testcellsPageBreaksPutHorizontalPageBreak")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let cellname: String = CellName
		let row:Int32? = 1
		let column:Int32? = 1
		let startColumn:Int32 = 1
		let endColumn:Int32? = 1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsPageBreaksAPI.cellsPageBreaksPutHorizontalPageBreak(name: name, sheetName: sheetName, cellname: cellname, row: row, column: column, startColumn: startColumn, endColumn: endColumn, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageBreaksPutHorizontalPageBreak")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: 80, handler: nil)
	}

	func testcellsPageBreaksPutVerticalPageBreak() 
	{
		let expectation = self.expectation(description: "testcellsPageBreaksPutVerticalPageBreak")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let cellname: String = CellName
		let column:Int32? = 1
		let row:Int32? = 1
		let startRow:Int32 = 1
		let endRow:Int32? = 1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsPageBreaksAPI.cellsPageBreaksPutVerticalPageBreak(name: name, sheetName: sheetName, cellname: cellname, column: column, row: row, startRow: startRow, endRow: endRow, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsPageBreaksPutVerticalPageBreak")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: 80, handler: nil)		
	}

}

