//
// CellsOleObjectsAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeCellsCloud


class CellsOleObjectsAPITests: AsposeCellsCloudTests {

	override func setUp() 
	{
        super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "CellsOleObjectsAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error CellsOleObjectsAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
	}

	func testcellsOleObjectsDeleteWorksheetOleObject() 
	{
		let expectation = self.expectation(description: "testcellsOleObjectsDeleteWorksheetOleObject")
		let name:String = BOOK1
		let sheetName:String = SHEET6
		let oleObjectIndex:Int32 = 0
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsOleObjectsDeleteWorksheetOleObject(name: name, sheetName: sheetName, oleObjectIndex: oleObjectIndex, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsOleObjectsDeleteWorksheetOleObject")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsOleObjectsDeleteWorksheetOleObjects() 
	{
		let expectation = self.expectation(description: "testcellsOleObjectsDeleteWorksheetOleObjects")
		let name:String = BOOK1
		let sheetName:String = SHEET6
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsOleObjectsDeleteWorksheetOleObjects(name: name, sheetName: sheetName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsOleObjectsDeleteWorksheetOleObjects")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsOleObjectsGetWorksheetOleObject() 
	{
		let expectation = self.expectation(description: "testcellsOleObjectsGetWorksheetOleObject")
		let name:String = BOOK1
		let sheetName:String = SHEET6
		let objectNumber:Int32 = 0
		let format:String? = nil
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsOleObjectsGetWorksheetOleObject(name: name, sheetName: sheetName, objectNumber: objectNumber, format: format, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsOleObjectsGetWorksheetOleObject")
					return
				}
	
				if let response = response {
                    //response is a Data of json, we may write it down and check it.
                    let fileName = "testcellsOleObjectsGetWorksheetOleObject.txt"
                    let filePath = NSHomeDirectory()
                    let fileManager = FileManager.default
                    let path = "\(filePath)/tmp/\(fileName)"
                    fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                    let handle = FileHandle(forWritingAtPath:path)
                    handle?.write(response as Data)
                    expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsOleObjectsGetWorksheetOleObjects() 
	{
		let expectation = self.expectation(description: "testcellsOleObjectsGetWorksheetOleObjects")
		let name:String = BOOK1
		let sheetName:String = SHEET6
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsOleObjectsGetWorksheetOleObjects(name: name, sheetName: sheetName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsOleObjectsGetWorksheetOleObjects")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsOleObjectsPostUpdateWorksheetOleObject() 
	{
		let expectation = self.expectation(description: "testcellsOleObjectsPostUpdateWorksheetOleObject")
		let name:String = BOOK1
		let sheetName:String = SHEET6
		let oleObjectIndex:Int32 = 0
		let ole:OleObject? = OleObject(alternativeText: nil, bottom: nil, top: nil, width: 78, htmlText: nil, textVerticalAlignment: nil, autoShapeType: nil, isPrintable: nil, upperLeftColumn: nil, isLockAspectRatio: nil, isGroup: nil, rotationAngle: nil, zOrderPosition: nil, textHorizontalOverflow: nil, msoDrawingType: nil, textOrientationType: nil, placement: nil, name: nil, isWordArt: nil, linkedCell: nil, upperLeftRow: nil, isLocked: nil, lowerRightRow: nil, isTextWrapped: nil, Y: nil, X: nil, isHidden: nil, _left: 10, _right: 10, text: nil, lowerRightColumn: nil, height: 90, textHorizontalAlignment: nil, textVerticalOverflow: nil, link: nil, displayAsIcon: nil, fileFormatType: nil, sourceFullName: nil, isAutoSize: nil, imageSourceFullName: nil, progID: nil, isLink: nil)
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsOleObjectsPostUpdateWorksheetOleObject(name: name, sheetName: sheetName, oleObjectIndex: oleObjectIndex, ole: ole, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsOleObjectsPostUpdateWorksheetOleObject")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsOleObjectsPutWorksheetOleObject() 
	{
		let expectation = self.expectation(description: "testcellsOleObjectsPutWorksheetOleObject")
		let name:String = BOOK1
		let sheetName:String = SHEET6
		let upperLeftRow:Int32? = 1
		let upperLeftColumn:Int32? = 1
		let height:Int32? = 100
		let width:Int32? = 80
		let folder:String = TEMPFOLDER
		let storage:String? = nil
        let oleFile:String? = "\(folder)/OLEDoc.docx"
        let imageFile:String? = "\(folder)/word.jpg"
        let oleObject:OleObject? = nil/*OleObject(alternativeText: nil, bottom: nil, top: nil, width: 80, htmlText: nil, textVerticalAlignment: nil, autoShapeType: nil, isPrintable: nil, upperLeftColumn: 1, isLockAspectRatio: nil, isGroup: nil, rotationAngle: nil, zOrderPosition: nil, textHorizontalOverflow: nil, msoDrawingType: nil, textOrientationType: nil, placement: nil, name: nil, isWordArt: nil, linkedCell: nil, upperLeftRow: 1, isLocked: nil, lowerRightRow: nil, isTextWrapped: nil, Y: nil, X: nil, isHidden: nil, _left: nil, _right: nil, text: nil, lowerRightColumn: nil, height: 100, textHorizontalAlignment: nil, textVerticalOverflow: nil, link: nil, displayAsIcon: nil, fileFormatType: nil, sourceFullName: oleFile, isAutoSize: nil, imageSourceFullName: imageFile, progID: nil, isLink: nil)*/
        
        uploadFile(name: name) {
            self.uploadFile(name: "OLEDoc.docx") {
                self.uploadFile(name: "word.jpg") {
                    CellsAPI.cellsOleObjectsPutWorksheetOleObject(name: name, sheetName: sheetName, oleObject: oleObject, upperLeftRow: upperLeftRow, upperLeftColumn: upperLeftColumn, height: height, width: width, oleFile: oleFile, imageFile: imageFile, folder: folder, storage: storage)
                    {
                        (response, error) in
                        guard error == nil else {
                            XCTFail("error testcellsOleObjectsPutWorksheetOleObject")
                            return
                        }
            
                        if let response = response {
                            XCTAssertEqual(response.code, 200)
                            expectation.fulfill()
                        }
                    }
                }
            }
        }
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

}

