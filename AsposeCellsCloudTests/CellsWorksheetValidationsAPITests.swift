//
// CellsWorksheetValidationsAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeCellsCloud


class CellsWorksheetValidationsAPITests: AsposeCellsCloudTests {

	override func setUp() 
	{
        super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "CellsWorksheetValidationsAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error CellsWorksheetValidationsAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
	}

	func testcellsWorksheetValidationsDeleteWorksheetValidation() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetValidationsDeleteWorksheetValidation")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let validationIndex:Int32 = 0
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorksheetValidationsDeleteWorksheetValidation(name: name, sheetName: sheetName, validationIndex: validationIndex, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetValidationsDeleteWorksheetValidation")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetValidationsGetWorksheetValidation() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetValidationsGetWorksheetValidation")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let validationIndex:Int32 = 0
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorksheetValidationsGetWorksheetValidation(name: name, sheetName: sheetName, validationIndex: validationIndex, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetValidationsGetWorksheetValidation")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetValidationsGetWorksheetValidations() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetValidationsGetWorksheetValidations")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorksheetValidationsGetWorksheetValidations(name: name, sheetName: sheetName, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetValidationsGetWorksheetValidations")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetValidationsPostWorksheetValidation() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetValidationsPostWorksheetValidation")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let validationIndex:Int32 = 0
        
        let area:CellArea = CellArea(startRow: 0, startColumn: 0, endColumn: 0, endRow: 0)
        let areaList:[CellArea] = [area]
		let validation:Validation? = Validation(link: nil, formula2: nil, formula1: "=(OR(A1=\"Yes\",A1=\"No\"))", showError: nil, errorMessage: nil, inCellDropDown: nil, showInput: nil, alertStyle: nil, inputTitle: nil, ignoreBlank: true, value2: nil, value1: nil, _operator: nil, errorTitle: nil, type: "Custom", inputMessage: nil, areaList: areaList)
        
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
        uploadFile(name: BOOK1) {
		self.uploadFile(name: name) {
			CellsAPI.cellsWorksheetValidationsPostWorksheetValidation(name: name, sheetName: sheetName, validationIndex: validationIndex, validation: validation, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetValidationsPostWorksheetValidation")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
        }
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcellsWorksheetValidationsPutWorksheetValidation() 
	{
		let expectation = self.expectation(description: "testcellsWorksheetValidationsPutWorksheetValidation")
		let name:String = BOOK1
		let sheetName:String = SHEET1
		let range:String? = RANGE
		let folder:String = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			CellsAPI.cellsWorksheetValidationsPutWorksheetValidation(name: name, sheetName: sheetName, range: range, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testcellsWorksheetValidationsPutWorksheetValidation")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

}

